<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无参数机器翻译遇上对比学习效率和性能我全都要</title>
      <link href="/2022/12/20/wu-can-shu-ji-qi-fan-yi-yu-shang-dui-bi-xue-xi-xiao-lu-he-xing-neng-wo-quan-du-yao/"/>
      <url>/2022/12/20/wu-can-shu-ji-qi-fan-yi-yu-shang-dui-bi-xue-xi-xiao-lu-he-xing-neng-wo-quan-du-yao/</url>
      
        <content type="html"><![CDATA[<p> 非参数方法最近已成功应用于语言建模和问答系统。非参数的方法具有如下优势：</p><ul><li>表达能力强，因为它们可以在测试时使用任意数量的数据</li><li>适应能力强，因为预测可以通过改变数据存储来控制</li><li>可解释性强，因为用来进行预测的数据可以直接检查</li></ul><h3 id="1-信息"><a href="#1-信息" class="headerlink" title="1 信息"></a>1 信息</h3><ul><li>论文标题：<a href="https://aclanthology.org/2022.acl-long.154/">Efficient Cluster-Based k-Nearset-Neighbor Machine Translation</a></li><li>公开源码:  <a href="https://github.com/wonderseen/PCKMT">PCKMT</a></li><li>会议/期刊: ACL2022</li><li>论文单位: 天津大学，阿里巴巴达摩院</li></ul><h3 id="2-背景"><a href="#2-背景" class="headerlink" title="2 背景"></a>2 背景</h3><p> 基于 KNN 的检索式增强首先在<a href="ICLR2020" title="Generalization through Memorization: Nearest Neighbor Language Models">Language Model</a>上被提出，在 2021 的 <a href="ICLR2021" title="Nearest Neighbor Machine Translation">ICLR</a> 文章中，首先将 KNN 增强的方法应用到了机器翻译上，&nbsp;通过 KNN 的词级别的检索和融合，能够在不进行特定领域训练的前提下，有效提高模型在领域数据集上的效果。其包含两个主要的步骤：首先是创建数据库(Datastore)，也就是使用基础模型来进行正向传播，利用在解码时候映射到词表前的特征和对应的目标词作为键值对存储在 Datastore 中，对应图 1 中 Datastore 的 Representation 和 Target。</p><p><a href="https://imgse.com/i/z5vh9S"><img src="https://s1.ax1x.com/2022/12/14/z5vh9S.png" alt="图1 基于 KNN 的机器翻译模型"></a></p><p>其次，在正式翻译时，每个具体的解码步骤中，使用相同位置的特征，从 Datastore 中进行向量检索，使用检索的结果以及对应的距离(Distances)，结合温度超参数来计算得到最终的概率(对应公式 1):</p><p>$$P_{kNN}(y_i|x,\widehat{y}_{1:i-1})\propto \sum _{(k_j,v_j)\in \mathcal{N}}\mathbb{l} _{y_i=v_j}exp(\frac{-d(k_j,f(x,\widehat{y} _{1:i-1})}{T})$$</p><p>其中$\mathcal{N}$表示在Datastore中进行向量检索得到的$N$个键值对， $T$表示温度超参数，$\mathbb{l}_{y_i=v_j}$代表指示函数，表示只在对应满足条件的位置添加概率。</p><p>将得到的概率作为目标词概率按照一定比例融合到原始模型输出词表的概率分布上(对应公式 2)：</p><p>$$p({ y_i|x,\widehat{y} _{1:i-1} = \lambda p _{kNN}(y _i|x,\widehat{y} _{1:i-1})+(1-\lambda)pMT(y _i|x,\widehat{y} _{1:i-1}) }$$</p><p>其中$\lambda$是比例超参数，$p_{kNN}$是上面介绍的kNN检索过程计算得到的对应概率，也就是对应公式1，$pMT$表示基础模型得到的词表上的概率分布。</p><h3 id="3-任务"><a href="#3-任务" class="headerlink" title="3 任务"></a>3 任务</h3><p>检索式增强在各种自然语言处理任务中被广泛应用，其主要目的是基于一定的检索范式来利用现存数据，影响模型最终得到的结果，从而降低模型参数的负担。本文是在机器翻译任务中利用检索来进行增强的最新范式。</p><h3 id="4-问题"><a href="#4-问题" class="headerlink" title="4 问题"></a>4 问题</h3><p>虽然2021的<a href="ICLR2021" title="Nearest Neighbor Machine Translation">ICLR</a> 文章在实验部分进行了不同领域的实验，并且得到了良好的效果，展现出来了KNN无参数机器翻译在实际应用上的前景，但是在实际应用中存在两个主要的问题：</p><ul><li><strong>存储大小:</strong> 对于KNN无参数机器翻译而言，在创建 Datastore 的时候，使用词以及对应的特征来作为存储的键值对，最终的 Datastore 的大小跟词的数量以及特征的维度是正相关的。</li><li><strong>时间延迟:</strong> 因为 KNN 的向量检索是在每个解码步骤中进行的，随着 Datastore 的增大，向量检索的延迟会严重影响最终整体翻译的速度。</li></ul><h3 id="5-方案"><a href="#5-方案" class="headerlink" title="5 方案"></a>5 方案</h3><p><a href="ACL2022" title="Efficient Cluster-Based k-Nearset-Neighbor Machine Translation">ACL 2022</a>这篇论文中，作者首先给出了一个在领域数据集上原始的机器翻译和KNN机器翻译的速度对比，其中MT表示的是原始机器翻译模型，<a href="ACL2021" title="Adaptive Nearest Neighbor Machine Translation">AK-MT</a>是KNN-MT的一个变种，也是该论文的Base模型。上述的两个主要的问题都与 Datastore 的大小有着密切的关系，作者基于对特征的可视化分析，提出了两个不同方向改进：</p><ul><li><strong>1. 特征维度:</strong> 使用一个额外的网络(Compact Network)来对模型的特征进行降维。并且基于不同的语义单元应该互相不重合的假设下，使用对比学习的方法来在降维的同时对不同的语义单元进行分割，增强向量检索的准确度。</li><li><strong>2. 词数量:</strong> 使用一个剪枝策略来对Datastore中冗余的部分进行修剪从而降低Datastore的大小，进一步提升翻译的速度。</li></ul><p><img src="https://i.328888.xyz/2022/12/15/yYGWH.png" alt="图 2 翻译速度对比"></p><h3 id="6-新意"><a href="#6-新意" class="headerlink" title="6 新意"></a>6 新意</h3><h4 id="6-1-基于聚类的特征维度压缩"><a href="#6-1-基于聚类的特征维度压缩" class="headerlink" title="6.1 基于聚类的特征维度压缩"></a>6.1 基于聚类的特征维度压缩</h4><p>在KNN机器翻译研究中使用的原始模型的特征维度通常为1024维，并且在通用的数据上训练得到的模型。因此模型是缺少领域相关知识，并且高维语义空间下，向量是稀疏的并且带有噪声。使用传统的降维方法(比如 PCA)，在<a href="EMNLP2021" title="Efficient Nearest Neighbor Language Models">相关研究中</a>中被证明效果比较差，对于 1024 维而言，在保证性能的前提下，最多只能够降低到 512 维。</p><p>在这个部分，基于不同的语义单元以及对比学习的方法，作者不仅对特征维度进行进一步的压缩(1024维—64维)，而且进一步提升了领域数据集上的性能。具体主要分为两个步骤：</p><p><img src="https://i.328888.xyz/2022/12/15/yYzEZ.png" alt="图 3 Compact network"></p><ul><li><strong>1.形成基础的语义单元</strong></li></ul><p>在这里引入了一个概念——Cluster Family。其表示的就是在 Datastore 中所有相同的目标词的键值对集合。对于一个 Cluster Family，使用传统的聚类方法来形成若干个簇（Cluster），使用得到的簇来作为最终的语义单元，体现在图3中的就是 Token A 和 Token B 分别形成了两个不同的簇，也就是得到四个基础语义单元。从图3中也可以看到，不同的簇之间可能是会存在重叠的部分，因此就需要下面的第二个步骤。</p><ul><li><strong>2.对比训练</strong></li></ul><p>不同的语义单元应该是互相不重合，因为重合会导致在检索时候的不准确问题，从而影响最终的翻译性能。具体的，在这里使用了两种不同模式的对比学习loss，来对压缩后的特征进行训练。分别为：Triplet Noise-Contrastive Estimation (NCE) 和 Trplet Distance Ranking（DR），其中前者是使用一个额外的线性层来转成了一个分类任务，而后者是直接使用压缩后的特征来计算L2距离进行排序。</p><p>在对比学习的训练中，锚点和正例是从同一个簇中获得，而负例是从不同目标词的簇中获得。另外还有一个额外的 Word Prediction Loss（WP），是为了将语言学的信息融入到训练压缩特征的网络中。</p><p>从图3中可以看到，Compact Network 主要分为两个部分，也分别对应两个不同的作用，其中$f(\alpha)$是特征压缩层，用来对特征的维度进行压缩。  $f(\theta)$是对比学习层，用来适应NCE的训练需要。特别的，训练NCE 的$f(\theta)$的输出维度是 1，训练 WP 的$f(\theta)$的输出维度是目标语言的词表大小，训练 DR 的时候不需要$f(\theta)$ ，因为它是直接对压缩后的特征进行操作。</p><h4 id="6-2-基于聚类的数据库剪枝"><a href="#6-2-基于聚类的数据库剪枝" class="headerlink" title="6.2 基于聚类的数据库剪枝"></a>6.2 基于聚类的数据库剪枝</h4><p>除了特征以外，词的数量是另一个影响 Datastore 大小，进而影响最终翻译速度的重要因素。针对 KNN 的具体过程，一个直观的动机就是：在具有相同目标词的情况下，如果对应特征之间的区分度足够小，那么是可以视为冗余部分并且进行删除的。作者从统计机器翻译中短语级别的剪枝策略更有效这一结果得到启发，设计了一种基于 N-Gram 的剪枝策略。</p><p>首先定义了一个具体的衡量标准——**翻译代价(Translation Cost)**。具体的，针对某一个目标词，其翻译代价就是在这个目标词的来源语料中，以这个目标词作为结束词的 N-Gram 的困惑度，为了更好衡量翻译代价，使用 1 到 N 的 N-Gram 中的最低困惑度作为最终的翻译代价。</p><p><img src="https://i.328888.xyz/2022/12/15/yqfTx.png" alt="图 4 冗余的 2-gram 例子"></p><p>如图 4 中，对于 Datastore 中的目标词”man”来说，第一句和第二句得到的键值对相对而言就是冗余。在得到 Datastore 中所有目标词的翻译代价以后，在目标词的内部根据翻译代价来进行聚类，并且在剪枝的时候对所有得到的簇根据预设的比例进行随机采样，最终得到剪枝以后的 Datastore。</p><h3 id="7-价值"><a href="#7-价值" class="headerlink" title="7 价值"></a>7 价值</h3><p>论文中使用了 5 个不同的领域数据集分别为 IT、Koran、Medical、Law 和 Subtitles。其中前四个数据集是 Baseline 论文中使用的数据集，后者是包含了更多的数据用以表现剪枝的性能。对于特征维度也就是  的输出大小，实验中使用 IT 数据集在 [16, 32, 64, 128] 中进行搜索，并且最终确定为 64。剪枝策略中的 N-Gram 中的 1-N 设置为 1-2。</p><h3 id="8-效果"><a href="#8-效果" class="headerlink" title="8 效果"></a>8 效果</h3><h4 id="8-1-特征维度压缩性能"><a href="#8-1-特征维度压缩性能" class="headerlink" title="8.1 特征维度压缩性能"></a>8.1 特征维度压缩性能</h4><p>首先对论文中提出的不同损失和锚点选择方法进行了组合，在 IT 数据集上进行实验。其中 DY 代表随机选择簇中一个点，ST 表示选择簇中心作为固定的锚点。CL 代表在不同的 Cluster 间选择负例进行对比学习的训练，而不是把负例的选择约束在不同 Cluster Family 上的簇中。</p><p>值得注意的是，传统的降维方法(PCA &amp; SVD)在性能上都有所降低。在三个 Loss 中，NCE 的效果表现最好，可能的原因是 NCE 的参数相较于 WP 来说更少，在使用少量验证集训练的情况下，能够得到更好的结果。而 DR 性能差在于本身得到的特征已经是训练好模型上的结果，最小化距离的约束可能过于强硬。</p><p><img src="https://i.328888.xyz/2022/12/15/yqApL.png" alt="图 5 不同方法效果对比"></p><p>在不同数据集上的实验结果如图 6 所示，基本的设置跟图 5 中最优设置一致。在不同数据集上均能够得到更好效果。并且为了测试训练的 Compact Network 的泛化能力，作者使用了一个大规模的通用语料库 Wikimatrix Corpus 来训练 Compact Network，然后直接在四个数据集上进行测试，可以看到在整体上得到的结果依旧是较好的。</p><p><img src="https://i.328888.xyz/2022/12/15/yqnAU.png" alt="图 6 不同数据集上的结果"></p><p>对于 Compact Network 降维后的特征进行可视化，结果如图 7 所示，随机选择 10 个目标词来可视化，左边是原始的特征，右边是降维以后的特征。<strong>可以看到右边不同点之间的聚类效应更加的明显，证明了对比学习在降维的时候确实起到了将不同簇分割的效果，验证了所提方法的有效性。</strong></p><p><a href="https://imgloc.com/i/yqXBo"><img src="https://i.328888.xyz/2022/12/15/yqXBo.png" alt="图 7 特征可视化"></a></p><h4 id="8-2-剪枝策略性能"><a href="#8-2-剪枝策略性能" class="headerlink" title="8.2 剪枝策略性能"></a>8.2 剪枝策略性能</h4><p>在这个部分进行的是剪枝方法的实验，图 8 中给出了其他四种不同的简单剪枝方法和本文提出的方法在四个领域数据集上的效果。其中 SP 表示根据与聚类中心的距离来进行剪枝，LTP 和 HTP 分别代表对翻译中生成概率低和高的部分进行剪枝，RP 表示使用随机均匀采样的方法来进行剪枝。</p><p><a href="https://imgloc.com/i/yqErd"><img src="https://i.328888.xyz/2022/12/15/yqErd.png" alt="图 8 10%剪枝性能"></a></p><p>从结果上看，本文提出的方法在总体上是优于其他方法的，但是效果的提升比较有限，反而是随机的方法依旧保持可比性。根据统计的 N-Gram 可以看到，出现这种情况的原因可能在于构成 Datastore 的数据集中的 N-Gram 的冗余度是很低的，大部分 N-Gram 都是独一无二的。</p><p>所以要体现剪枝算法的性能，需要一个更大的数据集来实验。在这里作者使用了 Subtitles 数据集来进行实验, 并且跟 RP 来进行对比，在 Subtitle 这个比较大的数据集上结果如图 9，剪枝能够起到更好的效果，并且相较于 RP 而言，本文提出的方法随着剪枝比例提高，效果更加稳定。</p><p><a href="https://imgloc.com/i/yqFOz"><img src="https://i.328888.xyz/2022/12/15/yqFOz.png" alt="图 9 subtitles 上剪枝效果对比，k 表示检索数量"></a></p><p>最后就是剪枝以后的速度和效果对比(图 10)，在 Subtitles 数据集上能够进行更大比例的剪枝，并且模型性能得到了一定提升，证明了剪枝方法的有效性。从最终结果上，我们也可以看到，特征维度压缩和剪枝都能够起到提升翻译速度的作用。</p><p><img src="https://i.328888.xyz/2022/12/15/yqdaa.png" alt="图 10 Subtitles 性能和速度对比(CKMT 表示添加了对比学习，PCKMT 表示在 CKMT 的基础上添加剪枝策略)"></p><h3 id="9-结论"><a href="#9-结论" class="headerlink" title="9 结论"></a>9 结论</h3><p>该论文针对 KNN 无参数机器翻译中需要较大的存储空间和速度慢的两个主要问题，在创建的 Datastore 中引入语义单元的概念，并且基于不同语义单元不重合的假设，在特征维度进行压缩的时候使用对比学习来进行训练，在保证性能的前提下将特征维度从 1024 维降低到了 64 维，缓解了要求较大存储空间的问题。并且提出了基于 N-Gram 的剪枝策略，在大规模数据集上体现出来了较好的效果。两个方法都能够降低 KNN 所带来的额外时间损耗。实验表明，降维以后的特征中不同语义单元的聚集现象更加明显，并且在所有数据集上都能够取得 SOTA 的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 机器翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建基于医学领域的藏语命名实体识别数据集</title>
      <link href="/2022/10/04/gou-jian-ji-yu-yi-xue-ling-yu-de-cang-yu-ming-ming-shi-ti-shi-bie-shu-ju-ji/"/>
      <url>/2022/10/04/gou-jian-ji-yu-yi-xue-ling-yu-de-cang-yu-ming-ming-shi-ti-shi-bie-shu-ju-ji/</url>
      
        <content type="html"><![CDATA[<p>今天小编为大家告知一篇关于构建基于医学领域的藏语命名实体识别数据集。</p><h4 id="一、获取中文医学命名实体识别-CMeEE-数据集"><a href="#一、获取中文医学命名实体识别-CMeEE-数据集" class="headerlink" title="一、获取中文医学命名实体识别(CMeEE)数据集"></a>一、获取中文医学命名实体识别(CMeEE)数据集</h4><p>首先，从中文医疗信息处理挑战榜CBLUE数据集下载中文医学命名实体识别(CMeEE)数据集，此数据集含有9个实体类别，具体格式如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"呼吸肌麻痹和呼吸中枢受累患者因呼吸不畅可并发肺炎、肺不张等。"</span><span class="token punctuation">,</span>  <span class="token property">"entities"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"start_idx"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_idx"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bod"</span><span class="token punctuation">,</span>      <span class="token string">"entity: "</span>呼吸肌"    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"start_idx"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_idx"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"sym"</span><span class="token punctuation">,</span>       <span class="token string">"entity: "</span>呼吸肌麻痹"     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span>       <span class="token property">"start_idx"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>       <span class="token property">"end_idx"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>       <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bod"</span><span class="token punctuation">,</span>       <span class="token string">"entity: "</span>呼吸中枢"     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span>       <span class="token property">"start_idx"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>       <span class="token property">"end_idx"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>       <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"sym"</span><span class="token punctuation">,</span>       <span class="token string">"entity: "</span>呼吸中枢受累"   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>      <span class="token property">"start_idx"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>      <span class="token property">"end_idx"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"sym"</span><span class="token punctuation">,</span>      <span class="token string">"entity: "</span>呼吸不畅"    <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>      <span class="token property">"start_idx"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>      <span class="token property">"end_idx"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"dis"</span><span class="token punctuation">,</span>      <span class="token string">"entity: "</span>肺炎"    <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span>      <span class="token property">"start_idx"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>      <span class="token property">"end_idx"</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"dis"</span><span class="token punctuation">,</span>      <span class="token string">"entity: "</span>肺不张"    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、翻译数据集"><a href="#二、翻译数据集" class="headerlink" title="二、翻译数据集"></a>二、翻译数据集</h4><p>本文使用已训练的汉藏翻译模型对此<code>text</code>和每个<code>entity</code>进行翻译，本次使用的翻译框架为基于<code>transformer</code>的OpenNMT框架，使用200w藏汉平行语料进行训练，数据涵盖了法律、新闻以及医学等领域。通过评分在藏译汉上BLEU值为43.29，汉译藏上BLEU值为32.68。若您需要此翻译模型，请关注<font color="red">源码上门取算法码上到</font>并回复<font color="yellow">藏汉翻译模型</font>即可获取使用。</p><ul><li>第一步，针对<code>text</code>原始序列文本进行翻译，译后获得了中文<code>text</code>对应的藏文<code>text</code>，如下所示：<pre class="line-numbers language-text" data-language="text"><code class="language-text">source:最终因脑实质损伤导致呼吸和循环衰竭而死亡。target:མཇུག་མཐར་ཀླད་པར་གནོད་སྐྱོན་ཐེབས་ནས་དབུགས་འབྱིན་རྔུབ་དང་འཁོར་རྒྱུག་ཉམས་ནས་ཤི་བ་རེད།<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>注明，其中部分数据翻译后在目标端中出现未登录词，此时我们通过人工进行修复对应的未登录词。</li><li>第二步，针对<code>entity</code>原始序列文本进行翻译，译后获得了中文<code>entity</code>对应的藏文<code>text</code>，如下所示：<pre class="line-numbers language-text" data-language="text"><code class="language-text">{'脑': 'ཀླད་ པ།','结 缔 组 织': 'འཛུགས་ བསྐྲུན་ རྩ་ འཛུགས།','血 小 板': 'ཁྲག་ ལེབ་ ཆུང་ བ།'}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>注明，部分实体翻译后在目标端中出现未登录词，此时通过人工进行修复对应的未登录词。另外，目标端实体中含有“།”，此时为了在下游任务中具体匹配以及其他操作，此处统一去除分隔符“།”。</li></ul><h4 id="三、后处理"><a href="#三、后处理" class="headerlink" title="三、后处理"></a>三、后处理</h4><p>最后按照原始数据文件，我们构建了基于构建基于医学领域的藏语命名实体识别数据集。最终数据集如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"文本"</span><span class="token operator">:</span> <span class="token string">"གློ་ཚད་ཀྱི་མ་གཞིའི་གཉན་ཚད་ནི་དལ་བས་སྤྱིར་བཏང་གི་ནད་རྟགས་ཅུང་ཡང་བ་ཡིན།"</span><span class="token punctuation">,</span>  <span class="token property">"实体属性"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"实体"</span><span class="token operator">:</span> <span class="token string">"གློ་ཚད་ཀྱི་མ་གཞིའི་གཉན་ཚད"</span><span class="token punctuation">,</span>      <span class="token property">"开始"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"结尾"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>      <span class="token property">"标签"</span><span class="token operator">:</span> <span class="token string">"dis"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token property">"文本"</span><span class="token operator">:</span> <span class="token string">"ནད་པའི་ལུས་པོའི་ལྗིད་ཚད་ནི་དོན་དངོས་ཀྱི་ཚད་གཞིར་འཛིན་དགོས་ཤིང་།ལོ་རྒན་པའི་ལྗིད་ཚད་ནི་དར་མའི་ཚད་ལས་བརྒལ་ན་དར་མའི་གྲངས་ཚད་དེ་ཚད་གཞིར་འཛིན་དགོས།"</span><span class="token punctuation">,</span>  <span class="token property">"实体属性"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"实体"</span><span class="token operator">:</span> <span class="token string">"ལུས་པོའི་ལྗིད་ཚད"</span><span class="token punctuation">,</span>      <span class="token property">"开始"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>      <span class="token property">"结尾"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>      <span class="token property">"标签"</span><span class="token operator">:</span> <span class="token string">"ite"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四、若您需要数据，请在此点击并<a href="https://github.com/Shajiu/NaturalLanguageProcessing/tree/master/NamedEntityRecognition/corpus/TibetanCMeEE">下载</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vsCode在线与离线安装remote-ssh插件搭建远程开发环境</title>
      <link href="/2022/08/01/vscode-zai-xian-yu-chi-xian-an-zhuang-remote-ssh-cha-jian-da-jian-yuan-cheng-kai-fa-huan-jing/"/>
      <url>/2022/08/01/vscode-zai-xian-yu-chi-xian-an-zhuang-remote-ssh-cha-jian-da-jian-yuan-cheng-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>VSCode是微软的一个开源项目，目前非常受欢迎的一款轻量级代码编辑器(配合插件还可以进行调试、编译等操作)，各种插件可以满足你的日常开发所需。Remote-ssh是微软发布的用于远程开发的一款插件，如果你是像我一样不习惯使用vim作为编辑器的开发者，或者你的开发环境是本地编辑服务器编译的场景，那么你大可以尝试一下这种开发方式，相信你会喜欢上它的。请点击这里即可下载正式版本:</p><blockquote><p><a href="https://code.visualstudio.com/">正式版的下载链接</a><br><a href="https://code.visualstudio.com/insiders/">这是Insiders版本的下载链接</a></p></blockquote><h4 id="分步骤来讲解如何搭建开发环境"><a href="#分步骤来讲解如何搭建开发环境" class="headerlink" title="分步骤来讲解如何搭建开发环境"></a>分步骤来讲解如何搭建开发环境</h4><h6 id="1、确保你的开发机和服务器都已开启ssh服务，且开发机能够使用ssh正常登录服务器。"><a href="#1、确保你的开发机和服务器都已开启ssh服务，且开发机能够使用ssh正常登录服务器。" class="headerlink" title="1、确保你的开发机和服务器都已开启ssh服务，且开发机能够使用ssh正常登录服务器。"></a>1、确保你的开发机和服务器都已开启ssh服务，且开发机能够使用ssh正常登录服务器。</h6><ul><li>首先查看开发机的ssh服务，以开发机是windows为例，你可以打开命令行<br><a href="https://mp.weixin.qq.com/s?__biz=MzU3MzkzMzEyMg==&amp;mid=2247483729&amp;idx=1&amp;sn=9b1d3b3644303cbfb14075c4ac1ec1a6&amp;chksm=fd3b527cca4cdb6a958da878695ce8f5c4003b813641467147e785b6a5b11e52c26734f0af05&amp;scene=178&amp;cur_album_id=1375967386989576193#rd">https://mp.weixin.qq.com/s?__biz=MzU3MzkzMzEyMg==&amp;mid=2247483729&amp;idx=1&amp;sn=9b1d3b3644303cbfb14075c4ac1ec1a6&amp;chksm=fd3b527cca4cdb6a958da878695ce8f5c4003b813641467147e785b6a5b11e52c26734f0af05&amp;scene=178&amp;cur_album_id=1375967386989576193#rd</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>超详细Hexo+Github绚丽博客搭建小白教程</title>
      <link href="/2022/07/16/chao-xiang-xi-hexo-github-xuan-li-bo-ke-da-jian-xiao-bai-jiao-cheng/"/>
      <url>/2022/07/16/chao-xiang-xi-hexo-github-xuan-li-bo-ke-da-jian-xiao-bai-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p><a href="https://shajiu.github.io/">Github 部署演示示例</a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>安装Node.js<br><a href="https://nodejs.org/zh-cn/download/">直接点击官网下载即可</a>，具体参考如下图所示:<br>其他下载–&gt;长期维护版–&gt;选择对应的版本即可下载安装<br><img src="https://s3.bmp.ovh/imgs/2022/07/16/45a30c66430fc6bb.png" alt="Node.js安装教程"></li><li>检查版本<br><img src="https://s3.bmp.ovh/imgs/2022/07/16/4567c617ab1ac046.png" alt="Node.js版本信息"></li><li>若出现如下问题<br><img src="https://s3.bmp.ovh/imgs/2022/07/16/1d8dc914efcddd44.png"></li><li>在Node.js安装目录下，如<code>D:\nodejs</code>文件夹下修改<code>npm</code>和<code>npm.cmd</code>文件，分别修改<code>prefix</code>的值设置为<code>–location=global</code>即可。</li><li>添加国内镜像源<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>安装Git，注册Github账号，另行自找相关资料下载、安装、注册、连接Github与本地。<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ git --version$ git version 2.37.0.windows.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>安装Hexo<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ npm i hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ hexo -vINFO  Validating confighexo: 6.2.0hexo-cli: 4.3.0os: win32 10.0.22000node: 16.16.0v8: 9.4.146.24-node.21uv: 1.43.0zlib: 1.2.11brotli: 1.0.9ares: 1.18.1modules: 93nghttp2: 1.47.0napi: 8llhttp: 6.0.7openssl: 1.1.1q+quiccldr: 40.0icu: 70.1tz: 2021a3unicode: 14.0ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于页面增加简历-可选的"><a href="#关于页面增加简历-可选的" class="headerlink" title="关于页面增加简历(可选的)"></a>关于页面增加简历(可选的)</h3><p>进入博客跟目录下，修改<code> /themes/hexo-theme-matery/layout/about.ejs</code>，找到 &lt;divclass=”card”&gt;标签，然后找到它对应的 标签，接在后面新增一个card，语句如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="card"&gt;    &lt;div class="card-content"&gt;        &lt;div class="card-content article-card-content"&gt;                &lt;div class="title center-align" data-aos="zoom-in-up"&gt;                    &lt;i class="fa fa-address-book"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('myCV') %&gt;                &lt;/div&gt;                &lt;div id="articleContent" data-aos="fade-up"&gt;                    &lt;%- page.content %&gt;                &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="增加建站时间-可选的"><a href="#增加建站时间-可选的" class="headerlink" title="增加建站时间(可选的)"></a>增加建站时间(可选的)</h3><p>首先，修改<code>/themes/hexo-theme-matery/layout/_partial/footer.ejs</code>文件，在最后加上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//北京时间2018-2-13 00:00:00</span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次，在合适的地方(比如copyright声明后面)加上下面的代码即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"sitetime"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/07/17/ec4469d1253e8c3f.png" alt="添加合适的sitetime"></p><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><p>为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。首先在博客根目录下新建一个<code> watermark.py</code>，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token string">u'@yourname'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input&gt;'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行 <code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行 <code>python3 watermark.py all</code>。</p><h3 id="新建友情链接-friends-页-可选的"><a href="#新建友情链接-friends-页-可选的" class="headerlink" title="新建友情链接 friends 页(可选的)"></a>新建友情链接 friends 页(可选的)</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h3 id="添加note"><a href="#添加note" class="headerlink" title="添加note"></a>添加note</h3><blockquote><p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-note">演示</a></p></blockquote><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><pre class="line-numbers language-none"><code class="language-none">{% note [class] [no-icon] [summary] %}Any content (support inline tags too).{% endnote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>[class]</code> : <em>Optional parameter.</em> Supported values: default | primary | success | info | warning | danger.</li><li><code>[no-icon]</code> : <em>Optional parameter.</em> Disable icon in note.</li><li><code>[summary]</code> : <em>Optional parameter.</em> Optional summary of the note.</li></ul><p>All parameters are optional.</p><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre class="line-numbers language-none"><code class="language-none">{% note %}#### Header(without define class style){% endnote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加button"><a href="#添加button" class="headerlink" title="添加button"></a>添加button</h3><blockquote><p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-button">演示</a></p></blockquote><h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><pre class="line-numbers language-none"><code class="language-none">{% button url, text, icon [class], [title] %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-none"><code class="language-none">{% btn url, text, icon [class], [title] %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>url</code> : Absolute or relative path to URL.</li><li><code>text</code> : Button text. Required if no icon specified.</li><li><code>icon</code> : Font Awesome icon name. Required if no text specified.</li><li><code>[class]</code> : <em>Optional parameter.</em> Font Awesome class(es): <code>fa-fw</code> | <code>fa-lg</code> | <code>fa-2x</code> | <code>fa-3x</code> | <code>fa-4x</code> | <code>fa-5x</code></li><li><code>[title]</code> : <em>Optional parameter.</em> Tooltip at mouseover.</li></ul><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><pre class="line-numbers language-none"><code class="language-none">{% button #, Text %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="https://s3.bmp.ovh/imgs/2022/07/16/885715c231fc6bf7.png" alt="首页"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/CHANGELOG.md">CHANGELOG.md</a></p><h2 id="更多部署方式"><a href="#更多部署方式" class="headerlink" title="更多部署方式"></a>更多部署方式</h2><blockquote><p>Jsdelivr 已经被封了，这两个可以加速访问快一点</p></blockquote><h3 id="vercel-部署"><a href="#vercel-部署" class="headerlink" title="vercel 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#vercel-%E9%83%A8%E7%BD%B2">vercel 部署</a></h3><h3 id="cloudflare-Pages-部署"><a href="#cloudflare-Pages-部署" class="headerlink" title="cloudflare Pages 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#cloudflare-Pages-%E9%83%A8%E7%BD%B2">cloudflare Pages 部署</a></h3><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li><li><a href="https://developer.aliyun.com/article/976823">伟阳博客</a></li><li><a href="https://godweiyang.com/2018/04/13/hexo-blog/">伟阳博客</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/10/hello-world/"/>
      <url>/2022/07/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Python绘制桑基图</title>
      <link href="/2022/03/19/li-yong-python-hui-zhi-sang-ji-tu/"/>
      <url>/2022/03/19/li-yong-python-hui-zhi-sang-ji-tu/</url>
      
        <content type="html"><![CDATA[<h3 id="利用Python绘制桑基图"><a href="#利用Python绘制桑基图" class="headerlink" title="利用Python绘制桑基图"></a>利用Python绘制桑基图</h3><p>&amp;emsp; 桑基图(Sankey diagram)，即桑基能量分流图，也叫桑基能量平衡图。它是一种特定类型的流程图，图中延伸的分支的宽度对应数据流量的大小，通常应用于能源、材料成分、金融等数据的可视化分析。因1898年Matthew Henry Phineas Riall Sankey绘制的”蒸汽机的能源效率图”而闻名，此后便以其名字命名为”桑基图”。</p><h3 id="汇总提炼"><a href="#汇总提炼" class="headerlink" title="汇总提炼"></a>汇总提炼</h3><blockquote><p>桑基两个字取自“发明”者的名字<br>属于流程图的一种，核心在于展示数据的流转<br>主要由节点、边和流量三要素构成，边越宽代表流量越大<br>遵循守恒定律，无论怎么流动，开端和末端数据总是一致的</p></blockquote><h3 id="Python手把手绘制桑基图"><a href="#Python手把手绘制桑基图" class="headerlink" title="Python手把手绘制桑基图"></a>Python手把手绘制桑基图</h3><blockquote><p>动手之前，我们再次敲黑板，回顾桑基图组成要素的重点——节点、边和流量。<br>任何桑基图，无论展现形式如何夸张，色彩如何艳丽，动效如何炫酷，本质都逃不出上述3点。<br>只要我们定义好上述3个要素，Python的pyecharts库能够轻松实现桑基图的绘制。</p></blockquote><h3 id="数据实例"><a href="#数据实例" class="headerlink" title="数据实例"></a>数据实例</h3><table><thead><tr><th>性别</th><th>熬夜原因</th><th>文化程度</th><th>人数</th></tr></thead><tbody><tr><td>0</td><td>男</td><td>单身</td><td>小学</td></tr><tr><td>1</td><td>男</td><td>脱单</td><td>初中</td></tr><tr><td>2</td><td>男</td><td>未知</td><td>大专</td></tr><tr><td>3</td><td>女</td><td>单身</td><td>小学</td></tr><tr><td>4</td><td>女</td><td>脱单</td><td>初中</td></tr><tr><td>5</td><td>女</td><td>未知</td><td>大专</td></tr></tbody></table><h3 id="Python具体步骤"><a href="#Python具体步骤" class="headerlink" title="Python具体步骤"></a>Python具体步骤</h3><ul><li>读取数据<pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'性别'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'熬夜原因'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'单身'</span><span class="token punctuation">,</span> <span class="token string">'脱单'</span><span class="token punctuation">,</span> <span class="token string">'未知'</span><span class="token punctuation">,</span> <span class="token string">'单身'</span><span class="token punctuation">,</span> <span class="token string">'脱单'</span><span class="token punctuation">,</span> <span class="token string">'未知'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"文化程度"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"小学"</span><span class="token punctuation">,</span><span class="token string">"初中"</span><span class="token punctuation">,</span><span class="token string">"大专"</span><span class="token punctuation">,</span><span class="token string">"小学"</span><span class="token punctuation">,</span><span class="token string">"初中"</span><span class="token punctuation">,</span><span class="token string">"大专"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'人数'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>首先是节点，这一步需要把所有涉及到的节点去重规整在一起。也就是要把性别一列的“男”、“女”和单身原因一列的“单生”、“脱单”、“未知”以列表内嵌套字典的形式去重汇总：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    values <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> values<span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> value        nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[{'name': '男'}, {'name': '女'}, {'name': '单身'}, {'name': '脱单'}, {'name': '未知'}, {'name': '小学'}, {'name': '初中'}, {'name': '大专'}]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>接着，定义边和流量，数据从哪里流向哪里，流量（值）是多少，循环+字典依然可以轻松搞定：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">first=df.groupby(["性别","熬夜原因"])["人数"].sum().reset_index()second=df.iloc[:,1:]first.columns=["source","target","value"]second.columns=["source","target","value"]result=pd.concat([first,second])result.head(10)linkes = []for i in result.values:    dic = {}    dic['source'] = i[0]    dic['target'] = i[1]    dic['value'] = i[2]    linkes.append(dic)print(linkes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[{'source': '女', 'target': '单身', 'value': 33}, {'source': '女', 'target': '未知', 'value': 62}, {'source': '女', 'target': '脱单', 'value': 5}, {'source': '男', 'target': '单身', 'value': 57}, {'source': '男', 'target': '未知', 'value': 30}, {'source': '男', 'target': '脱单', 'value': 13}, {'source': '单身', 'target': '小学', 'value': 57}, {'source': '脱单', 'target': '初中', 'value': 13}, {'source': '未知', 'target': '大专', 'value': 30}, {'source': '单身', 'target': '小学', 'value': 33}, {'source': '脱单', 'target': '初中', 'value': 5}, {'source': '未知', 'target': '大专', 'value': 62}]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>source-target-value的字典格式，很清晰的描述了数据的流转情况。<pre class="line-numbers language-python" data-language="python"><code class="language-python">pic <span class="token operator">=</span> <span class="token punctuation">(</span>    Sankey<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>  <span class="token comment"># 图例名称</span>             nodes<span class="token punctuation">,</span>  <span class="token comment"># 传入节点数据</span>             linkes<span class="token punctuation">,</span>  <span class="token comment"># 传入边和流量数据</span>             linestyle_opt<span class="token operator">=</span>opts<span class="token punctuation">.</span>LineStyleOpts<span class="token punctuation">(</span>opacity<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> curve<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"source"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 设置透明度、弯曲度、颜色</span>             label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>position<span class="token operator">=</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 标签显示位置</span>             node_gap<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment"># 节点之前的距离</span>             <span class="token comment"># orient="vertical"  # 要垂直显示</span>             <span class="token punctuation">)</span>        <span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'桑基图Demo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'test.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s3.bmp.ovh/imgs/2022/03/1e7db4cc9bf418da.png" alt="桑基图Demo"></li></ul><h4 id="Python画境外新冠病例输入桑基图"><a href="#Python画境外新冠病例输入桑基图" class="headerlink" title="Python画境外新冠病例输入桑基图"></a>Python画境外新冠病例输入桑基图</h4><ul><li>数据，请您点击<a href="https://github.com/Shajiu/ComputerVision/blob/main/VisualFigure/demo.xlsx">这里</a>获取相应excel数据</li><li>源码，请您直接复制如下代码即可复制到Pycharm等IDE中即可运行<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Author  : Shajiu</span><span class="token comment"># @FileName: sanke_dyiagram.py</span><span class="token comment"># @Time    : 2022/3/19 18:22</span><span class="token keyword">import</span> pandas<span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Sankey<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> optsdata <span class="token operator">=</span> pandas<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"E://demo.xlsx"</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">)</span>nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>pandas<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>来源地<span class="token punctuation">,</span> data<span class="token punctuation">.</span>输出地<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    d1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    d1<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>links <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>来源地<span class="token punctuation">,</span> data<span class="token punctuation">.</span>输出地<span class="token punctuation">,</span> data<span class="token punctuation">.</span>数量<span class="token punctuation">)</span><span class="token punctuation">:</span>    d2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    d2<span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span> <span class="token operator">=</span> x    d2<span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y    d2<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span> <span class="token operator">=</span> z    links<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>pic <span class="token operator">=</span> <span class="token punctuation">(</span>    Sankey<span class="token punctuation">(</span>init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token string">"1600px"</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token string">"800px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"确诊病例"</span><span class="token punctuation">,</span>  <span class="token comment"># 图例名称</span>                                                                        nodes<span class="token punctuation">,</span>  <span class="token comment"># 传入节点数据</span>                                                                        links<span class="token punctuation">,</span>  <span class="token comment"># 传入边和流量数据</span>                                                                        <span class="token comment"># 设置透明度、弯曲度、颜色</span>                                                                        linestyle_opt<span class="token operator">=</span>opts<span class="token punctuation">.</span>LineStyleOpts<span class="token punctuation">(</span>opacity<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                                                                                                         curve<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                                                                                                         color<span class="token operator">=</span><span class="token string">"source"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                        <span class="token comment"># 标签显示位置 right/top</span>                                                                        label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>position<span class="token operator">=</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                        node_gap<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment"># 节点之前的距离</span>                                                                        <span class="token comment"># orient="vertical"  # 垂直显示</span>                                                                        <span class="token punctuation">)</span><span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>        title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"TOP10境外输入统计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">"TOP10境外输入统计.html"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>效果图<br><img src="https://s3.bmp.ovh/imgs/2022/03/dea4de11bda4c9dc.png" alt="TOP10境外输入统计.html"></li></ul><h4 id="若您想获取以上两个Demo的全部源码和数据，请您点击这里即可获取。"><a href="#若您想获取以上两个Demo的全部源码和数据，请您点击这里即可获取。" class="headerlink" title="若您想获取以上两个Demo的全部源码和数据，请您点击这里即可获取。"></a>若您想获取以上两个Demo的全部源码和数据，请您点击<a href="https://github.com/Shajiu/ComputerVision/tree/main/VisualFigure">这里</a>即可获取。</h4>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python实现的十大经典排序算法</title>
      <link href="/2022/03/11/yong-python-shi-xian-de-shi-da-jing-dian-pai-xu-suan-fa/"/>
      <url>/2022/03/11/yong-python-shi-xian-de-shi-da-jing-dian-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>用Python实现的十大经典排序算法</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序（Bubble Sort）是一种比较简单的排序算法，它重复地走访过要排序的元素，依次比较相邻两个元素，如果它们的顺序错误就把他们调换过来，直到没有元素再需要交换，排序完成。<br>算法过程<br>比较相邻的元素，如果前一个比后一个大，就把它们两个对调位置。<br>对排序数组中每一对相邻元素做同样的工作，直到全部完成，此时最后的元素将会是本轮排序中最大的数。<br>对剩下的元素继续重复以上的步骤，直到没有任何一个元素需要比较。<br>冒泡排序每次找出一个最大的元素，因此需要遍历 n-1 次 （n为数据序列的长度）。</p>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的关键函数汇总</title>
      <link href="/2022/02/26/python-zhong-de-guan-jian-han-shu-hui-zong/"/>
      <url>/2022/02/26/python-zhong-de-guan-jian-han-shu-hui-zong/</url>
      
        <content type="html"><![CDATA[<h4 id="Python中的关键函数汇总"><a href="#Python中的关键函数汇总" class="headerlink" title="Python中的关键函数汇总"></a>Python中的关键函数汇总</h4><ul><li>统计字符串中字符出现为次数<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import collectionsprint(collections.Counter("abcdef"))Counter({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码命名技巧</title>
      <link href="/2022/02/17/java-dai-ma-ming-ming-ji-qiao/"/>
      <url>/2022/02/17/java-dai-ma-ming-ming-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="优雅整洁的-Java-代码命名技巧"><a href="#优雅整洁的-Java-代码命名技巧" class="headerlink" title="优雅整洁的 Java 代码命名技巧"></a>优雅整洁的 Java 代码命名技巧</h3><p>&amp;emsp;&amp;emsp;合格的程序员不仅仅是让代码跑起来，而是要做到代码整洁，只满足为了能让编译器通过编译，机器能跑就行而写代码的程序会算不上开发者，码农都不算。好的命名能体现出代码的特征，含义或者是用途，让阅读者可以根据名称的含义快速理清程序的脉络。本篇分享如下代码命名套路来提高我们代码命名：</p><blockquote><p>勿模糊，准确达意<br>避免误导<br>做有意义的区分<br>结合上下文简化名称<br>使用可搜索、易读的名称<br>包命名规范<br>类名与方法名规范</p></blockquote><h5 id="一、混乱的代价"><a href="#一、混乱的代价" class="headerlink" title="一、混乱的代价"></a>一、混乱的代价</h5><p>&amp;emsp; &amp;emsp;我相信每个程序员都被某些人的垃圾代码恶心过，导致开发进度被严重延缓、性能差劲、bug 多。每次新增和修改代码如履薄冰，我们只有对那堆腐朽的代码了然于胸才敢修改。<br>&amp;emsp;&amp;emsp;随着时间推移，团队生产力下降，所有人都抵触这个项目，对其束手无策。新手不熟悉原来的场景和设计，不知道如何修改才符合实际意图，导致更容易出现混乱。最后，开发团队产生了抵触心理并造反了，再也无法忍受在这个垃圾代码基础上做开发，而管理层不愿意投入资源重新设计。<br><strong>一个优秀的开发者应该时刻保持代码整洁，无关 deadline。</strong></p><blockquote><p>为什么会写出垃圾代码呢？</p></blockquote><p>&amp;emsp;&amp;emsp;有的人可能会说，需求变化违背了最初的设计、排期太紧没法干好…… 其实，这是一种不专业的托词。推进进度是产品经理他们该干的，虽然痴迷于进度，但是多数产品经理也会期望有良好的可拓展代码以便应对市场变换莫测的需求。<strong>连海誓山盟的爱情都会变，又如何做到需求不会改变呢？</strong> 所以我们比他们更加重视代码质量，才能应对变化的需求。<strong>保护代码持续整洁优雅是每个优秀开发者都应该遵守的原则。</strong> 混乱的代码只会拖慢未来的开发进度，唯一加快进度的方法：<strong>始终尽可能保持代码优雅整洁。</strong> 好比医生在做手术之前要先消毒，你说消毒太耗时间了，直接拿刀子整吧。<strong>作为专业的医生你会照做么？作为专业的程序员，我们要了解代码变坏的风险并坚持保持代码质量。</strong></p><h5 id="二、什么是整洁代码"><a href="#二、什么是整洁代码" class="headerlink" title="二、什么是整洁代码"></a>二、什么是整洁代码</h5><p>&amp;emsp;&amp;emsp;代码质量评判需要综合各种因素得到的，我们并不能从单一的维度去评判。比如代码可读性好，但是空间与时间复杂度高，这并不能算得上是好代码。好的代码应该具备：<strong>易拓展和维护、简洁（只做好一件事）、可复用性强（没有重复代码）、能快速写出单元测试。可读性强、没有副作用（做了名称以外的工作）。</strong></p><ul><li>易拓展和维护</li></ul><p>&amp;emsp; &amp;emsp;在不破坏原来的代码设计下，可以简单快速的修改和添加代码实现功能拓展。简单地说就是预留了拓展点，将新代码放在设计的可拓展点，不会因为新增一个功能而改动大量原始代码。<strong>对修改关闭，对拓展开放，开闭原则。</strong> 对于开发而言，我们维护旧代码的时间超过新项目新代码的时间。<br>&amp;emsp; &amp;emsp;代码的可维护性就变得很重要，也就是说代码分层清晰、模块划分精当，满足高内聚低耦合、抽象出合理的接口，面向接口编程就意味着有较好的可维护性。同样的代码，熟悉他的资深工程师会觉得很容易维护，而新人因为不熟悉代码，不懂设计模式而无法理解。所以，易拓展具有主观性，我们需要提高基础技能才有资格说代码是否易拓展和维护。</p><ul><li>只做好一件事</li></ul><p>&amp;emsp;&amp;emsp;单一职责：每个函数、每个类、每个模块只专注于一件事。不要设计大而全的类或者函数，我们需要将他们拆分成更细粒度功能更加单一的类。它不会隐藏设计者的意图，干净利落的抽象和直截了当的控制语句。我们应该让每个函数每行代码简单、逻辑清晰。这样的话，类依赖和被依赖的类也会变少，减少耦合度。需要注意的是，也不能拆分太细，否则就会破坏内聚性。<strong>高手，就是用最简单的方法去解决复杂问题。</strong></p><ul><li>没有重复代码</li></ul><p>&amp;emsp; 在开发过程中，我们应该尽可能抽象出「变与不变」，复用已经存在的代码，不要写重复的代码。比如运用「封装、继承、抽象、多态」特性，代码封装成模块，隐藏变化的细节，暴露不变的接口。把业务与非业务的代码逻辑分析，抽象成通用的框架、工具类等。比如应用模板方法设计模式将不变的算法逻辑框架定义出来，把变化的点延迟到子类重写。</p><ul><li>能快速写成单元测试</li></ul><p>&amp;emsp;&amp;emsp;代码的可测试性差，比较难写单元测试，那基本上就能说明代码设计得有问题。试想下，如果一个类大而全，有一个方法依赖了十几个外部对象才能完成工作，耦合严重。当你在编写单元测试的时候，需要 mock 十几个依赖对象和数据。那说明这个代码糟透了，需要合理拆分和设计。</p><ul><li>可读性强</li></ul><blockquote><p>软件设计大师 Martin Fowler 说过：「Any fool can write code that a computer can understand. Good programmers write code that humans can understand.」</p></blockquote><p>&amp;emsp; &amp;emsp; 翻译成中文就是：”任何二货都会编写计算机能跑的代码。优秀的程序员能够编写人能够理解的代码。”而可读性就会涉及到编码规范、命名、注释、函数职责是否单一、长度是否精简。有数据显示读代码的时间与写代码的时间比例超过 10：1，并且编写当前代码的难度，取决于读周边代码的难度。所以我认为可读性强是最重要的一点。</p><h5 id="三、高质量命名套路"><a href="#三、高质量命名套路" class="headerlink" title="三、高质量命名套路"></a>三、高质量命名套路</h5><p>&amp;emsp;&amp;emsp; 开发过程后命名随处可见，我们给变量、方法、参数、类、包命名。而命名的好坏会影响我们的可读性，我们不妨从命名作为切入口来写好代码。</p><ul><li>勿模糊，准确达意</li></ul><p>&amp;emsp;&amp;emsp;在开发过程中，一旦发现更好的名称，就换掉旧的。一个变量、方法、或者类的名称应该展示出它该有的功能。根据名字我们能知道它能做什么事情，如何使用。<strong>如果一个名称需要大量注释来补充避免使用者跳坑，那就是糟糕的名字。</strong></p><blockquote><ul><li>变量名体现出该字段作用，比如  LocalDate now = LocaDate.now();  now 标识当前时间。</li><li>防止出现让人模糊无法理解，必须还要依据大量上下文才能理解的代码。</li><li>不要使用魔术。</li></ul></blockquote><ul><li>反例 1 ：使用魔数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从数据库获取列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> buyerList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buyerList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  processedBuyerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s,%s"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会疑问，为啥索引是从 1 开始？为啥 &lt;= 5。除此之外， i 与 1 极其相似，难以区分。正确的方式应该使用实际含义的名字让人理解这么写的目的，否则维护的人将痛苦不堪。</p><ul><li>反例 2：使用生僻字，又臭又长</li></ul><pre class="line-numbers language-UltimateAssociatedSubjectRunBatchServiceImpl```，当我们看到这样的类名，是不是不知道怎么读，也不知道如何搜索和定位，更不知道到底表达的意思是什么，可能命这个名字的人还以为准确表达，其实是“王大妈的裹脚布，又臭又长”。原本的业务含义是：执行关联主体任务相关业务类。鉴于此，我们第一步要避免使用生僻字，可以命名为```LinkSubjectServiceImpl```" data-language="UltimateAssociatedSubjectRunBatchServiceImpl```，当我们看到这样的类名，是不是不知道怎么读，也不知道如何搜索和定位，更不知道到底表达的意思是什么，可能命这个名字的人还以为准确表达，其实是“王大妈的裹脚布，又臭又长”。原本的业务含义是：执行关联主体任务相关业务类。鉴于此，我们第一步要避免使用生僻字，可以命名为```LinkSubjectServiceImpl```"><div class="caption"><span>，清晰简单的表达出关联主体的业务逻辑都在该类。</span></div><code class="language-UltimateAssociatedSubjectRunBatchServiceImpl```，当我们看到这样的类名，是不是不知道怎么读，也不知道如何搜索和定位，更不知道到底表达的意思是什么，可能命这个名字的人还以为准确表达，其实是“王大妈的裹脚布，又臭又长”。原本的业务含义是：执行关联主体任务相关业务类。鉴于此，我们第一步要避免使用生僻字，可以命名为```LinkSubjectServiceImpl```">- 不要误导&amp;emsp;&amp;emsp; 尽量不要使用不同之处较小的名称，这样让他人无法一眼区分两个名称是啥意思。例如：函数 deleteIndex 和函数deleteIndexEx，这两个函数名区别很小了，加之函数 deleteIndexEx后面Ex还是缩写，也不知道是什么意思，所以他人只能去看函数内容才能明白两者的区别。&gt; * XYZStringHandler与 XYZStringStorage。&gt; * UserController与 UserInfoController。让人抓狂，他们到底是一个东西还是不同的？差别在哪？没有两年脑血栓写不出这样的。- 反例 3：名不副实下面是一个生成文件并提供下载功能的接口。``` Javapublic void downloadExcel(HttpServletResponse response) { List&lt;File&gt; files = listFile(); String fileName = System.currentTimeMillis() + ".zip"; DownloadZip.downLoadFiles(files, filePath); DownloadZip.fileDownload(response, filePath, fileName);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会疑惑，<code>downLoadFiles </code>与 <code>fileDownload</code> 到底有啥区别？为啥要调用两次。这种真的是十年脑血栓才写得出来。<code>downLoadFiles</code> 的功能是创建将 files 打包成 zip 文件，而  <code>fileDownload</code>则是把指定的文件输出给浏览器下载。所以 <code>downLoadFiles</code> 应该命名为 <code>createZipFile</code>用于合理区分避免误人子弟。</p><ul><li>做有意义的区分</li></ul><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">getActiveOrder();getActiveOrderInfo();getActiveOrderData();getActiveOrders();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面都是废话命名，别人你怎么知道到底该调用那个方法？哪个表示订单明细？还是历史订单，还是全部订单查询，废话是另一种没有意义的区分。<strong>名称不同，意思却无差别。</strong></p><pre class="line-numbers language-Order、OrderInfo、OrderData```，他们名称相同" data-language="Order、OrderInfo、OrderData```，他们名称相同"><div class="caption"><span>，意思却无差别，**属于毫无意义的废话**。如果缺少明确约定，变量moneyAmount就与money没区别。Variable一词永远不应当出现在变量名中。Table一词永远不应当出现在表名中。</span></div><code class="language-Order、OrderInfo、OrderData```，他们名称相同">- 结合上下文简化名称``` Javapublic class Order {  private String orderNum;  private String orderCreateTime;  //...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如 Order类，在该上下文中，没必要给每个成员变量重复添加 order 这个前缀单词，直接命名为 createTime、num。因为我们可以借助 Order 这个上下文来获取信息。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Order order = new Order();order.getCreateTime();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>名称易读、可搜索</li></ul><p>可读指的是不要使用一些生僻字，难以发音的单词。可搜索是便于利用 IED 的自动补全和搜索功能，能根据我们的命名规范快速定位想要找的类或者方法等。</p><ul><li>可读</li></ul><p>&amp;emsp;&amp;emsp;名称读不出来，在讨论的时候就好像是一个沙雕。哎，那个「treeNewBeeAxibaKula」类是什么作用？听到这样的名字尴尬癌都犯了。使用一些生僻字，犹如「王大妈的裹脚布，又长又臭」，没有两年脑血栓写不出这样的垃圾代码。</p><ul><li>可搜索</li></ul><p>&amp;emsp;&amp;emsp;IED 很智能，当我们输入 「Hash」的时候，会列举出所有 Hash 相关的类。命名的时候最好符合项目命名习惯，列表数据查询大家使用 listXXX，你就不要用 queryXXX，统一命名规范，很重要。</p><ul><li>包命名</li></ul><p>&amp;emsp;&amp;emsp;<strong>包名</strong>统一使用<strong>小写，点分隔符</strong>之间有且仅有一个自然语义的英文单词或者多个单词自然连接到一块（如 springframework，deepspace 不需要使用任何分割）。包名的构成可以分为以下几四部分【前缀】 【发起者名】【项目名】【模块名】。</p><blockquote><p>以下表格授权于「Java 填坑笔记」</p></blockquote><p>常见的前缀可以分为以下几种：</p><table><thead><tr><th>前缀名</th><th>例</th><th>含义</th></tr></thead><tbody><tr><td>indi（或onem ）</td><td>indi.发起者名.项目名.模块名.……</td><td>个体项目，指个人发起，但非自己独自完成的项目，可公开或私有项目，copyright主要属于发起者。</td></tr><tr><td>pers</td><td>pers.个人名.项目名.模块名.……</td><td>个人项目，指个人发起，独自完成，可分享的项目，copyright主要属于个人</td></tr><tr><td>priv</td><td>priv.个人名.项目名.模块名.……</td><td>私有项目，指个人发起，独自完成，非公开的私人使用的项目，copyright属于个人。</td></tr><tr><td>team</td><td>team.团队名.项目名.模块名.……</td><td>团队项目，指由团队发起，并由该团队开发的项目，copyright属于该团队所有</td></tr><tr><td>顶级域名</td><td>com.公司名.项目名.模块名.……</td><td>公司项目，copyright由项目发起的公司所有</td></tr></tbody></table><ul><li>类名</li></ul><p>&amp;emsp;&amp;emsp; <strong>类名使用大驼峰命名形式，</strong> 应该使用<strong>名词或者名词短语</strong>，比如：Customer、Account。避免使用 Manager、Processor 等动词。接口名除了用名词和名词短语以外，还可以使用形容词或形容词短语，如 Cloneable，Callable 等，表示实现该接口的类有某种功能或能力。</p><table><thead><tr><th>属性</th><th>约束</th><th>例</th></tr></thead><tbody><tr><td>抽象类</td><td>Abstract 或者 Base 开头</td><td>BaseUserService</td></tr><tr><td>枚举类</td><td>Enum 作为后缀</td><td>GenderEnum</td></tr><tr><td>工具类</td><td>Utils作为后缀</td><td>StringUtils</td></tr><tr><td>异常类</td><td>Exception结尾</td><td>RuntimeException</td></tr><tr><td>接口实现类</td><td>接口名+ ImpI 或者 前缀接口名 + 接口名</td><td>UserService + UserServiceImpl、IUserService + UserService</td></tr><tr><td>领域模型相关</td><td>/DO/DTO/VO/DAO</td><td>正例：UserDAO 反例：UserDo， UserDao</td></tr><tr><td>设计模式相关类</td><td>Builder，Factory等</td><td>当使用到设计模式时，需要使用对应的设计模式作为后缀，如ThreadFactory</td></tr><tr><td>处理特定功能的</td><td>Handler，Predicate, Validator</td><td>表示处理器，校验器，断言，这些类工厂还有配套的方法名如handle，predicate，validate</td></tr><tr><td>测试类</td><td>Test结尾</td><td>UserServiceTest， 表示用来测试UserService类的</td></tr></tbody></table><ul><li>方法名</li></ul><p>&amp;emsp;&amp;emsp;方法命名一般为动词或动词短语，与参数或参数名共同组成动宾短语，即动词 + 名词。一个好的函数名一般能通过名字直接获知该函数实现什么样的功能。</p><ul><li>布尔返回值的方法</li></ul><p>&amp;emsp;&amp;emsp;注：Prefix-前缀，Suffix-后缀，Alone-单独使用</p><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>Prefix</td><td>is</td><td>对象是否符合期待的状态</td><td>isValid</td></tr><tr><td>Prefix</td><td>can</td><td>对象能否执行所期待的动作</td><td>canRemove</td></tr><tr><td>Prefix</td><td>should</td><td>调用方执行某个命令或方法是好还是不好,应不应该，或者说推荐还是不推荐</td><td>shouldMigrate</td></tr><tr><td>Prefix</td><td>has</td><td>对象是否持有所期待的数据和属性</td><td>hasObservers</td></tr><tr><td>Prefix</td><td>needs</td><td>调用方是否需要执行某个命令或方法</td><td>needsMigrate</td></tr></tbody></table><ul><li>按需执行的方法</li></ul><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>Suffix</td><td>IfNeeded</td><td>需要的时候执行，不需要的时候什么都不做</td><td>drawIfNeeded</td></tr><tr><td>Prefix</td><td>might</td><td>同上</td><td>mightCreate</td></tr><tr><td>Prefix</td><td>try尝试执行，失败时抛出异常或是返回errorcode</td><td>tryCreate</td><td></td></tr><tr><td>Suffix</td><td>OrDefault</td><td>尝试执行，失败时返回默认值</td><td>getOrDefault</td></tr><tr><td>Suffix</td><td>OrElse</td><td>尝试执行、失败时返回实际参数中指定的值getOrElse</td><td></td></tr><tr><td>Prefix</td><td>force</td><td>强制尝试执行。error抛出异常或是返回值</td><td>forceCreate, forceStop</td></tr></tbody></table><ul><li>用来检查的方法</li></ul><table><thead><tr><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>ensure</td><td>检查是否为期待的状态，不是则抛出异常或返回error code</td><td>ensureCapacity</td></tr><tr><td>validate</td><td>检查是否为正确的状态，不是则抛出异常或返回error code</td><td>validateInputs</td></tr></tbody></table><ul><li>异步相关方法</li></ul><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>Prefix</td><td>blocking</td><td>线程阻塞方法</td><td>blockingGetUser</td></tr><tr><td>Suffix</td><td>InBackground</td><td>执行在后台的线程</td><td>doInBackground</td></tr><tr><td>Suffix</td><td>Async</td><td>异步方法</td><td>sendAsync</td></tr><tr><td>Suffix</td><td>Sync</td><td>对应已有异步方法的同步方法</td><td>sendSync</td></tr><tr><td>Prefix or Alone</td><td>schedule</td><td>Job和Task放入队列</td><td>schedule, scheduleJob</td></tr><tr><td>Prefix or Alone</td><td>post</td><td>同上</td><td>postJob</td></tr><tr><td>Prefix or Alone</td><td>execute</td><td>执行异步方法（注：我一般拿这个做同步方法名）</td><td>execute, executeTask</td></tr><tr><td>Prefix or Alone</td><td>start</td><td>同上</td><td>start, startJob</td></tr><tr><td>Prefix or Alone</td><td>cancel</td><td>停止异步方法</td><td>cancel, cancelJob</td></tr><tr><td>Prefix or Alone</td><td>stop</td><td>同上</td><td>stop, stopJob</td></tr></tbody></table><ul><li>回调方法</li></ul><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>Prefix</td><td>on</td><td>事件发生时执行</td><td>onCompleted</td></tr><tr><td>Prefix</td><td>before</td><td>事件发生前执行</td><td>beforeUpdate</td></tr><tr><td>Prefix</td><td>pre</td><td>同上</td><td>preUpdate</td></tr><tr><td>Prefix</td><td>will</td><td>同上</td><td>willUpdate</td></tr><tr><td>Prefix</td><td>after</td><td>事件发生后执行</td><td>afterUpdate</td></tr><tr><td>Prefix</td><td>post</td><td>同上</td><td>postUpdate</td></tr><tr><td>Prefix</td><td>did</td><td>同上</td><td>didUpdate</td></tr><tr><td>Prefix</td><td>should</td><td>确认事件是否可以发生时执行</td><td>shouldUpdate</td></tr></tbody></table><ul><li>操作对象生命周期的方法</li></ul><table><thead><tr><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>initialize</td><td>初始化。也可作为延迟初始化使用</td><td>initialize</td></tr><tr><td>pause</td><td>暂停</td><td>onPause ，pause</td></tr><tr><td>stop</td><td>停止</td><td>onStop，stop</td></tr><tr><td>abandon</td><td>销毁的替代</td><td>abandon</td></tr><tr><td>destroy</td><td>同上</td><td>destroy</td></tr><tr><td>dispose</td><td>同上</td><td>dispose</td></tr></tbody></table><ul><li>与集合操作相关的方法</li></ul><table><thead><tr><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>contains</td><td>是否持有与指定对象相同的对象</td><td>contains</td></tr><tr><td>add</td><td>添加</td><td>addJob</td></tr><tr><td>append</td><td>添加</td><td>appendJob</td></tr><tr><td>insert</td><td>插入到下标n</td><td>insertJob</td></tr><tr><td>put</td><td>添加与key对应的元素</td><td>putJob</td></tr><tr><td>remove</td><td>移除元素</td><td>removeJob</td></tr><tr><td>enqueue</td><td>添加到队列的最末位</td><td>enqueueJob</td></tr><tr><td>dequeue</td><td>从队列中头部取出并移除</td><td>dequeueJob</td></tr><tr><td>push</td><td>添加到栈头</td><td>pushJob</td></tr><tr><td>pop</td><td>从栈头取出并移除</td><td>popJob</td></tr><tr><td>peek</td><td>从栈头取出但不移除</td><td>peekJob</td></tr><tr><td>find</td><td>寻找符合条件的某物</td><td>findById</td></tr></tbody></table><ul><li>与数据相关的方法</li></ul><table><thead><tr><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>create</td><td>新创建</td><td>createAccount</td></tr><tr><td>new</td><td>新创建</td><td>newAccount</td></tr><tr><td>from</td><td>从既有的某物新建，或是从其他的数据新建</td><td>fromConfig</td></tr><tr><td>to</td><td>转换</td><td>toString</td></tr><tr><td>update</td><td>更新既有某物</td><td>updateAccount</td></tr><tr><td>load</td><td>读取</td><td>loadAccount</td></tr><tr><td>fetch</td><td>远程读取</td><td>fetchAccount</td></tr><tr><td>delete</td><td>删除</td><td>deleteAccount</td></tr><tr><td>remove</td><td>删除</td><td>removeAccount</td></tr><tr><td>save</td><td>保存</td><td>saveAccount</td></tr><tr><td>store</td><td>保存</td><td>storeAccount</td></tr><tr><td>commit</td><td>保存</td><td>commitChange</td></tr><tr><td>apply</td><td>保存或应用</td><td>applyChange</td></tr><tr><td>clear</td><td>清除数据或是恢复到初始状态</td><td>clearAll</td></tr><tr><td>reset</td><td>清除数据或是恢复到初始状态</td><td>resetAll</td></tr></tbody></table><ul><li>成对出现的动词</li></ul><table><thead><tr><th align="left">单词</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">get获取</td><td align="left">set 设置</td></tr><tr><td align="left">add 增加</td><td align="left">remove 删除</td></tr><tr><td align="left">create 创建</td><td align="left">destory 移除</td></tr><tr><td align="left">start 启动</td><td align="left">stop 停止</td></tr><tr><td align="left">open 打开</td><td align="left">close 关闭</td></tr><tr><td align="left">read 读取</td><td align="left">write 写入</td></tr><tr><td align="left">load 载入</td><td align="left">save 保存</td></tr><tr><td align="left">create 创建</td><td align="left">destroy 销毁</td></tr><tr><td align="left">begin 开始</td><td align="left">end 结束</td></tr><tr><td align="left">backup 备份</td><td align="left">restore 恢复</td></tr><tr><td align="left">import 导入</td><td align="left">export 导出</td></tr><tr><td align="left">split 分割</td><td align="left">merge 合并</td></tr><tr><td align="left">inject 注入</td><td align="left">extract 提取</td></tr><tr><td align="left">attach 附着</td><td align="left">detach 脱离</td></tr><tr><td align="left">bind 绑定</td><td align="left">separate 分离</td></tr><tr><td align="left">view 查看</td><td align="left">browse 浏览</td></tr><tr><td align="left">edit 编辑</td><td align="left">modify 修改</td></tr><tr><td align="left">select 选取</td><td align="left">mark 标记</td></tr><tr><td align="left">copy 复制</td><td align="left">paste 粘贴</td></tr><tr><td align="left">undo 撤销</td><td align="left">redo 重做</td></tr><tr><td align="left">insert 插入</td><td align="left">delete 移除</td></tr><tr><td align="left">add 加入</td><td align="left">append 添加</td></tr><tr><td align="left">clean 清理</td><td align="left">clear 清除</td></tr><tr><td align="left">index 索引sort 排序</td><td align="left"></td></tr><tr><td align="left">find 查找</td><td align="left">search 搜索</td></tr><tr><td align="left">increase 增加</td><td align="left">decrease 减少</td></tr><tr><td align="left">play 播放</td><td align="left">pause 暂停</td></tr><tr><td align="left">launch 启动</td><td align="left">run 运行</td></tr><tr><td align="left">compile 编译</td><td align="left">execute 执行</td></tr><tr><td align="left">debug 调试</td><td align="left">trace 跟踪</td></tr><tr><td align="left">observe 观察</td><td align="left">listen 监听</td></tr><tr><td align="left">build 构建</td><td align="left">publish 发布</td></tr><tr><td align="left">input 输入</td><td align="left">output 输出</td></tr><tr><td align="left">encode 编码</td><td align="left">decode 解码</td></tr><tr><td align="left">encrypt 加密</td><td align="left">decrypt 解密</td></tr><tr><td align="left">compress 压缩</td><td align="left">decompress 解压缩</td></tr><tr><td align="left">pack 打包</td><td align="left">unpack 解包</td></tr><tr><td align="left">parse 解析</td><td align="left">emit 生成</td></tr><tr><td align="left">connect 连接</td><td align="left">disconnect 断开</td></tr><tr><td align="left">send 发送</td><td align="left">receive 接收</td></tr><tr><td align="left">download 下载</td><td align="left">upload 上传</td></tr><tr><td align="left">refresh 刷新</td><td align="left">synchronize 同步</td></tr><tr><td align="left">update 更新</td><td align="left">revert 复原</td></tr><tr><td align="left">lock 锁定</td><td align="left">unlock 解锁</td></tr><tr><td align="left">check out 签出</td><td align="left">check in 签入</td></tr><tr><td align="left">submit 提交</td><td align="left">commit 交付</td></tr><tr><td align="left">push 推</td><td align="left">pull 拉</td></tr><tr><td align="left">expand 展开</td><td align="left">collapse 折叠</td></tr><tr><td align="left">begin 起始</td><td align="left">end 结束</td></tr><tr><td align="left">start 开始</td><td align="left">finish 完成</td></tr><tr><td align="left">enter 进入</td><td align="left">exit 退出</td></tr><tr><td align="left">abort 放弃</td><td align="left">quit 离开</td></tr><tr><td align="left">obsolete 废弃</td><td align="left">depreciate 废旧</td></tr><tr><td align="left">collect 收集</td><td align="left">aggregate 聚集</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>藏语手写字母与PyQt的碰撞，基于PyTorch框架LeNet-5网络的图形化藏文手写字母识别系统So Easy</title>
      <link href="/2022/01/28/cang-yu-shou-xie-zi-mu-yu-pyqt-de-peng-zhuang-ji-yu-pytorch-kuang-jia-lenet-5-wang-luo-de-tu-xing-hua-cang-wen-shou-xie-zi-mu-shi-bie-xi-tong-so-easy/"/>
      <url>/2022/01/28/cang-yu-shou-xie-zi-mu-yu-pyqt-de-peng-zhuang-ji-yu-pytorch-kuang-jia-lenet-5-wang-luo-de-tu-xing-hua-cang-wen-shou-xie-zi-mu-shi-bie-xi-tong-so-easy/</url>
      
        <content type="html"><![CDATA[<h4 id="藏语手写字母与PyQt的碰撞，基于PyTorch框架LeNet-5网络的图形化藏文手写字母识别系统So-Easy"><a href="#藏语手写字母与PyQt的碰撞，基于PyTorch框架LeNet-5网络的图形化藏文手写字母识别系统So-Easy" class="headerlink" title="藏语手写字母与PyQt的碰撞，基于PyTorch框架LeNet-5网络的图形化藏文手写字母识别系统So Easy"></a>藏语手写字母与PyQt的碰撞，基于PyTorch框架LeNet-5网络的图形化藏文手写字母识别系统So Easy</h4><h5 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h5><p>&amp;ensp;&amp;ensp;今天我通过PyTorch框架，使用LeNet-5网络实现手写藏文字母的识别系统。为了能够更好友好利用，通过PyQt分别实现了上传图片和在线绘制的应用软件，在藏语字母数据集上训练分类器可以看作是图像识别的“Hello world”，感兴趣的朋友可以一起来聊聊呀！<br>准备数据：<br>&amp;ensp;&amp;ensp;本次数据集是本人最近两年每次回家过春节期间在家收集的手写藏文字母数据。包含67864张手写藏文字母图像:其中55000张用于训练，12864张用于测试。图像是灰度的，28x28像素的，并且居中的，以减少预处理和加快运行。<br><img src="https://s3.bmp.ovh/imgs/2022/01/1ffee1905380446c.jpg" alt="图1 手写藏文字母数据集"><br>&amp;ensp;由于手写藏文字母数据集图片尺寸是 28x28 单通道的，而LeNet-5 网络输入 Input 图片尺寸是 32x32，因此使用 Transforms.Resize 将输入图片尺寸调整为 32x32。</p><h5 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换:"></a>数据转换:</h5><p>&amp;ensp; &amp;ensp;原始图像分别放到train和test文件夹中，注意默认格式为PNG，若是JPG要修改代码，而且图像要按照标签存放。</p><h5 id="设置环境："><a href="#设置环境：" class="headerlink" title="设置环境："></a>设置环境：</h5><ul><li>Python==3.7.3；</li><li>Tensorflow==1.14.0；</li><li>Pytorch==1.8.0+cpu;</li><li>OpenCv==3.4.2;</li><li>PIL==8.0.1;</li><li>Transformers==2.5.1;</li><li>PyQt5==5.15.4</li></ul><h5 id="构建网络"><a href="#构建网络" class="headerlink" title="构建网络"></a>构建网络</h5><p>&amp;ensp;&amp;ensp; 这里要解释一下Pytorch 手写藏文字母数据集标准化为什么是transforms.Normalize((0.1307,), (0.3081,))？标准化（Normalization）是神经网络对数据的一种经常性操作。标准化处理指的是：样本减去它的均值，再除以它的标准差，最终样本将呈现均值为0方差为1的数据分布。<br>&amp;ensp;&amp;ensp;神经网络模型偏爱标准化数据，原因是均值为0方差为1的数据在sigmoid、tanh经过激活函数后求导得到的导数很大，反之原始数据不仅分布不均（噪声大）而且数值通常都很大（本例中数值范围是0~255），激活函数后求导得到的导数则接近与0，这也被称为梯度消失。前文已经分析，神经网络是根据函数对权值求导的导数来调整权值，导数越大，调整幅度越大，越快逼近目标函数，反之，导数越小，调整幅度越小，所以说，数据的标准化有利于加快神经网络的训练。<br>&amp;ensp;&amp;ensp;除此之外，还需要保持train_set、val_set和test_set标准化系数的一致性。标准化系数就是计算要用到的均值和标准差，在本例中是((0.1307,), (0.3081,))，均值是0.1307，标准差是0.3081，这些系数都是数据集提供方计算好的数据。不同数据集就有不同的标准化系数，例如([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])就是ImageNet dataset的标准化系数（RGB三个通道对应三组系数），当需要将Imagenet预训练的参数迁移到另一神经网络时，被迁移的神经网络就需要使用Imagenet的系数，否则预训练不仅无法起到应有的作用甚至还会帮倒忙，例如，我们想要用神经网络来识别夜空中的星星，因为黑色是夜空的主旋律，从像素上看黑色就是数据集的均值，标准化操作时，所有图像会减去均值（黑色），如此Imagenet预训练的神经网络很难识别出这些数据是夜空图像！</p><h5 id="训练步骤"><a href="#训练步骤" class="headerlink" title="训练步骤"></a>训练步骤</h5><ul><li>第一步：加载数据，并做出一定的预先处理dataSet.py：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># -*- coding: utf-8 -*-# @Author  : Shajiu# @FileName: dataSet.py# @Time    : 2022/1/27 15:11import torchfrom torchvision import datasets, transforms"""使用LeNet-5网络结构创建藏文数据识别分类器"""pipline_train = transforms.Compose([    #随机旋转图片    transforms.RandomHorizontalFlip(),    #将图片尺寸resize到32x32    transforms.Resize((32,32)),    #将图片转化为Tensor格式    transforms.ToTensor(),    #正则化(当模型出现过拟合的情况时，用来降低模型的复杂度)    transforms.Normalize((0.1307,),(0.3081,))])pipline_test = transforms.Compose([    #将图片尺寸resize到32x32    transforms.Resize((32,32)),    transforms.ToTensor(),    transforms.Normalize((0.1307,),(0.3081,))])#下载/读取数据集train_set = datasets.MNIST(root="./data", train=True, download=True, transform=pipline_train)test_set = datasets.MNIST(root="./data", train=False, download=True, transform=pipline_test)#加载数据集trainloader = torch.utils.data.DataLoader(train_set, batch_size=64, shuffle=True)testloader = torch.utils.data.DataLoader(test_set, batch_size=32, shuffle=False)print("数据加载完毕")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第二步：搭建LeNet-5神经网络结构，并定义前向传播的过程lenet_5.py：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import torch.nn as nnimport torch.nn.functional as Fimport torchimport torch.optim as optimclass LeNet(nn.Module):    def __init__(self):        super(LeNet, self).__init__()        self.conv1 = nn.Conv2d(1, 6, 5)        self.relu = nn.ReLU()        self.maxpool1 = nn.MaxPool2d(2, 2)        self.conv2 = nn.Conv2d(6, 16, 5)        self.maxpool2 = nn.MaxPool2d(2, 2)        self.fc1 = nn.Linear(16 * 5 * 5, 120)        self.fc2 = nn.Linear(120, 84)        self.fc3 = nn.Linear(84, 10)    def forward(self, x):        x = self.conv1(x)        x = self.relu(x)        x = self.maxpool1(x)        x = self.conv2(x)        x = self.maxpool2(x)        x = x.view(-1, 16 * 5 * 5)        x = F.relu(self.fc1(x))        x = F.relu(self.fc2(x))        x = self.fc3(x)        output = F.log_softmax(x, dim=1)        return output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第三步：将定义好的网络结构搭载到GPU/CPU，并定义优化器：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"> #创建模型，部署gpudevice = torch.device("cuda" if torch.cuda.is_available() else "cpu")model = LeNet().to(device) #定义优化器optimizer = optim.Adam(model.parameters(), lr=0.001)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第四步：定义训练过程：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># -*- coding: utf-8 -*-# @Author  : Shajiu# @FileName: train.py# @Time    : 2022/1/27 15:20import torch.nn.functional as Fimport torch"""定义训练过程"""def train_runner(model, device, trainloader, optimizer, epoch,Loss,Accuracy):    # 训练模型, 启用 BatchNormalization 和 Dropout, 将BatchNormalization和Dropout置为True    model.train()    total = 0    correct = 0.0    # enumerate迭代已加载的数据集,同时获取数据和数据下标    for i, data in enumerate(trainloader, 0):        inputs, labels = data        # 把模型部署到device上        inputs, labels = inputs.to(device), labels.to(device)        # 初始化梯度        optimizer.zero_grad()        # 保存训练结果        outputs = model(inputs)        # 计算损失和        # 多分类情况通常使用cross_entropy(交叉熵损失函数), 而对于二分类问题, 通常使用sigmod        loss = F.cross_entropy(outputs, labels)        # 获取最大概率的预测结果        # dim=1表示返回每一行的最大值对应的列下标        predict = outputs.argmax(dim=1)        total += labels.size(0)        correct += (predict == labels).sum().item()        # 反向传播        loss.backward()        # 更新参数        optimizer.step()        if i % 1000 == 0:            # loss.item()表示当前loss的数值            print(                "Train Epoch{} \t Loss: {:.6f}, accuracy: {:.6f}%".format(epoch, loss.item(), 100 * (correct / total)))            Loss.append(loss.item())            Accuracy.append(correct / total)    print(model)    torch.save(model, './models/model-mnist.pth')  # 保存模型    return loss.item(), correct / total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第五步：定义测试过程：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"> # -*- coding: utf-8 -*- # @Author  : Shajiu # @FileName: inference.py # @Time    : 2022/1/27 15:21import torchimport torch.nn.functional as Fdef test_runner(device, testloader):    #模型验证, 必须要写, 否则只要有输入数据, 即使不训练, 它也会改变权值    #因为调用eval()将不启用 BatchNormalization 和 Dropout, BatchNormalization和Dropout置为False    model=torch.load("./models/model-mnist.pth")    model.eval()    #统计模型正确率, 设置初始值    correct = 0.0    test_loss = 0.0    total = 0    #torch.no_grad将不会计算梯度, 也不会进行反向传播    with torch.no_grad():        for data, label in testloader:            data, label = data.to(device), label.to(device)            output = model(data)            test_loss += F.cross_entropy(output, label).item()            predict = output.argmax(dim=1)            #计算正确数量            total += label.size(0)            correct += (predict == label).sum().item()        #计算损失值        print("test_avarage_loss: {:.6f}, accuracy: {:.6f}%".format(test_loss/total, 100*(correct/total)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第六步：运行：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"> # -*- coding: utf-8 -*- # @Author  : Shajiu # @FileName: main.py # @Time    : 2022/1/27 15:22from matplotlib import pyplot as pltimport timefrom train import train_runnerimport lenet_5import dataSetfrom inference import test_runnerdef main():    epoch = 100000    Loss = []    Accuracy = []    for epoch in range(1, epoch + 1):        print("开始时间", time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time())))        # 训练部分调用函数        loss, acc = train_runner(lenet_5.model, lenet_5.device, dataSet.trainloader, lenet_5.optimizer, epoch, Loss,                                 Accuracy)        Loss.append(loss)        Accuracy.append(acc)        # 测试部分调用函数        test_runner(lenet_5.device, dataSet.testloader)        print("结束时间: ", time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time())), '\n')    print('训练结束啦!')    plt.subplot(2, 1, 1)    plt.plot(Loss)    plt.title('Loss')    plt.show()    plt.subplot(2, 1, 2)    plt.plot(Accuracy)    plt.title('Accuracy')    plt.show()if __name__ == '__main__':    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第七步：保存模型：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">torch.save(model, './models/model-mnist.pth')  # 保存模型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>第八步：手写图片的测试：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># -*- coding: utf-8 -*-# @Author  : Shajiu# @FileName: discern.py# @Time    : 2022/1/27 16:07import cv2import torch.nn.functional as Fimport torchfrom matplotlib import pyplot as pltfrom torchvision import transformsdef discern(file):    '''    测试入口: 手写图片的测试    '''    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')    model = torch.load('./models/model-mnist.pth')  # 加载模型    model = model.to(device)    model.eval()  # 把模型转为test模式    # 读取要预测的图片    img = cv2.imread(file)    # img = cv2.imread(file)    img = cv2.resize(img, dsize=(32, 32), interpolation=cv2.INTER_NEAREST)    plt.imshow(img, cmap="gray")  # 显示图片    plt.axis('off')  # 不显示坐标轴    # 导入图片，图片扩展后为[1，1，32，32]    trans = transforms.Compose(        [            transforms.ToTensor(),            transforms.Normalize((0.1307,), (0.3081,))        ])    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # 图片转为灰度图，因为mnist数据集都是灰度图    img = trans(img)    img = img.to(device)    img = img.unsqueeze(0)  # 图片扩展多一维,因为输入到保存的模型中是4维的[batch_size,通道,长，宽]，而普通图片只有三维，[通道,长，宽]    # 预测    output = model(img)    prob = F.softmax(output, dim=1)  # prob是10个分类的概率    print("概率：", prob)    value, predicted = torch.max(output.data, 1)    predict = output.argmax(dim=1)    print("预测类别：", predict.item())    return predict.item()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h5><p>&amp;ensp;&amp;ensp;经历 400 次 epoch 的 loss 和 accuracy 曲线如下：<br><img src="https://s3.bmp.ovh/imgs/2022/01/ac09b849ae52c0e9.png" alt="图2 epoch=400时的Loss值"><br><img src="https://s3.bmp.ovh/imgs/2022/01/ac498d19b95e361c.png" alt="图3 epoch=400时的Accuracy值"><br>&amp;ensp;&amp;ensp;最终在 12864张测试样本上，Average_loss降到了 0.00018，accuracy 达到了 98.12%。可以说 LeNet-5 的效果非常好！</p><h5 id="PyQt5识别效果"><a href="#PyQt5识别效果" class="headerlink" title="PyQt5识别效果"></a>PyQt5识别效果</h5><p>&amp;ensp;&amp;ensp;首先配置PyQt中QT Designer，创建两个Button对象，分别为“选择图片”、“识别结果”，然后创建两个Label对象，分别用于显示相机原图和显示检测后图像。<br>创建多线程检测机制，分别给两个Button设置不同的槽函数，分别用于触发相机拍照和调用检测函数。运行uploadApp.py可得到如下结果。<br><img src="https://s3.bmp.ovh/imgs/2022/01/a7322898495917b4.jpg" alt="图4 上传图像界面"><br><img src="https://s3.bmp.ovh/imgs/2022/01/70f6dbffca4a13c4.jpg" alt="图5 上传图像界面识别"><br><img src="https://s3.bmp.ovh/imgs/2022/01/a08e0e44c398e06e.jpg" alt="图6 手写文字界面"><br>&amp;ensp;&amp;ensp;全文的代码都是可以顺利运行的，建议大家自己跑一边。源码、数据、模型都公开，若你想获取源码，请点击<a href="https://github.com/Shajiu/ComputerVision/tree/main/TibetanNumberRecognition">这里</a>即可。</p>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib绘制靓丽的LOGO</title>
      <link href="/2022/01/15/matplotlib-hui-zhi-jing-li-de-logo/"/>
      <url>/2022/01/15/matplotlib-hui-zhi-jing-li-de-logo/</url>
      
        <content type="html"><![CDATA[<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>&amp;emsp;Matplotlib 作为一个基础必备且功能强大的绘图库，很多其他功能库的开发也有不少是建立在Matplotlib的基础上的。今天为了记录学习Matplotlib，本人通过Matplotlib绘制属于自己的定制版LOGO，严格来说，这并不完全是一个 LOGO，可以称之为 “文字轮廓图”，这个效果我觉得还是蛮不错的。下面咱们来看下这个是怎么做出来的。</p><h4 id="绘制过程"><a href="#绘制过程" class="headerlink" title="绘制过程"></a>绘制过程</h4><p>这个图的绘制，只需要用到基础的 numpy 和 matplotlib 库，首先引入这些 Python 库：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npimport matplotlib.pyplot as pltfrom matplotlib.patheffects import Stroke<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于需要显示中文，这里还需要设置下字体的显示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SimHei"</span><span class="token punctuation">]</span>  <span class="token comment"># 设置字体、解决 matplotlib 显示中文问题</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 正常显示负号 解决 matplotlib 显示中文问题、解决保存图像是负号 '-' 显示为方块的问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="完整代码如下所示："><a href="#完整代码如下所示：" class="headerlink" title="完整代码如下所示："></a>完整代码如下所示：</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># -*- coding: utf-8 -*-# @Author  : Shajiu# @FileName: logo.py# @Time    : 2022/1/15 16:13import numpy as npimport matplotlib.pyplot as pltfrom matplotlib.patheffects import Strokedef logo():    # 解决 matplotlib 显示中文问题    plt.rcParams["font.sans-serif"] = ["SimHei"]  # 设置字体    # 解决保存图像是负号 '-' 显示为方块的问题    plt.rcParams["axes.unicode_minus"] = False  # 正常显示负号    fig = plt.figure(figsize=(15, 4))    ax = fig.add_axes([0, 0, 1, 1], frameon=False)    ax.set_xticks([])    ax.set_yticks([])    family = "SimHei"    size = 80    cmap = plt.cm.Blues_r    text = "源码上门取算法码上到"    for x in np.linspace(0, 1, 20):        lw, color = x * 225, cmap(1 - x)        t = ax.text(            0.5,            0.45,            text,            size=size,            color="none",            weight="bold",            va="center",            ha="center",            family=family,            zorder=-lw,        )        t.set_path_effects([Stroke(linewidth=lw + 1, foreground="black")])        t = ax.text(            0.5,            0.45,            text,            size=size,            color='black',  # 中心文字颜色            weight="bold",            va="center",            ha="center",            family=family,            zorder=-lw + 1,        )        t.set_path_effects([Stroke(linewidth=lw, foreground=color)])    t = ax.text(        1.0,        0.01,        "https://shajiu.github.io",        va="bottom",        ha="right",        size=4,        color="white",        family=family,        alpha=0.50,    )    # plt.savefig("./01Practice/Matplotlib/text-outline.pdf")    # plt.savefig("text-outline.pdf")    plt.savefig("text-outline.png")    plt.show()if __name__ == '__main__':    logo()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最后的效果如下所示："><a href="#最后的效果如下所示：" class="headerlink" title="最后的效果如下所示："></a>最后的效果如下所示：</h4><p><img src="https://s3.bmp.ovh/imgs/2022/01/c002de4369b1e371.png" alt="绘制LOGO的效果图"><br>怎么样，效果还不错吧，自己动手来试试吧。</p>]]></content>
      
      
      <categories>
          
          <category> 工具收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码出最快的美女素描图像</title>
      <link href="/2022/01/15/ma-chu-zui-kuai-de-mei-nu-su-miao-tu-xiang/"/>
      <url>/2022/01/15/ma-chu-zui-kuai-de-mei-nu-su-miao-tu-xiang/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>通过Python将一张精致的美女图像转换为素描图像。</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>实现需要用到的工具是 OpenCV 库，用 OpenCV 库里面的图片处理接口就能满足需求。</li><li>安装OpenCV库<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">pip install opencv-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>我从手机相册中找了一张照片，发送到微信，然后保存到电脑上。<br><img src="https://s3.bmp.ovh/imgs/2022/01/710e2d7be4f6668a.jpg" alt="原始图像"><br>具体步骤包含：读取图像、转换成灰度图片、反转灰度图像、创建铅笔图，保存并显示。<br>具体如下代码：</li></ul><h4 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import cv2def sketch():    img = cv2.imread("E:\\ING_19032_02876.jpg")    # 转换成灰度图片    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    # 反转灰度图像    inverted_image = 255 - gray_img    # 创建铅笔图    blurred = cv2.GaussianBlur(inverted_image, (21, 21), 0)    inverted_blurred = 255 - blurred    pencil_sketch = cv2.divide(gray_img, inverted_blurred, scale=256.0)    # 保存    cv2.imwrite("E:\\ING_19032_02877.jpg",pencil_sketch)    # 显示    cv2.imshow("original", img)    cv2.imshow("pencil", pencil_sketch)    cv2.waitKey(0)if __name__ == '__main__':    sketch()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://s3.bmp.ovh/imgs/2022/01/7992d934fa4990d5.jpg" alt="第一种方式结果展示"></p><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式:"></a>第二种方式:</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># -*- coding: utf-8 -*-# @Author  : Shajiu# @FileName: sketch.py# @Time    : 2021/8/14 11:34from PIL import Imageimport numpy as npdef sketch():    img = np.asarray(Image.open(r"E:\\ING_19032_02876.jpg").convert('L')).astype('float')    depth = 10.  # (0-100)    grad = np.gradient(img)  # 取图像灰度的梯度值    grad_x, grad_y = grad  # 分别取横纵图像梯度值    grad_x = grad_x * depth / 100.    grad_y = grad_y * depth / 100.    A = np.sqrt(grad_x ** 2 + grad_y ** 2 + 1.)    uni_x = grad_x / A    uni_y = grad_y / A    uni_z = 1. / A    vec_el = np.pi / 2.2  # 光源的俯视角度，弧度值    vec_az = np.pi / 4.  # 光源的方位角度，弧度值    dx = np.cos(vec_el) * np.cos(vec_az)  # 光源对x 轴的影响    dy = np.cos(vec_el) * np.sin(vec_az)  # 光源对y 轴的影响    dz = np.sin(vec_el)  # 光源对z 轴的影响    b = 255 * (dx * uni_x + dy * uni_y + dz * uni_z)  # 光源归一化    b = b.clip(0, 255)    im = Image.fromarray(b.astype('uint8'))  # 重构图像    im.save(r"E:\result111.jpg")    print("保存成功,请查看")if __name__ == '__main__':    sketch()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/fc5ccb2a29afbcec.jpg" alt="第二种方式结果展示"></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一行代码便可共享文件</title>
      <link href="/2022/01/15/yi-xing-dai-ma-bian-ke-gong-xiang-wen-jian/"/>
      <url>/2022/01/15/yi-xing-dai-ma-bian-ke-gong-xiang-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>&amp;emsp;我们想要在局域网内共享一些文件，一般的实现方式是配置共享目录或者搭建一个文件服务器。但是无论哪种方式都是挺麻烦的。</p><h5 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h5><ul><li>首先，电脑安装Python,并且设置了全局变量</li><li>接下来，请您在您要共享的文件路径下进入cmd,具体如下图所示：<br><img src="https://s3.bmp.ovh/imgs/2022/01/10c2afa4bc837c89.jpg" alt="待共享的文件路径下进入CMD"></li><li>然后输入如下命令：<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m http<span class="token punctuation">.</span>server <span class="token number">9090</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="https://s3.bmp.ovh/imgs/2022/01/7392ec07f882cba9.jpg" alt="通过命令式共享文件"></li><li>访问方式，你可以在本地浏览器中输入如下地址即可访问，当在别的PC端访问时，将localhost转换为提供共享文件的IP地址即可。<pre class="line-numbers language-python" data-language="python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">9090</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://s3.bmp.ovh/imgs/2022/01/24070be3ec568ce4.jpg" alt="访问所共享的文件目录"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序开发人员缺乏经验的7种表现</title>
      <link href="/2022/01/09/cheng-xu-kai-fa-ren-yuan-que-fa-jing-yan-de-7-chong-biao-xian/"/>
      <url>/2022/01/09/cheng-xu-kai-fa-ren-yuan-que-fa-jing-yan-de-7-chong-biao-xian/</url>
      
        <content type="html"><![CDATA[<p>&amp;emsp;软件行业的工作经验和你从事这个行业的工作年限直接相关。这句话在某种程度上是对的，但是你从事这项工作的年限，并不一定代表你获得了相同年限的工作经验，正如一句话所说：“我们以为我们是工作了十年，其实却只有一年的工作经验，只不过又重复用了九年”。<br>&amp;emsp;有一些人虽然工作了很多年，但工作表现就像刚入行的新人。他们几乎不学习软件开发的基础知识 。除了最初几年有所成长，后期一直停滞不前，而且他们不明白为什么。<br>&amp;emsp;与此同时，我也曾与一些只有几年工作经验的开发人员共事，他们表现出惊人的增长潜力。他们工作态度端正，并且明白如何避免不称职的行为。<br>&amp;emsp;根据开发人员的某些习惯，可以非常明显地分辨出谁更专业，谁更业余。让我们深入剖析下业余程序开发人员的 7 种表现，每个程序开发人员都应该引以为戒，这些错误会阻碍我们的职业发展。<br><strong>一次性提交大量代码</strong><br>&amp;emsp;回忆下，你是否碰到过一次性提交大量代码的人，你都不想给他做代码评审。是的，不专业的开发人员就会这样做。他们会在一次代码评审请求中包含多个模块的修改，而且会催促你优先评审他们的代码。是啊，能不急吗，排到后边，还需要解决代码冲突的问题。这个问题在很多高级开发工程师中也存在，他们在功能开发期间不做任何提交，只有在功能彻底完工后，才会提交所有修改，于是代码评审中的任何意见都会引起大量的修改。<br>&amp;emsp;当我碰到这种代码评审请求时，我首先做的是要求提交者按功能模块将其拆分成多个小的请求。我只会对 issues（任务管理系统）中的第一个功能需求评审，然后将其转回提交者。如果我有时间，我会和提交者连线进行代码实时评审。</p><ul><li>你能做什么：<br>进行小的代码提交。一个好的做法是：每个工作日都进行代码提交。<br>不要提交没有编译或者会导致构建失败的代码。</li></ul><p><strong>代码写的很烂</strong><br>&amp;emsp;缺乏经验的开发人员写不出漂亮的代码，他们写出的代码会很混乱，而且分布在代码库的各个部分。<br>&amp;emsp;当你尝试阅读这类代码时，会感觉自己身处一座迷宫之中。你会逐渐忘记自己是从什么地方开始的，要寻找什么以及这段代码完成了什么功能。<br>&amp;emsp;有经验的开发人员知道代码如何设计。除非要开发的功能显而易见，首先需要在纸上写出你对需求的理解并画出流程图（简化版的规格需求说明书），在脑海里对这段代码进行一个完整的构思。除非你彻底弄清楚了如何修改，否则不要开始代码编写。<br>&amp;emsp;如果你不遵守以上的规则，当你回顾自己完成的代码时会非常痛苦。以后如果需要修正问题或者增加功能，也会变得非常棘手。</p><ul><li>你能做什么：<br>编写代码之前，对你要实现的功能有个清晰的了解。为了清楚地理解需求，你需要尽量多问问题。<br>让你的代码简洁而优雅。其他团队成员可以读懂代码并理解它打算做什么。</li></ul><p><strong>同时开展多项工作</strong><br>&amp;emsp;缺乏经验的开发人员不知道什么时候开始一项任务、如何推进、什么时候结束。他们试图并行处理多项任务。他们不知道如何将一项大任务分解为小的模块，从而减轻实现的难度。<br>&amp;emsp;当他们收到一项任务时，并不是第一时间和上级确认需求，而是立刻就开始编程，而且在做任务期间，也不会和上级就任务进度进行沟通。只有当任务完成时，他们才会向你反馈。到那个时候，你只能祈祷他们完成的功能就是你想要的。<br>&amp;emsp;缺乏经验的开发人员的另一个表现是同时推进多项任务，他们会同时处理多项事情，如：实现多个没有太大联系的功能点、解决生产环境问题、协助其他同事工作等。<br>&amp;emsp;最终，从他们那里得不到有效的产出。虽然他们的态度和出发点是好的，但对整个团队造成的后果是灾难性的，浪费了很多的时间，导致团队得日夜赶工。</p><ul><li>你能做什么：<br>专注完成小的任务。将收到的任务分解为小块，明确需求的优先级，一小块一小块地完成。<br>领取一项任务，完成后再开始新的任务。</li></ul><p><strong>性格傲慢</strong><br>&amp;emsp;对于缺乏经验的开发人员，傲慢是非常致命的。傲慢会导致他们不能接受别人的批评和建议。当你对他们的代码或者陈述给出意见时，他们会认为你是在质疑他们的能力。<br>&amp;emsp;许多新人由于无知，都会表现出这种傲慢。刚走出校门的他们充满自信，并没有意识到他们在学校学到的东西离社会要求还有很大差距。这些人中的聪明者会很快调整自己，以归零的心态，努力学习并适应公司文化。<br>&amp;emsp;其实不只是新人——一些有几年工作经验的开发人员也会表现出这种傲慢，一部分原因是其满足于个人获得的专业成就，另一部分可能的原因是其缺乏和优秀的人共事的机会，有点坐井观天。<br>&amp;emsp;此外，傲慢的行为也从另一方面证明这样的开发人员确实缺乏经验。这样的行为会对他们的职业发展造成很多阻碍，因为没有人喜欢和一个傲慢的人共事。当成长变慢时，他们不会从自身找原因，而是更多的归罪于别人。</p><ul><li>你能做什么：<br>在前行的路上保持谦卑。礼貌地对待别人会让你在软件开发职业生涯中走得更远。<br>尊重每一个人。出现分歧后，在你发表意见时，不管对方是什么身份，都要尊重对方。</li></ul><p><strong>不能从之前的错误中学到经验</strong><br>&amp;emsp;我一直认为，对于软件开发人员，反馈机制是一个很有效的工具。来自他人的反馈，会让我们明白自己的短板是什么以及如何去改进。一个聪明的开发人员明白如何借助他人反馈来促进自己的成长。<br>&amp;emsp;根据一个开发人员对建设性意见的反应，你可以判断出他是否缺乏经验。缺乏经验的开发人员不接受任何建设性的建议，甚至代码评审中的评论，他都会认为是对他个人的一种攻击。<br>&amp;emsp;很多年前，我有一个同事给我写了很长的一封邮件，教我如何来评审代码，他对我给他代码的评论感到愤怒。他的主要观点是我不应该关注编码标准，因为他知道如何编码，我应该只关注代码能否满足功能需求。<br>&amp;emsp;如果一个开发人员因为别人对他代码给出的评论，而感觉被冒犯，只能表明他不具有真正的开发经验。他抱着做一天和尚撞一天钟的态度工作，却感慨没有遇到赏识自己的伯乐。</p><ul><li>你能做什么：<br>对每个反馈保持积极的态度。对于每个反馈，你可以选择是接受还是拒绝，但拒绝之前要保持心平气和的态度。<br>从错误中学习。没有人能永远正确，保持终身学习才能让自己持续强大。</li></ul><p><strong>工作时间处理私人事务</strong><br>&amp;emsp;日常工作中，总是发现团队里的一些成员在工作时间处理私人事务，如：看社交媒体，浏览购物网站，玩游戏。<br>&amp;emsp;我之前还有个团队成员，上班时间炒股。因为他需要不时地关注股票的 K 线走势，造成个人的产出质量不高。其他同事对他很有意见，因为他们需要花费更多的时间去赶工期。<br>&amp;emsp;当开发经理和这个开发人员谈话之后，他改变了一段时间，但是很快就故态复萌。最终，公司只能把他开除了。<br>&amp;emsp;工作时间处理私人事务，这是违反商业道德，并且表现了你的不专业。我们需要对工作敬业，毕竟我们要靠它谋生。</p><ul><li>你能做什么：<br>工作时间尽量不要处理私人事务。当你需要离开几个小时去处理个人事情时，请向你的管理者请假。<br>使用休息时间浏览你的社交媒体。如果必须要点外卖或炒股，请利用午休时间。</li></ul><p><strong>盲目追逐技术潮流</strong><br>&amp;emsp;开发人员缺乏经验的另一个表现是面对技术潮流的态度。你会发现他们总是在谈论技术潮流，当有一个新的潮流出现时，他们会立刻丢弃原来的潮流，投入新的怀抱。<br>&amp;emsp;缺乏经验的开发人员总是在学习教程。毫无疑问，教程是很有用的学习工具，但是，不进行任何实践而只是按照教程一步步操作无疑是浪费时间。它会让你虚幻地觉得自己好像都掌握了，但是知识是否掌握了，需要通过真实的项目进行检验。<br>&amp;emsp;开发人员很少会用热门技术或者从教程中学到的知识来实现新的东西，他们学习热门技术或者教程很多是为了满足自己的虚荣心，或者担心自己会错过什么。</p><ul><li>你能做什么：<br>花费时间和精力学习那些能在工作中或者实际项目中真正用到的技术。<br>从教程中学习并及时练习，相对于新手教程，自己实现一个功能能学到更多的东西。</li></ul><p><strong>总结</strong><br>&amp;emsp;缺乏经验的开发人员会因为自己的效率低下进而降低整个团队的效率。他对待自己工作的错误态度，会让其在职业发展中错失很多机会。<br>&amp;emsp;了解并避免这种错误的态度和工作方式，是聪明人的做法。如果你不幸染上了这些坏习惯，随着时间的推移，你会越来越难以摆脱。<br>&amp;emsp;谢谢你阅读这篇文章。希望你能避开这些陷阱，早日获得职业上的成功。若你想查看英文版本的请你点击<a href="https://levelup.gitconnected.com/top-7-signs-of-an-inexperienced-programmer-5fc3f04658f3">这里</a>即可查看。</p>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python制作一种轻量级的录屏工具</title>
      <link href="/2022/01/08/yong-python-zhi-zuo-yi-chong-qing-liang-ji-de-lu-pin-gong-ju/"/>
      <url>/2022/01/08/yong-python-zhi-zuo-yi-chong-qing-liang-ji-de-lu-pin-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>&amp;emsp; 屏幕录制的意思是监控显示器中的特定区域，并将其以视频的形式存储。要实现屏幕录制就要使用屏幕录像技术，这就要借助一些屏幕录像软件。但严格意义上来说，屏幕录制除了包含录制电脑桌面操作，还包括了另一个重要来源，即录制计算机视窗环境中的视频内容，譬如录制播放器视频、录制QQ视频、录制游戏视频等等。因为录屏软件动不动就开始收费，所以我们经常更换录屏软件。今天我利用闲暇之余，感觉可以用万能的Python来解决此烦恼。</p><h3 id="主题思想"><a href="#主题思想" class="headerlink" title="主题思想"></a>主题思想</h3><p>&amp;emsp; 通过上网搜寻了相关知识，录制视频基本上都用的图像处理库 PIL 的 ImageGrab 模块。此模块可以用于将当前屏幕的内容或者剪贴板上的内容拷贝到 PIL 图像内存。既然这个模块可以获取当前屏幕上的内容，那么我一直不间断地获取，然后把这些获取的内容拼起来，那不就是视频了吗？</p><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>&amp;emsp;首先，使用 PIL 模块中的 ImageGrab 不断获得当前屏幕，其次，利用 opencv 写入视频流。以下直接上代码即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Author  : Shajiu</span><span class="token comment"># @FileName: video_record.py</span><span class="token comment"># @Time    : 2021/12/27 16:06</span><span class="token keyword">import</span> time<span class="token punctuation">,</span> threading<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageGrab<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> cv2<span class="token punctuation">.</span>cv2 <span class="token keyword">import</span> VideoCapture<span class="token punctuation">,</span> VideoWriter_fourcc<span class="token punctuation">,</span> VideoWriter<span class="token punctuation">,</span> cvtColor<span class="token punctuation">,</span> CAP_PROP_FPS<span class="token punctuation">,</span> CAP_PROP_FRAME_COUNT<span class="token punctuation">,</span> \    CAP_PROP_FRAME_WIDTH<span class="token punctuation">,</span> CAP_PROP_FRAME_HEIGHT<span class="token punctuation">,</span> COLOR_RGB2BGR<span class="token keyword">from</span> pynput <span class="token keyword">import</span> keyboard<span class="token comment"># 录入视频</span><span class="token keyword">def</span> <span class="token function">video_record</span><span class="token punctuation">(</span>sttime<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> name    <span class="token comment"># 当前的时间（当文件名）</span>    name <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H-%M-%S'</span><span class="token punctuation">)</span>    <span class="token comment"># 获取当前屏幕</span>    screen <span class="token operator">=</span> ImageGrab<span class="token punctuation">.</span>grab<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 获取当前屏幕的大小</span>    width<span class="token punctuation">,</span> high <span class="token operator">=</span> screen<span class="token punctuation">.</span>size    <span class="token comment"># MPEG-4编码,文件后缀可为.avi .asf .mov等</span>    fourcc <span class="token operator">=</span> VideoWriter_fourcc<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span>    <span class="token comment"># （文件名，编码器，帧率，视频宽高）</span>    video <span class="token operator">=</span> VideoWriter<span class="token punctuation">(</span><span class="token string">'%s.avi'</span> <span class="token operator">%</span> name<span class="token punctuation">,</span> fourcc<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>sttime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'秒后开始录制----'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>sttime<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始录制!'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> start_time    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"录制结束！"</span><span class="token punctuation">)</span>            <span class="token keyword">global</span> final_time            final_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 释放</span>            video<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token comment"># 图片为RGB模式</span>        im <span class="token operator">=</span> ImageGrab<span class="token punctuation">.</span>grab<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 转为opencv的BGR模式</span>        imm <span class="token operator">=</span> cvtColor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">,</span> COLOR_RGB2BGR<span class="token punctuation">)</span>        <span class="token comment"># 写入</span>        video<span class="token punctuation">.</span>write<span class="token punctuation">(</span>imm<span class="token punctuation">)</span><span class="token comment"># 监听按键</span><span class="token keyword">def</span> <span class="token function">on_press</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> flag    <span class="token keyword">if</span> key <span class="token operator">==</span> keyboard<span class="token punctuation">.</span>Key<span class="token punctuation">.</span>esc<span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># 返回False，键盘监听结束！</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment"># 视频信息</span><span class="token keyword">def</span> <span class="token function">video_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 记得文件名加格式不要错！</span>    video <span class="token operator">=</span> VideoCapture<span class="token punctuation">(</span><span class="token string">'%s.avi'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>    fps <span class="token operator">=</span> video<span class="token punctuation">.</span>get<span class="token punctuation">(</span>CAP_PROP_FPS<span class="token punctuation">)</span>    count <span class="token operator">=</span> video<span class="token punctuation">.</span>get<span class="token punctuation">(</span>CAP_PROP_FRAME_COUNT<span class="token punctuation">)</span>    size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span>get<span class="token punctuation">(</span>CAP_PROP_FRAME_WIDTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span>get<span class="token punctuation">(</span>CAP_PROP_FRAME_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'帧率=%.1f'</span> <span class="token operator">%</span> fps<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'帧数=%.1f'</span> <span class="token operator">%</span> count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'分辨率'</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'视频时间=%.3f秒'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">/</span> fps<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'录制时间=%.3f秒'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>final_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'推荐帧率=%.2f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fps <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">/</span> fps<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>final_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"工具使用：输入1-9秒必须为整数的延迟时间，点击esc按钮结束录屏"</span><span class="token punctuation">)</span>    sstime <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入多少秒后开始录制(1-9秒)必须为整数："</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>    th <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>video_record<span class="token punctuation">,</span> args<span class="token operator">=</span>sstime<span class="token punctuation">)</span>    th<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> keyboard<span class="token punctuation">.</span>Listener<span class="token punctuation">(</span>on_press<span class="token operator">=</span>on_press<span class="token punctuation">)</span> <span class="token keyword">as</span> listener<span class="token punctuation">:</span>        listener<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 等待视频释放过后</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    video_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&amp;emsp;以上代码包含：监听键盘事件、主体控制、视频信息、效果等。<br><video src="https://www.youtube.com/watch?v=0cdCEDvR5lU" controls="controls" width="500" height="300">您的浏览器不支持播放该视频！</video><br>&amp;emsp;若你想获取源码，请点击<a href="https://github.com/Shajiu/PythonObject/blob/main/tool/video_record.py">这里</a>即可获取相应的源码。</p>]]></content>
      
      
      <categories>
          
          <category> 工具方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何AI制造程序猿与仙女舞蹈？</title>
      <link href="/2022/01/05/ru-he-ai-zhi-zao-cheng-xu-yuan-yu-xian-nu-wu-dao/"/>
      <url>/2022/01/05/ru-he-ai-zhi-zao-cheng-xu-yuan-yu-xian-nu-wu-dao/</url>
      
        <content type="html"><![CDATA[<ul><li><p>引言<br>&amp;emsp;&amp;emsp;前不久写了一份个人的年终总结，题为<a href="https://mp.weixin.qq.com/s/4RzLcdPRYKEVWk3hdw3cCQ">《中国特色、民族风格、青年气派的年终总结》</a>，全文共有10240个字符。获得了不少人的关注，同时也得到了很多朋友们的建设性的意见。有的人说制作词云更需要突出核心词；有的人说写的篇幅过长可以试着拆分为专题报告；也有人说趁着之前研究AI的宝刀未老可以做的更炫酷些…。为了反馈各位同仁，本人专门制作了一套完全基于AI的全自动化的精简多模态总结。本项目为了能够满足更多人的需求，整个项目可拆分为多个模块功能单独实现。通过本项目，你可以学到：通过自定义添加词汇进行分词、制作炫酷的词云、语音合成、视频切分、语义分割等知识，具体内容如下所示：通过NLP和CV技术将Text、Speech、Vision集成为一个富含民族特色的仙女舞者，让文字跳起藏族舞。<br><img src="https://s3.bmp.ovh/imgs/2022/01/493676aab77c1790.jpg" alt="中国特色、民族风格、青年气派的年终总结词云图"><br>废话少说，直接上代码</p></li><li><p>第一步：下载并安装依赖包。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    libs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"lxml"</span><span class="token punctuation">,</span> <span class="token string">"requests"</span><span class="token punctuation">,</span> <span class="token string">"pandas"</span><span class="token punctuation">,</span> <span class="token string">"numpy"</span><span class="token punctuation">,</span> <span class="token string">"you-get"</span><span class="token punctuation">,</span> <span class="token string">"opencv-python"</span><span class="token punctuation">,</span> <span class="token string">"pandas"</span><span class="token punctuation">,</span> <span class="token string">"fake_useragent"</span><span class="token punctuation">,</span> <span class="token string">"matplotlib"</span><span class="token punctuation">,</span>            <span class="token string">"moviepy"</span><span class="token punctuation">,</span> <span class="token string">"pixellib"</span><span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> lib <span class="token keyword">in</span> libs<span class="token punctuation">:</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"pip install -i https://pypi.doubanio.com/simple/ </span><span class="token interpolation"><span class="token punctuation">{</span>lib<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>lib <span class="token operator">+</span> <span class="token string">"下载完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>lib <span class="token operator">+</span> <span class="token string">"下载失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二步：下载视频。可以使用you-get来可以下载视频，先安装 pip install you-get；找到想要下载视频的链接，使用如下指令，便可下载。</p><pre class="line-numbers language-none"><code class="language-none">you-get -i https://www.bilibili.com/video/BV11C4y1h7nX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 本次为了凸显出民族特色，为此获取了一段藏族舞蹈。</p></li><li><p>第三步：视频分割。使用Opencv，将视频分割为图片，本项目截取了800张图片用于制作词云，通过Opencv中的VideoCaptrue类对视频进行读取操作以及调用摄像头，具体代码如下：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def splitFrames():    videoFileName = "E:\word_cloud_bject\PrimaryVideoDisplay\\wudao.mp4"    cap = cv2.VideoCapture(videoFileName)  # 打开视频文件    num = 1    while True:        # success 表示是否成功，data是当前帧的图像数据；.read读取一帧图像，移动到下一帧        success, img = cap.read()        if not success:            break        img_new = img        # cv2.flip(img,0,img_new)        dst_im = cv2.flip(img_new, 1)  # 原型：cv2.flip(src, flipCode[, dst]) → dst  flipCode表示对称轴 0：x轴  1：y轴.  -1：both        img_new = cv2.transpose(dst_im)        width = int(img_new.shape[1] * 0.5)        height = int(img_new.shape[0] * 0.5)        dim = (width, height)        img_new = cv2.resize(img_new, dim, interpolation=cv2.INTER_AREA)        cv2.imwrite('E:\word_cloud_bject\ImageSegmentation\\' + str(num) + ".jpg", img_new)        print(num)        num = num + 1    cap.release()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/12180a1192e8235e.jpg" alt="从视频中按照帧切分出来的图"></p></li><li><p>第四步：语义分割。使用mask_rcnn_coco进行图像分割，创建一个分割的应用。由于本文篇幅限制，直接使用已有功能，没有详细介绍基于Mask_rcnn_coco的训练和推理的相关理论原理，若需要整个代码，请您关注微信公众号并与本作者联系，具体代码如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">body_segmentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    segment_image <span class="token operator">=</span> semantic_segmentation<span class="token punctuation">(</span><span class="token punctuation">)</span>    segment_image<span class="token punctuation">.</span>load_pascalvoc_model<span class="token punctuation">(</span>        <span class="token string">"E:\Python_Projects\ObjectDetection\models\deeplabv3_xception_tf_dim_ordering_tf_kernels.h5"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> path<span class="token punctuation">,</span> dir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">r"E:\word_cloud_bject\ImageSegmentation"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>            segment_image<span class="token punctuation">.</span>segmentAsPascalvoc<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             output_image_name<span class="token operator">=</span><span class="token string">"E:\word_cloud_bject\SplitImage\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/01/0d660779604fa24b.jpg" alt="从彩色图像中通过语义分割技术分割的图像"></p><ul><li><p>第五步：将分割的图像转换为二值化图。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">segmentation_to_binaryzation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    功能：将分割图像转换为二值化图    :return:    '''</span>    <span class="token keyword">for</span> path<span class="token punctuation">,</span> dir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">r"E:\word_cloud_bject\SplitImage"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>            img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>            Grayimg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>            ret<span class="token punctuation">,</span> thresh <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>Grayimg<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"E:\word_cloud_bject\Binaryzation\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> thresh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/e5017674312999a8.jpg" alt="将分割图像转为二值图像"></p></li><li><p>第六步：单通道(二值化图像)的图像转换为三通道图像(RGB)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">one_to_three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    功能：单通道图像转换为三通道的图像    :return:    '''</span>    <span class="token keyword">for</span> path<span class="token punctuation">,</span> dir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">r"E:\word_cloud_bject\Binaryzation"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>            img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 彩色图像转换为灰度图像（3通道变为1通道）</span>            gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>            <span class="token comment"># 最大图像灰度值减去原图像，即可得到反转的图像</span>            dst <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> gray            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"E:\word_cloud_bject\OneToThree\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/90a283d498a13584.jpg" alt="将二值图转换为三通道图像"></p></li><li><p>第七步：黑白转黑红。为了能够生成的词云图像更加美观，使用红色作为字体颜色。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">black_to_red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    功能： 黑色转换为红色    :return:    '''</span>    <span class="token keyword">for</span> path<span class="token punctuation">,</span> dir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">r"E:\word_cloud_bject\OneToThree"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>            src <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            src_RGB <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>src<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2RGB<span class="token punctuation">)</span>            src_RGB<span class="token punctuation">[</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>src_RGB <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"E:\word_cloud_bject\BlackToRed\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> src_RGB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/4c36661881c328e3.jpg" alt="将三通道图中的黑色值转为红色的图像"></p></li><li><p>第八步：图像旋转，将图像顺时针旋转90度。原先从视频中分割出的仙女莫名奇妙的“躺下”了，具体原因未看，有感兴趣的可以了解cv2.resize中相关函数的参数设置。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    功能：将图像向右旋转了90度    :return:    '''</span>    <span class="token keyword">for</span> path<span class="token punctuation">,</span> dir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">r"E:\word_cloud_bject\BlackToRed"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>            img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>            img90 <span class="token operator">=</span> np<span class="token punctuation">.</span>rot90<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 对图像矩阵顺时针旋转90度</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"E:\word_cloud_bject\Rotate\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> img90<span class="token punctuation">)</span>  <span class="token comment"># 保存旋转后的图像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/4da94e176d42ebd5.jpg" alt="将图像向右旋转90度"></p></li><li><p>第九步：生成词云图。首先，对语料进行分词；其次，向Jieba分词库中添加自定义词组；然后，获取停用词(非核心词)；最后循环并加载分割的每张图为模板,生成对应的词云图。整个实现过程在代码中有详细解释。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">word_cloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    功能: 生成词云    :return:    '''</span>    jieba<span class="token punctuation">.</span>load_userdict<span class="token punctuation">(</span><span class="token string">"E:\word_cloud_bject\Corpus\\barrages.txt"</span><span class="token punctuation">)</span>    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\word_cloud_bject\Corpus\\cn_stopwords.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        con <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        stop_words <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> con<span class="token punctuation">:</span>            stop_words<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:\word_cloud_bject\Corpus\\barrages.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_data <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[\u4e00-\u9fa5]+'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    new_data <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span>    <span class="token comment"># 文本分词</span>    seg_list_exact <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>new_data<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> seg_list_exact<span class="token punctuation">:</span>        <span class="token comment"># 设置停用词并去除单个词</span>        <span class="token keyword">if</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>            result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    space_list <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result_list<span class="token punctuation">)</span>  <span class="token comment"># 空格链接词语</span>    <span class="token keyword">for</span> path<span class="token punctuation">,</span> dir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">r"E:\word_cloud_bject\Rotate"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>            backgroud <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1400</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2200</span><span class="token punctuation">,</span>                           background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>                           mode<span class="token operator">=</span><span class="token string">'RGB'</span><span class="token punctuation">,</span>                           mask<span class="token operator">=</span>backgroud<span class="token punctuation">,</span>  <span class="token comment"># 添加蒙版，生成指定形状的词云，并且词云图的颜色可从蒙版里提取</span>                           max_words<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>                           stopwords<span class="token operator">=</span>STOPWORDS<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'老年人'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 内置的屏蔽词,并添加自己设置的词语</span>                           font_path<span class="token operator">=</span><span class="token string">'C:\Windows\Fonts\STZHONGS.ttf'</span><span class="token punctuation">,</span>                           max_font_size<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span>                           relative_scaling<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">,</span>  <span class="token comment"># 设置字体大小与词频的关联程度为0.4</span>                           random_state<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>                           scale<span class="token operator">=</span><span class="token number">2</span>                           <span class="token punctuation">)</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span>space_list<span class="token punctuation">)</span>            image_color <span class="token operator">=</span> ImageColorGenerator<span class="token punctuation">(</span>backgroud<span class="token punctuation">)</span>  <span class="token comment"># 设置生成词云的颜色，如去掉这两行则字体为默认颜色</span>            wc<span class="token punctuation">.</span>recolor<span class="token punctuation">(</span>color_func<span class="token operator">=</span>image_color<span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc<span class="token punctuation">)</span>  <span class="token comment"># 显示词云</span>            plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭x,y轴</span>            <span class="token comment"># plt.show()                     # 显示</span>            wc<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"E:\word_cloud_bject\WordCloud\\"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span>  <span class="token comment"># 保存词云图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/a1d042c9e20f26c2.jpg" alt="通过加载模板制作对应的词云图"></p></li><li><p>第十步：合成图像转视频。如官方文档所介绍的，moviepy是一个用于视频编辑的Python库，可以切割、拼接、标题插入，视频合成（即非线性编辑），进行视频处理和自定义效果的设计。总的来说，可以非常方便且自由地处理视频、图片等文件，具体上代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">photofunia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    通过多张图片(jpg)合成视频(mp4)    :return:    '''</span>    <span class="token comment"># 输出视频的保存路径</span>    video_dir <span class="token operator">=</span> <span class="token string">"E:\word_cloud_bject\GeneratedVideo\\Result1.mp4"</span>    <span class="token comment"># 帧率</span>    fps <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment"># 图片尺寸</span>    img_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">)</span>    fourcc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">)</span>  <span class="token comment"># opencv3.0 mp4会有警告但可以播放</span>    videoWriter <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span>video_dir<span class="token punctuation">,</span> fourcc<span class="token punctuation">,</span> fps<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>    <span class="token keyword">for</span> path<span class="token punctuation">,</span> dir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">r"E:\word_cloud_bject\WordCloud"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>            frame <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>            frame <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>  <span class="token comment"># 生成视频   图片尺寸和设定尺寸相同</span>            videoWriter<span class="token punctuation">.</span>write<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>  <span class="token comment"># 写进视频里</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'======== 按照视频顺序第</span><span class="token interpolation"><span class="token punctuation">{</span>file_name<span class="token punctuation">}</span></span><span class="token string">张图片合进视频 ========'</span></span><span class="token punctuation">)</span>        videoWriter<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放资源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第十一步：提取音频。为了能够跟原先的视频保持一致，从原先的视频中提取音频部分，随后加载到此次编辑的视频中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">movie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    功能: 从视频(mp4)中提取背景音乐    :return:    '''</span>    video <span class="token operator">=</span> VideoFileClip<span class="token punctuation">(</span><span class="token string">'E:\Python_Projects\word_cloud_bject\PrimaryVideoDisplay\\wudao.mp4'</span><span class="token punctuation">)</span>    audio <span class="token operator">=</span> video<span class="token punctuation">.</span>audio    audio<span class="token punctuation">.</span>write_audiofile<span class="token punctuation">(</span><span class="token string">'E:\Python_Projects\word_cloud_bject\MusicalAudioChimer\\test.mp3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第十二步：向视频(mp4)中加载背景音乐(mp3)，上代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_audio_track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    功能：向视频(mp4)中加载背景音乐(mp3)    :return:    '''</span>    <span class="token comment"># 读取词云视频</span>    my_clip <span class="token operator">=</span> mpy<span class="token punctuation">.</span>VideoFileClip<span class="token punctuation">(</span><span class="token string">'E:\Python_Projects\word_cloud_bject\GeneratedVideo\\Result1.mp4'</span><span class="token punctuation">)</span>    <span class="token comment"># 截取背景音乐</span>    audio_background <span class="token operator">=</span> mpy<span class="token punctuation">.</span>AudioFileClip<span class="token punctuation">(</span><span class="token string">'E:\Python_Projects\word_cloud_bject\MusicalAudioChimer\\test.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subclip<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>                                                                                                                     <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token comment"># audio_background.write_audiofile('E:\Python_Projects\word_cloud_bject\MusicalAudioChimer\\test.mp3')</span>    <span class="token comment"># 视频中插入音频</span>    final_clip <span class="token operator">=</span> my_clip<span class="token punctuation">.</span>set_audio<span class="token punctuation">(</span>audio_background<span class="token punctuation">)</span>    <span class="token comment"># 保存为最终的视频   动听的音乐！漂亮小姐姐词云跳舞视频！</span>    final_clip<span class="token punctuation">.</span>write_videofile<span class="token punctuation">(</span><span class="token string">'E:\Python_Projects\word_cloud_bject\GeneratedVideo\\final_video.mp4'</span><span class="token punctuation">,</span> audio_codec<span class="token operator">=</span><span class="token string">'aac'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最终的结果如下所示：<br><video src="https://youtu.be/0uhi3UJFDXY" controls="controls" width="500" height="300">您的浏览器不支持播放该视频！</video><br>若您需要此项目完整版源码和对应的数据，您可以点击<a href="https://github.com/Shajiu/PythonObject/tree/main/tool/word_cloud_bject">这里</a>并下载相应的源码和数据。</p></li></ul><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搞定接口性能</title>
      <link href="/2021/12/24/gao-ding-jie-kou-xing-neng/"/>
      <url>/2021/12/24/gao-ding-jie-kou-xing-neng/</url>
      
        <content type="html"><![CDATA[<h4 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h4><p>接口性能优化对于从事后端开发的同学来说，肯定再熟悉不过了，因为它是一个跟开发语言无关的公共问题。该问题说简单也简单，说复杂也复杂。有时候，只需加个索引就能解决问题；有时候，需要做代码重构；有时候，需要增加缓存；有时候，需要引入一些中间件，比如mq；有时候，需要需要分库分表；有时候，需要拆分服务等一系列的操作。导致接口性能问题的原因也是千奇百怪，不同的项目不同的接口，原因可能也不一样。本文总结了一些行之有效的，优化接口性能的办法，给有需要的朋友一个参考。</p><h4 id="2、索引"><a href="#2、索引" class="headerlink" title="2、索引"></a>2、索引</h4><p>接口性能优化大家第一个想到的可能是：<code>优化索引</code>。没错，优化索引的成本是最小的。你通过查看线上日志或者监控报告，查到某个接口用到的某条sql语句耗时比较长。这时你可能会有下面这些疑问：</p><ul><li>①该sql语句加索引了没？</li><li>②加的索引生效了没？</li><li>③mysql选错索引了没？</li></ul><h5 id="2-1-没加索引"><a href="#2-1-没加索引" class="headerlink" title="2.1 没加索引"></a>2.1 没加索引</h5><p>sql语句中<code>where</code>条件的关键字段，或者<code>order by</code>后面的排序字段，忘记了加索引，这个问题在项目中很常见。项目刚开始的时候，由于表中的数据量小，加不加索引sql查询性能差别不大。后来，随着业务的发展，表中数据量越来越多，就不得不加索引了。<br>可以通过命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>jiu<span class="token punctuation">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 能单独查看某张表的索引情况，也可以通过如下命令查看<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>jiu<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>查看整张表的建表语句，里面同样会显示索引情况。通过ALTER TABLE命令可以添加索引：<p></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>jiu<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_name <span class="token punctuation">(</span>dep_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过CREATE INDEX命令添加索引：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>sha<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>com_code<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过这里有一个需要注意的地方是：想通过命令修改索引，是不行的。目前在mysql中如果想要修改索引，只能先删除索引，再重新添加新的。删除索引可以用DROP INDEX命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>jiu<span class="token punctuation">`</span></span> <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用DROP INDEX命令也行：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_name <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>jiu<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-2-索引没生效"><a href="#2-2-索引没生效" class="headerlink" title="2.2  索引没生效"></a>2.2  索引没生效</h5><p>通过上面的命令我们已经能够确认索引是有的，但它生效了没？此时你内心或许会冒出这样一个疑问。那么，如何查看索引有没有生效呢？<br>可以使用explain命令，查看mysql的执行计划，它会显示索引的使用情况。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>jiu<span class="token punctuation">`</span></span> <span class="token keyword">where</span> code<span class="token operator">=</span><span class="token string">'002'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2021/12/085a0fc2c433c52c.jpg" alt="检查索引是否生效"><br>通过这几列可以判断索引使用情况，执行计划包含列的含义如下图所示：<br><img src="https://s2.loli.net/2021/12/27/zCaDTuM5h6A1XYO.jpg" alt="判断索引的使用情况"><br>如果想进一步了解explain的详细用法，可以点击<a href="https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;mid=2247490262&amp;idx=1&amp;sn=a67f610afa984ecca130a54a3be453ab&amp;chksm=c0ebc23ef79c4b2869dea998e413c5cbea6aeeea01ee74efc7c1a5fc228baa7beca215adf3ea&amp;token=751314179&amp;lang=zh_CN&amp;scene=21#wechat_redirect">这里</a>进一步了解。</p><p>sql语句没有走索引，排除没有建索引之外，最大的可能性是索引失效了。<br>索引失效的常见原因如下：<br><img src="https://s2.loli.net/2021/12/27/OFoxLYM21aTjhHP.jpg" alt="索引失效常见的原因"><br>如果不是因为以上原因所导致，则需要按照具体问题具体分析方式进行排查确定。</p><h5 id="2-3-选错索引"><a href="#2-3-选错索引" class="headerlink" title="2.3 选错索引"></a>2.3 选错索引</h5><p>此外，有时我们会遇到一种明明是同一条sql，只有入传不同而已。有的时候走的索引为a，有的时候走的索引为b?<br>没错，有时候mysql会选错索引。必要时可以使用force index来强制查询sql走某个索引。<br>例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ws_shop a<span class="token keyword">where</span> <span class="token keyword">date</span><span class="token punctuation">(</span>create_time<span class="token operator">-</span><span class="token keyword">interval</span> <span class="token number">6</span> <span class="token keyword">hour</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token string">'2016-10-01 06:000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>改写为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ws_shop a <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token keyword">where</span> <span class="token keyword">date</span><span class="token punctuation">(</span>create_time<span class="token operator">-</span><span class="token keyword">interval</span> <span class="token number">6</span> <span class="token keyword">hour</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token string">'2016-10-01 06:00:00'</span><span class="token keyword">sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3、sql优化"><a href="#3、sql优化" class="headerlink" title="3、sql优化"></a>3、sql优化</h4><p>如果优化了索引之后，也没有啥效果，那么接下来试着优化一下sql语句，因为它的改造相对java代码而言要小的多。<br>如下图为优化sql的15个小技巧：<br><img src="https://s2.loli.net/2021/12/27/5hbCqESgdcTJ67B.jpg" alt="15个优化sql的方法"><br>此方法具体可以点击<a href="https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;mid=2247490473&amp;idx=1&amp;sn=ba07d64aa8c89054bd263efd660d3a3f&amp;chksm=c0ebc341f79c4a579a6f41465df0459a696ab8ef0499a5f6fd76269af1064fde0286afdb027d&amp;token=2041133408&amp;lang=zh_CN&amp;scene=21#wechat_redirect">这里</a>进一步了解。</p><h4 id="4、远程调用"><a href="#4、远程调用" class="headerlink" title="4、远程调用"></a>4、远程调用</h4><p>在很多引用场景中，我们需要在某个接口中，调用其他服务的接口。例如如下业务场景：在用户信息查询接口中需要返回：用户名称、性别、等级、头像、积分、成长值等信息。而用户名称、性别、等级、头像在用户服务中，积分在积分服务中，成长值在成长值服务中。为了汇总这些数据统一返回，需要另外提供一个对外接口服务。<br>具体如下实例所示：<br><img src="https://s2.loli.net/2021/12/27/ljLa8qtWsTCYkxJ.jpg" alt="远程调用的实例接口流程图"><br>此调用远程接口总耗时530ms=200ms+150ms+180ms。显然这种串行调用的远程接口性能是非常不好的，调用远程接口总的耗时为所有的远程接口耗时之和。那么有没有解决方法呢？</p><h5 id="4-1-并行调用"><a href="#4-1-并行调用" class="headerlink" title="4.1 并行调用"></a>4.1 并行调用</h5><p>上面说到，既然串行调用多个远程接口性能很差，为什么不改成并行呢？如下图所示：<br><img src="https://s2.loli.net/2021/12/27/nZhCqJReUIPwduF.jpg" alt="接口并行调用的实例图"></p><p>调用远程接口总耗时 200ms = 200ms（即耗时最长的那次远程接口调用）。在java8之前可以通过实现Callable接口，获取线程返回结果。java8以后通过CompleteFuture类实现该功能。我们这里以CompleteFuture为例：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public UserInfo getUserInfo(Long id) throws InterruptedException, ExecutionException {    final UserInfo userInfo = new UserInfo();    CompletableFuture userFuture = CompletableFuture.supplyAsync(() -&gt; {        getRemoteUserAndFill(id, userInfo);        return Boolean.TRUE;    }, executor);    CompletableFuture bonusFuture = CompletableFuture.supplyAsync(() -&gt; {        getRemoteBonusAndFill(id, userInfo);        return Boolean.TRUE;    }, executor);    CompletableFuture growthFuture = CompletableFuture.supplyAsync(() -&gt; {        getRemoteGrowthAndFill(id, userInfo);        return Boolean.TRUE;    }, executor);    CompletableFuture.allOf(userFuture, bonusFuture, growthFuture).join();    userFuture.get();    bonusFuture.get();    growthFuture.get();    return userInfo;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>温馨提醒一下，这两种方式别忘了使用线程池。示例中我用到了executor，表示自定义的线程池，为了防止高并发场景下，出现线程过多的问题。</p></blockquote><h5 id="4-2-数据异构"><a href="#4-2-数据异构" class="headerlink" title="4.2  数据异构"></a>4.2  数据异构</h5><p>上面说到的用户信息查询接口需要调用用户查询接口、积分查询接口和成长值查询接口，然后汇总数据统一返回。那么，我们能不能把数据冗余一下，把用户信息、积分和成长值的数据统一存储到一个地方，比如：redis，存的数据结构就是用户信息查询接口所需要的内容。然后通过用户id，直接从redis中查询数据出来，不就OK了？<br>如果在高并发的场景下，为了提升接口性能，远程接口调用大概率会被去掉，而改成保存冗余数据的数据异构方案。<br><img src="https://s2.loli.net/2021/12/27/4iTCKUbwJj2c79E.jpg" alt="数据异构流程图"><br>但需要注意的是，如果使用了数据异构方案，就可能会出现数据一致性问题。用户信息、积分和成长值有更新的话，大部分情况下，会先更新到数据库，然后同步到redis。但这种跨库的操作，可能会导致两边数据不一致的情况产生。</p><h4 id="5、重复调用"><a href="#5、重复调用" class="headerlink" title="5、重复调用"></a>5、重复调用</h4><pre class="line-numbers language-重复调用```在我们日常工作代码中可以说随处可见，但如果没有控制好，会非常影响接口的性能。不信，咱可以一起康康呀！" data-language="重复调用```在我们日常工作代码中可以说随处可见，但如果没有控制好，会非常影响接口的性能。不信，咱可以一起康康呀！"><code class="language-重复调用```在我们日常工作代码中可以说随处可见，但如果没有控制好，会非常影响接口的性能。不信，咱可以一起康康呀！">##### 5.1 循环查数据库有时候，我们需要从指定的用户集合中，查询出有哪些是在数据库中已经存在的。实现代码可以这样写：``` javapublic List&lt;User&gt; queryUser(List&lt;User&gt; searchList) {    if (CollectionUtils.isEmpty(searchList)) {        return Collections.emptyList();    }    List&lt;User&gt; result = Lists.newArrayList();    searchList.forEach(user -&gt; result.add(userMapper.getUserById(user.getId())));    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果有50个用户，则需要循环50次，去查询数据库。我们都知道，每查询一次数据库，就是一次远程调用。如果查询50次数据库，就有50次远程调用，这是非常耗时的操作。那么，我们如何优化呢？优化的具体代码如下：</p><pre class="line-numbers language-none"><code class="language-none">public List&lt;User&gt; queryUser(List&lt;User&gt; searchList) {    if (CollectionUtils.isEmpty(searchList)) {        return Collections.emptyList();    }    List&lt;Long&gt; ids = searchList.stream().map(User::getId).collect(Collectors.toList());    return userMapper.getUserByIds(ids);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供一个根据用户id集合批量查询用户的接口，只远程调用一次，就能查询出所有的数据。</p><blockquote><p>这里有个需要注意的地方是：id集合的大小要做限制，最好一次不要请求太多的数据。要根据实际情况而定，建议控制每次请求的记录条数在500以内。</p></blockquote><h5 id="5-2-死循环"><a href="#5-2-死循环" class="headerlink" title="5.2 死循环"></a>5.2 死循环</h5><p>有些小伙伴看到这个标题，可能会感到有点意外，死循环也算？代码中不是应该避免死循环吗？为啥还是会产生死循环？有时候死循环是我们自己写的，例如下面这段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do samething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了while(true)的循环调用，这种写法在CAS自旋锁中使用比较多。当满足condition等于true的时候，则自动退出该循环。如果condition条件非常复杂，一旦出现判断不正确，或者少写了一些逻辑判断，就可能在某些场景下出现死循环的问题。出现死循环，大概率是开发人员人为的bug导致的，不过这种情况很容易被测出来。</p><blockquote><p>还有一种隐藏的比较深的死循环，是由于代码写的不太严谨导致的。如果用正常数据，可能测不出问题，但一旦出现异常数据，就会立即出现死循环。</p></blockquote><h5 id="5-3-无限递归"><a href="#5-3-无限递归" class="headerlink" title="5.3  无限递归"></a>5.3  无限递归</h5><p>如果想要打印某个分类的所有父分类，可以使用类似的这样的递归方法实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCategory</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>category <span class="token operator">==</span> <span class="token keyword">null</span>      <span class="token operator">||</span> category<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父分类名称："</span><span class="token operator">+</span> category<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Category</span> parent <span class="token operator">=</span> categoryMapper<span class="token punctuation">.</span><span class="token function">getCategoryById</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printCategory</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常情况下，这段代码是没有问题的。但如果某次有人误操作，把某个分类的parentId指向了它自己，这样就会出现无限递归的情况。导致接口一直不能返回数据，最终会发生堆栈溢出。</p><blockquote><p>建议写递归方法时，设定一个递归的深度，比如：分类最大等级有4级，则深度可以设置为4。然后在递归方法中做判断，如果深度大于4时，则自动返回，这样就能避免无限循环的情况。</p></blockquote><h4 id="6、异步处理"><a href="#6、异步处理" class="headerlink" title="6、异步处理"></a>6、异步处理</h4><p>有时候，我们接口性能优化，需要重新梳理一下业务逻辑，看看是否有设计上不太合理的地方。比如有个用户请求接口中，需要做业务操作，发站内通知，和记录操作日志。为了实现起来比较方便，通常我们会将这些逻辑放在接口中同步执行，势必会对接口性能造成一定的影响。接口内部流程图如下：<br><img src="https://s2.loli.net/2021/12/27/mbGhCFLQ2sRwY3K.png" alt="接口内部流程图"><br>这个接口表面上看起来没有问题，但如果你仔细梳理一下业务逻辑，会发现只有业务操作才是核心逻辑，其他的功能都是非核心逻辑。</p><blockquote><p>在这里有个原则就是：核心逻辑可以同步执行，同步写库。非核心逻辑，可以异步执行，异步写库。</p></blockquote><p>以上实例中，发站内通知和用户操作日志功能，对实时性要求不高，即使晚点写库，用户无非是晚点收到站内通知，或者运营晚点看到用户操作日志，对业务影响不大，所以完全可以异步处理。通常异步主要有两种，<code>多线程</code>和<code>mq</code>。</p><h5 id="6-1-线程池"><a href="#6-1-线程池" class="headerlink" title="6.1  线程池"></a>6.1  线程池</h5><p>使用<code>线程池</code>改造之后，接口逻辑如下所示：<br><img src="https://s2.loli.net/2021/12/27/VrFTkgIz8b6K1ly.png" alt="使用线程池后的接口逻辑图"><br>发站内通知和用户操作日志功能，被提交到了两个单独的线程池中。这样接口中重点关注的是业务操作，把其他的逻辑交给线程异步执行，这样改造之后，让接口性能瞬间提升了。但使用线程池有个小问题就是：如果服务器重启了，或者是需要被执行的功能出现异常了，无法重试，会丢数据。那么这个问题该怎么办呢？</p><h5 id="6-2-mq"><a href="#6-2-mq" class="headerlink" title="6.2  mq"></a>6.2  mq</h5><p>使用mq改造之后，接口逻辑如下：<br><img src="https://s2.loli.net/2021/12/28/LexbwvgnKDptOBT.png" alt="基于mq方式的接口逻辑图"><br>对于发站内通知和用户操作日志功能，在接口中并没有正真实现，它只发送了mq消息到mq服务器。然后有由mq消费者消费信息时，才真正的执行这两个功能。这样改造之后，接口性能同样提升了，因为发送mq消息速度是很快的，我们只需要关注业务操作的代码即可。</p><h4 id="7、避免大事务"><a href="#7、避免大事务" class="headerlink" title="7、避免大事务"></a>7、避免大事务</h4><p>很多小伙伴在使用spring框架开发项目时，为了方便，喜欢使用@Transactional注解提供事务功能。没错，使用@Transactionl注解这种声明式事务的方式提供事务功能，确实能少写很多代码，提升开发效率。但也容易造成大事务，引发其他的问题。下面用一张图看看大事务引发的问题。<br><img src="https://s2.loli.net/2021/12/28/rgmRfsdvno57XuM.png" alt="大事务所引发的问题图例"><br>从图中能够看出，大事务问题可能会造成接口超时，对接口的性能有直接的影响。<br>我们该如何优化大事务呢？</p><ul><li>少用@Transactional注解;</li><li>将查询(select)方法放到事务外;</li><li>事务中避免远程调用;</li><li>事务中避免一次性处理太多数据;</li><li>有些功能可以非事务执行;</li><li>有些功能可以异步处理</li></ul><p>关于大事务问题，若想深度了解请点击<a href="https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;mid=2247490259&amp;idx=1&amp;sn=1dd11c5f49103ca303a61fc82ce406e0&amp;chksm=c0ebc23bf79c4b2db58b28ef752560bd91a1932ceb6713c9b19b821db0f29e1c58275d334076&amp;token=2041133408&amp;lang=zh_CN&amp;scene=21#wechat_redirect">这里</a>进一步了解。</p><h4 id="8、锁粒度"><a href="#8、锁粒度" class="headerlink" title="8、锁粒度"></a>8、锁粒度</h4><p>在某些业务场景中，为了防止多个线程修改某个共享数据，造成数据异常。为了解决并发场景下，多个线程同时修改数据，造成数据不一致的情况。通常情况下，我们会：<code>加锁</code>。但如果锁加得不好，导致锁得粒度太粗，也会非常影响接口性能。</p><h5 id="8-1-synchronized"><a href="#8-1-synchronized" class="headerlink" title="8.1 synchronized"></a>8.1 synchronized</h5><p>在java中提供了<code>synchronized</code>关键字给我们的代码加锁。通常有两种写法，在<code>方法上加锁</code>和<code>在代码块上加锁</code>。<br>先看看如何在方法上加锁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里加锁的目的是为了防止并发的情况，创建了相同的目录，第二次会创建失败，影响业务功能。但这种直接在方法上加锁，锁的粒度有点粗。因为doSave方法中的上传文件和发消息方法，是不需要加锁的，只有创建目录方法，才需要加锁。</p><p>我们都知道文件上传操作是非常耗时的，如果将整个方法加锁，那么需要等到整个方法执行完之后才能释放锁。显然，这会导致该方法的性能很差，变得得不偿失。<br>这时，我们可以改成在代码块上加锁了，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样改造之后，锁的粒度一下子变小了，只有并发创建目录功能才加了锁。而创建目录是一个非常快的操作，即使加锁对接口的性能影响也不大。最重要的是，其他的上传文件和发送消息功能，任然可以并发执行。</p><p>当然，这种做在单机版的服务中，是没有问题的。但现在部署的生产环境，为了保证服务的稳定性，一般情况下，同一个服务会被部署在多个节点中。如果哪天挂了一个节点，其他的节点服务任然可用。多节点部署避免了因为某个节点挂了，导致服务不可用的情况。同时也能分摊整个系统的流量，避免系统压力过大。同时它也带来了新的问题：synchronized只能保证一个节点加锁是有效的，但如果有多个节点如何加锁呢?</p><p>答：这就需要使用：分布式锁了。目前主流的分布式锁包括：<code>redis分布式锁、zookeeper分布式锁 和 数据库分布式锁。</code></p><p>由于zookeeper分布式锁的性能不太好，真实业务场景用的不多，这里先不讲。</p><p>下面聊一下redis分布式锁。</p><h5 id="8-2-redis分布式锁"><a href="#8-2-redis分布式锁" class="headerlink" title="8.2 redis分布式锁"></a>8.2 redis分布式锁</h5><p>在分布式系统中，由于redis分布式锁相对于更简单和高效，成为了分布式锁的首先，被我们用到了很多实际业务场景当中。使用redis分布式锁的伪代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>      <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟之前使用<code>synchronized</code>关键字加锁时一样，这里锁的范围也太大了，换句话说就是锁的粒度太粗，这样会导致整个方法的执行效率很低。其实只有创建目录的时候，才需要加分布式锁，其余代码根本不用加锁。于是，我们需要优化一下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span><span class="token class-name">String</span> fileUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">uploadFile</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">sendMessage</span><span class="token punctuation">(</span>fileUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"PX"</span><span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>      <span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码将加锁的范围缩小了，只有创建目录时才加了锁。这样看似简单的优化之后，接口性能能提升很多。说不定，会有意外的惊喜喔。哈哈哈。</p><p>redis分布式锁虽说好用，但它在使用时，有很多注意的细节，隐藏了很多坑，如果稍不注意很容易踩中。详细内容可以<a href="https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;mid=2247490430&amp;idx=1&amp;sn=a1f42f9a981a8f161941a6472f317b10&amp;chksm=c0ebc396f79c4a801a330917ca700e7d7a6af3a3c2c5a4e11a05770da925de8aa9ed3c277737&amp;token=2041133408&amp;lang=zh_CN&amp;scene=21#wechat_redirect">点击这里</a>进一步了解。</p><h5 id="8-3-数据库分布式锁"><a href="#8-3-数据库分布式锁" class="headerlink" title="8.3  数据库分布式锁"></a>8.3  数据库分布式锁</h5><p>mysql数据库中主要有三种锁：</p><blockquote><p>表锁：加锁快，不会出现死锁。但锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>行锁：加锁慢，会出现死锁。但锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>间隙锁：开销和加锁时间界于表锁和行锁之间。它会出现死锁，锁定粒度界于表锁和行锁之间，并发度一般。</p></blockquote><p>并发度越高，意味着接口性能越好。所以数据库锁的优化方向是：优先使用行锁，其次使用间隙锁，再其次使用表锁。</p><h4 id="9、分页处理"><a href="#9、分页处理" class="headerlink" title="9、分页处理"></a>9、分页处理</h4><p>有时候我会调用某个接口批量查询数据，比如：通过用户id批量查询出用户信息，然后给这些用户送积分。但如果你一次性查询的用户数量太多了，比如一次查询2000个用户的数据。参数中传入了2000个用户的id，远程调用接口，会发现该用户查询接口经常超时。<br>调用代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token function">remoteCallUser</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>众所周知，调用接口从数据库获取数据，是需要经过网络传输的。如果数据量太大，无论是获取数据的速度，还是网络传输受限于带宽，都会导致耗时时间比较长。</p><p>那么，这种情况要如何优化呢？<br>答案：分页处理。将一次获取所有的数据的请求，改成分成多次获取，每次只回去一部分用户的数据，最后进行合并和汇总。其实，处理这个问题 ，要分为两种场景：<code>同步调用</code>和<code>异步调用</code>。</p><h5 id="9-1-同步调用"><a href="#9-1-同步调用" class="headerlink" title="9.1  同步调用"></a>9.1  同步调用</h5><p>如果在job中需要获取2000个用户的信息，它要求只要能正确获取到数据就好，对获取数据的总耗时要求不太高。但对每个远程接口调用的耗时有要求，不能大于500ms，不然会有邮件预警。这时，我们可以同步分页调用批量查询用户信息接口。<br>具体实例代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allIds <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> batchIds<span class="token operator">:</span>allIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token function">remoteCallUser</span><span class="token punctuation">(</span>batchIds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码中我用的<code>google</code>的<code>guava</code>工具中的<code>Lists.partition</code>方法，用它来做分页简直太好用了，不然要巴拉巴拉写一大堆分页的代码。</p><h5 id="9-2-异步调用"><a href="#9-2-异步调用" class="headerlink" title="9.2  异步调用"></a>9.2  异步调用</h5><p>如果是在某个接口中需要获取2000个用户信息，它考虑的就需要更多一些。除了需要考虑远程调用接口的耗时之外，还需要考虑该接口本身的总耗时，也不能超过500ms。这时候用上面的同步分页请求远程接口，肯定是行不通的。那么  只能使用<code>异步调用</code>了。具体代码如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allIds <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>allIds<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>batchIds<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>   <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">remoteCallUser</span><span class="token punctuation">(</span>batchIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>CompletableFuture</code>类，多个线程异步调用远程接口，最后汇总结果统一返回。</p><h4 id="10、加缓存"><a href="#10、加缓存" class="headerlink" title="10、加缓存"></a>10、加缓存</h4><p>解决接口性能问题，<code>加缓存</code>是一个非常高效的方法。但不能为了缓存而缓存，还是要看具体业务场景。毕竟加了缓存，会导致接口的复杂度增加，它会带来数据不一致问题。在有些并发量比较低的场景中，比如用户下单，可以不加缓存。还有些场景，比如在商城首页显示商品分类的地方，假设这里的分类是调用接口获到的数据，但页面暂时没有做静态化。如果查询分类树的接口没有使用缓存，而直接从数据库查询数据，性能会非常差。那么如何使用缓存呢？</p><h5 id="10-1-redis缓存"><a href="#10-1-redis缓存" class="headerlink" title="10.1 redis缓存"></a>10.1 redis缓存</h5><p>通常情况下，我们使用最多的缓存可能是：<code>redis和memcached</code>。但对于java应用来说，绝大多数都是使用redis，所以接下来我们以redis为例。由于在关系型数据库，比如：mysql中，菜单是有上下级关系的。某个四级分类是某个三级分类的子分类，这个三级分类，又是某个二级分类的子分类，而这个二级分类，又是某个一级分类的子分类。这种存储结构决定了，想一次性查出这个分类树，并非是一件非常容易的事情。这就需要使用程序递归查询了，如果分类多的话，这个递归是比较耗时的。所以，如果每次都直接从数据库中查询分类树的数据，是一个非常耗时的操作。这时我们可以使用缓存，大部分情况，接口都直接从缓存中获取数据。操作redis可以使用成熟的框架，比如：<code>jedis和redisson等</code>。用jedis伪代码如下 ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> json <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">CategoryTree</span> categoryTree <span class="token operator">=</span> <span class="token class-name">JsonUtil</span><span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> categoryTree<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">queryCategoryTreeFromDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先从redis中根据某个key查询是否有菜单数据，如果有则转换成对象，直接返回。如果redis中没有查到菜单数据，则再从数据库中查询菜单数据，有则返回。此外，我们还需要有个job每隔一段时间，从数据库中查询菜单数据，更新到redis当中，这样以后每次都能直接从redis中获取菜单的数据，而无需访问数据库了。<br><img src="https://s2.loli.net/2021/12/28/Chm1p2bSgioWcGf.jpg" alt="使用redis进行数据查询"></p><p>这样改造之后，能快速的提升性能。但这样做性能提升不是最佳的，还有其他的方案，我们一起看看下面的内容。</p><h5 id="10-2-二级缓存"><a href="#10-2-二级缓存" class="headerlink" title="10.2 二级缓存"></a>10.2 二级缓存</h5><p>上面的方案是基于redis缓存的，虽说redis访问速度很快。但毕竟是一个远程调用，而且菜单树的数据很多，在网络传输的过程中，是有些耗时的。有没有办法，不经过请求远程，就能直接获取到数据呢？<br>答：使用<code>二级缓存</code>，即基于内存的缓存。除了自己手写的内存缓存之外，目前使用比较多的内存缓存框架有:<code>guava、Ehcache、caffine</code>等。我们在这里以<code>caffeine</code>为例，他是spring官方推荐的。<br>第一步，引入caffeine的相关jar包。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步、 配置CacheManager，开启EnableCaching</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">@Configuration@EnableCachingpublic class CacheConfig {    @Bean    public CacheManager cacheManager(){        CaffeineCacheManager cacheManager = new CaffeineCacheManager();        //Caffeine配置        Caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Object,</span> <span class="token attr-name">Object</span><span class="token punctuation">&gt;</span></span> caffeine = Caffeine.newBuilder()                //最后一次写入后经过固定时间过期                .expireAfterWrite(10, TimeUnit.SECONDS)                //缓存的最大条数                .maximumSize(1000);        cacheManager.setCaffeine(caffeine);        return cacheManager;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，使用Cacheable注解获取数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryService</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"category"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#categoryKey"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">CategoryModel</span> <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token class-name">String</span> categoryKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> json <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>categoryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">CategoryTree</span> categoryTree <span class="token operator">=</span> <span class="token class-name">JsonUtil</span><span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> categoryTree<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">queryCategoryTreeFromDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用categoryService.getCategory()方法时，先从caffine缓存中获取数据，如果能够获取到数据，则直接返回该数据，不进入方法体。如果不能获取到数据，则再从redis中查一次数据。如果查询到了，则返回数据，并且放入caffine中。如果还是没有查到数据，则直接从数据库中获取到数据，然后放到caffine缓存中。<br>具体流程图如下：<br><img src="https://s2.loli.net/2021/12/28/TX54octUhi89gHY.jpg" alt="调用categoryService"><br>该方案的性能更好，但有个缺点就是，如果数据更新了，不能及时刷新缓存。此外，如果有多台服务器节点，可能存在各个节点上数据不一样的情况。由此可见，二级缓存给我们带来性能提升的同时，也带来了数据不一致的问题。使用二级缓存一定要结合实际的业务场景，并非所有的业务场景都适用。但上面我列举的分类场景，是适合使用二级缓存的。因为它属于用户不敏感数据，即使出现了稍微有点数据不一致也没有关系，用户有可能都没有察觉出来。</p><h4 id="11、分库分表"><a href="#11、分库分表" class="headerlink" title="11、分库分表"></a>11、分库分表</h4><p>有时候，接口性能受限的不是别的，而是数据库。当系统发展到一定的阶段，用户并发量大，会有大量的数据库请求，需要占用大量的数据库连接，同时会带来磁盘IO的性能瓶颈问题。此外，随着用户数量越来越多，产生的数据也越来越多，一张表有可能存不下。由于数据量太大，sql语句查询数据时，即使走了索引也会非常耗时。这时该怎么办呢？答：需要做分库分表。如下图所示：<br><img src="https://s2.loli.net/2021/12/28/rj32fi6zlFwx8uY.jpg" alt="分库分表"><br>图中将用户库拆分成了三个库，每个库都包含了四张用户表。如果有用户请求过来的时候，先根据用户id路由到其中一个用户库，然后再定位到某张表。路由的算法挺多的：</p><ul><li>根据id取模，比如：id=7，有4张表，则7%4=3，模为3，路由到用户表3。</li><li>给id指定一个区间范围，比如：id的值是0-10万，则数据存在用户表0，id的值是10-20万，则数据存在用户表1。</li><li>一致性hash算法</li></ul><p>分库分表主要有两个方向：<code>垂直</code>和<code>水平</code>。</p><p>说实话垂直方向（即业务方向）更简单。在水平方向（即数据方向）上，分库和分表的作用，其实是有区别的，不能混为一谈。分库：是为了解决数据库连接资源不足问题，和磁盘IO的性能瓶颈问题。分表：是为了解决单表数据量太大，sql语句查询数据时，即使走了索引也非常耗时问题。此外还可以解决消耗cpu资源问题。分库分表：可以解决 数据库连接资源不足、磁盘IO的性能瓶颈、检索数据耗时 和 消耗cpu资源等问题。如果在有些业务场景中，用户并发量很大，但是需要保存的数据量很少，这时可以只分库，不分表。如果在有些业务场景中，用户并发量不大，但是需要保存的数量很多，这时可以只分表，不分库。如果在有些业务场景中，用户并发量大，并且需要保存的数量也很多时，可以分库分表。关于分库分表更详细的内容，请点击<a href="https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;mid=2247490459&amp;idx=1&amp;sn=1e4296228c00aa4203aab481575ac916&amp;chksm=c0ebc373f79c4a658de7ce7f0d8cf30b1f45adb346c2386321779e7cf85a757a12337d3ae233&amp;token=2041133408&amp;lang=zh_CN&amp;scene=21#wechat_redirect">这里</a>。</p><h4 id="12、辅助功能"><a href="#12、辅助功能" class="headerlink" title="12、辅助功能"></a>12、辅助功能</h4><p>优化接口性能问题，除了上面提到的这些常用方法之外，还需要配合使用一些辅助功能，因为它们真的可以帮我们提升查找问题的效率。</p><h5 id="12-1-开启慢查询日志"><a href="#12-1-开启慢查询日志" class="headerlink" title="12.1 开启慢查询日志"></a>12.1 开启慢查询日志</h5><p>通常情况下，为了定位sql的性能瓶颈，我们需要开启mysql的慢查询日志。把超过指定时间的sql语句，单独记录下来，方面以后分析和定位问题。<br>开启慢查询日志需要重点关注三个参数：</p><ul><li><code>slow_query_log </code> 慢查询开关</li><li><code>slow_query_log_file</code> 慢查询日志存放的路径</li><li><code>long_query_time</code> 超过多少秒才会记录日志</li></ul><p>通过mysql的set命令可以设置：<br>   </p><pre class="line-numbers language-Mysql" data-language="Mysql"><code class="language-Mysql">set global slow_query_log='ON';set global slow_query_log_file='/usr/local/mysql/data/slow.log';set global long_query_time=2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>设置完之后，如果某条sql的执行时间超过了2秒，会被自动记录到slow.log文件中。<p></p><p>当然也可以直接修改配置文件 <code>my.cnf</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysqld]slow_query_log = ONslow_query_log_file = /usr/local/mysql/data/slow.loglong_query_time = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但这种方式需要重启mysql服务。<br>很多公司每天早上都会发一封慢查询日志的邮件，开发人员根据这些信息优化<code>sql</code>。</p><h5 id="12-2-加监控"><a href="#12-2-加监控" class="headerlink" title="12.2 加监控"></a>12.2 加监控</h5><p>为了出现sql问题时，能够让我们及时发现，我们需要对系统做<code>监控</code>。目前业界使用比较多的开源监控系统是：<a href="https://prometheus.io/"><code>Prometheus</code></a>。<br>它提供了 <code>监控</code> 和 <code>预警</code> 的功能。<br>架构图如下：<br><img src="https://s2.loli.net/2021/12/24/qOXwLDNm1ai32kC.jpg" alt="Prometheus架构图"><br>我们可以用它监控如下信息：</p><ul><li>接口响应时间</li><li>调用第三方服务耗时</li><li>慢查询sql耗时</li><li>cpu使用情况</li><li>内存使用情况</li><li>磁盘使用情况</li><li>数据库使用情况</li></ul><p>等等…<br>它的界面大概长这样子：<br><img src="https://s2.loli.net/2021/12/28/j4CcUbAW6euIg9y.jpg" alt="Prometheus架构图界面"><br>可以看到mysql当前qps，活跃线程数，连接数，缓存池的大小等信息。如果发现数据量连接池占用太多，对接口的性能肯定会有影响。这时可能是代码中开启了连接忘了关，或者并发量太大了导致的，需要做进一步排查和系统优化。</p><h5 id="12-3-链路跟踪"><a href="#12-3-链路跟踪" class="headerlink" title="12.3 链路跟踪"></a>12.3 链路跟踪</h5><p>有时候某个接口涉及的逻辑很多，比如：查数据库、查redis、远程调用接口，发mq消息，执行业务代码等等。该接口一次请求的链路很长，如果逐一排查，需要花费大量的时间，这时候，我们已经没法用传统的办法定位问题了。有没有办法解决这问题呢？用分布式链路跟踪系统：<a href="https://skywalking.apache.org/">skywalking</a>。架构图如下：<br><img src="https://s2.loli.net/2021/12/28/TawLnpS7uvrUoCJ.png" alt="skywalking架构图"><br>通过skywalking定位性能问题：<br>在skywalking中可以通过traceId（全局唯一的id），串联一个接口请求的完整链路。可以看到整个接口的耗时，调用的远程服务的耗时，访问数据库或者redis的耗时等等，功能非常强大。之前没有这个功能的时候，为了定位线上接口性能问题，我们还需要在代码中加日志，手动打印出链路中各个环节的耗时情况，然后再逐一排查。如果你用过skywalking排查接口性能问题，不自觉的会爱上它的。</p>]]></content>
      
      
      <categories>
          
          <category> 周总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型部署的主要技术</title>
      <link href="/2021/12/24/mo-xing-bu-shu-de-zhu-yao-ji-zhu/"/>
      <url>/2021/12/24/mo-xing-bu-shu-de-zhu-yao-ji-zhu/</url>
      
        <content type="html"><![CDATA[<p>在已有一个模型之后，怎么在线部署成为服务。</p><h4 id="模型部署的背景"><a href="#模型部署的背景" class="headerlink" title="模型部署的背景"></a>模型部署的背景</h4><p>当我们已经进行了一次模型训练，得到一个心仪的模型后，如果部署成服务，通俗的说，就是让这个模型让需要的人随时能使用。通俗的说，服务或者我们所谓的上线，可以理解为打包了一个商品把它放到货架上，谁有需要就通过特定的暗号来随用随拿。<br><img src="https://s2.loli.net/2021/12/24/t8zRaH1QOUVEpvN.jpg" alt="用户与服务间的关系"><br>例如按需的，用户通过手机、电脑等入口进行提问，服务能马上响应返回一个结果，这就是一个服务。当然了，我们不是前端客户端等，并不需要直接面向他们做成服务，只需要做一个能满足后端调用需求的服务就够了。因此，本文其实要谈的就是怎么把模型打包成一个服务，这个服务在部署后就能够供调用方随时使用了。</p><h4 id="模型的开发和部署流程"><a href="#模型的开发和部署流程" class="headerlink" title="模型的开发和部署流程"></a>模型的开发和部署流程</h4><p>这里一般会涉及两个流程，分别是离线流程和在线流程。</p><p>离线流程中的内容是不需要放在服务里的，主要涉及模型的训练和校验部分，这个过程相信大家都非常熟悉了，除了打包服务之外，别的东西相信大家都懂，具体如下：</p><ul><li>数据收集</li><li>模型训练</li><li>模型验证</li><li>打包服务上线</li></ul><p>另外一个是在线流程，在线其实就是一个提供服务，内部提供模型预测能力的过程，所以主要流程如下：</p><ul><li>模型加载(一般每次启动一次就够)</li><li>模型预测</li></ul><p>当然了，可能还有一些类似预热的操作，这里一切从简，不展开。</p><h4 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h4><ul><li>网络协议</li></ul><p>所谓的网络协议，是指在网络通信过程中请求方和被请求方之间的通信协议，只有按照这份协议来通信才能生效，“协议”这两个字可以说用的非常传神了。算法服务常用的协议，基于rpc协议和基于http协议两种。</p><p>不谈原理，只谈优缺点和技术特点。RPC是一种比较严格但因为严格而传输效率比较高的方案，对于关系非常紧密的两个系统通常用RPC的方式传输，甚至希望达到“函数调用”级别的流畅感，这点相比http是有很大优势的。而HTTP则有更加灵活的方式，主要体现在字段和接口协议上，更灵活的接口协议非常适合大模块之间的通信。</p><p>算法角度，一般是这么考虑的：</p><ul><li>RPC的传输很丝滑，非常适合小模块之间的通信，模型一般是大方案里面的一个组件，所以其实模型服务用RPC进行传输非常合适。</li><li>对于算法的大模块，里面可能有各种规则、模型的大组合，这时候用HTTP协议能保证其和外界沟通的灵活性，例如算法多了新功能，不着急后端马上跟进完成接口开发。</li></ul><p>所以更多情况下，对于单一的模型服务，一般采用RPC协议。</p><ul><li>RPC</li></ul><p>RPC的选择其实不少，例如百度的BRPC、谷歌的GRPC，这里比较常用的。GRPC本身不是局限语言的，除了python，c++之类的其实都有工具，服务化本身也有很大好处，语言上并不约束请求方和被请求方一致，c++一样可以请求python，沟通非常通畅，从参与的c++项目和python项目来看，都可以选着GRPC直接用。</p><p>另外，需要提到的是，针对Java，通过比较常用的方式还是Dubbo这套RPC框架，可以和Spring集成。</p><ul><li>HTTP</li></ul><p>HTTP本身不是一个很新的东西，计算机专业应该是基操了，结合简单的功能和外部支持，很快就能搞定一个HTTP。对于非计算机专业，学起来有些成本，但是结合文本其实入门门槛其实不是很高。</p><p>常用来做python的http服务的工具，主要是这3个，当然还有别的很多，可以在评论区推荐。</p><ul><li>flask</li><li>tornado</li><li>django</li></ul><p>通过这种工具能轻松完成python模型的服务化，可以说是非常轻松了，文章后面我用flask写一个简单的服务，并用request工具写一个请求脚本带大家理解一下简单服务化的流程吧。</p><ul><li>服务的负载均衡</li></ul><p>说到服务化，很难不考虑负载均衡这个问题。所谓的负载均衡，主要发生在多个服务器或者是多进程之类的场景，为了保证能在线每秒几千几万甚至更多的请求，也就是所谓的并发，最好的方式就是增加服务器，每台机器部署同样的服务，说白了就是事太多了干不完那就招人，但是需要保证的是，每个人干的活要一样，不能招了人还盯着特定的一两个人干活，这肯定是不合理的，所以我们需要考虑的就是合理分配任务，保证大家都能干活，同时也能在有人生病的时候能对任务分配进行调整，保证不出现任务没完成的情况。</p><ul><li>单机多进程</li></ul><p>单机多进程是python中常用的单机提升并发的技术，最简单的方式就是多进程，一般的会用gunicon进行控制，来个<a href="https://gunicorn.org/#quickstart">教程链接</a>自己看吧。</p><p>当然，类似grpc之类的，python是支持多个worker进行的，具体也可以去看grpc的文档，里面有详细介绍：</p><ul><li><a href="https://www.grpc.io/docs/languages/python/quickstart/">快速开始</a></li><li><a href="https://grpc.github.io/grpc/python/">API文档</a></li></ul><p>当然了，如果想自己写，当然也是可以的，python有自己的多进程和多线程工具（注意，python的多线程是伪多线程，对非CPU非密集型的任务，如爬虫才能有用，像模型服务肯定要用做多进程了），自己可以写。</p><ul><li>多机房</li></ul><p>多机房肯定就是多个服务了，我就介绍介绍zookeeper吧。</p><ul><li>zookeeper</li></ul><p>我觉得菜鸟教程上的这玩意说的是比较好的：</p><blockquote><ul><li>一个典型的分布式数据一致性的解决方案，分布式应用程序可以基于它实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。——菜鸟教程。<br><a href="https://www.runoob.com/w3cnote/zookeeper-tutorial.html">学习链接</a></li></ul></blockquote><p>这套东西本身用来承接对GRPC服务的负载均衡非常合适，所以非常推荐能够学起来吧。</p><h4 id="在线服务的要求"><a href="#在线服务的要求" class="headerlink" title="在线服务的要求"></a>在线服务的要求</h4><p>做了个服务，要上线，肯定要保证可用，具体可用上可以按照这几个角度来评估：</p><ul><li>单机性能：耗时，端到端耗时，模型耗时，即大到整体，小到每个模块的耗时。</li><li>并发：能承受多少QPS（query per second），成功率等。</li><li>单机资源：你有几台机器，分别什么配置，CPUGPU内存等，这里基本其实充钱不充钱的问题。</li></ul><p>我一直对BERT之类的方案谨慎，很核心的原因就在这里，难度非常大，单机耗时高（这几年通过硬件和编译技术有所下降）、机器资源占用过等，所以成熟的算法应该是要把这些因素考虑到里面去的。</p><h4 id="一个极简栗子"><a href="#一个极简栗子" class="headerlink" title="一个极简栗子"></a>一个极简栗子</h4><p>那就来个简单的例子吧。这里的例子用我用的比较多的tornado，我就以他为例来简单讲讲。</p><p>首先肯定是要准备一个模型的推理类，里面需要包含这几个东西：</p><ul><li>模型的初始化</li><li>模型的预测</li></ul><p>另外，由于tornado的原因，还需要一个初始化函数和一个预测函数，初始化主要用于特定场景的模型初始化，形成全局变量，预测函数主要用在服务内执行模型函数，来看看具体代码吧：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DemoModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 写一个超简单的模型类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 模型初始化</span>        self<span class="token punctuation">.</span>cal_number <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cal_number<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 模型预测</span>        self<span class="token punctuation">.</span>cal_number <span class="token operator">+=</span> cal_number        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cal_number<span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> demo_model    demo_model <span class="token operator">=</span> DemoModel<span class="token punctuation">(</span><span class="token punctuation">)</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> demo_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>predict<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>predict<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的模型类我写的非常简单，基本的包括初始化用的是初始化一个参数来定的，一般大家都是用的“load”之类的方式来加载模型，另一个则是预测函数，这里的预测函数我也写的也很简单，其实大都是模型的预测，大家能理解就好。</p><p>另外值得注意的是两个函数，一个是初始化函数，另一个是预测函数，前者是为了初始化一个“global”的demo_model对象，而另一个则是预测函数，在tornado打包模型的时候会用到。</p><p>这个完成了一个模型类，然后来看怎么用tornado包装一个模型。这里设计一些tornado的基本知识，基本入门可以<a href="https://blog.csdn.net/u013713010/article/details/53302377">看看这个</a>，看完后直接上代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web<span class="token keyword">import</span> tornado<span class="token punctuation">.</span>ioloop<span class="token keyword">from</span> loguru <span class="token keyword">import</span> logger<span class="token keyword">import</span> json<span class="token keyword">from</span> nlu_model<span class="token punctuation">.</span>util<span class="token punctuation">.</span>server<span class="token punctuation">.</span>demo_model <span class="token keyword">import</span> DemoModel<span class="token punctuation">,</span> predict<span class="token keyword">class</span> <span class="token class-name">DemoModelServer</span><span class="token punctuation">(</span>tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取post方式的参数</span>        recordid <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">"recordid"</span><span class="token punctuation">,</span> <span class="token string">"TEST"</span><span class="token punctuation">)</span>        cal_number <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">"cal_number"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        request_body <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        recordid <span class="token operator">=</span> request_body<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"recordid"</span><span class="token punctuation">,</span> <span class="token string">"TEST"</span><span class="token punctuation">)</span>        cal_number <span class="token operator">=</span> request_body<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"cal_number"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"[{}]request: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>recordid<span class="token punctuation">,</span> cal_number<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 模型预测</span>        result <span class="token operator">=</span> predict<span class="token punctuation">(</span>cal_number<span class="token punctuation">)</span>        <span class="token comment"># 结果整理和返回</span>        output_result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"recordid"</span><span class="token punctuation">:</span> recordid<span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">:</span> result<span class="token punctuation">}</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"[{}]response: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>recordid<span class="token punctuation">,</span> output_result<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_result<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#创建一个应用对象</span>    app <span class="token operator">=</span> tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>Application<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">r'/demo'</span><span class="token punctuation">,</span>DemoModelServer<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#绑定一个监听端口</span>    app<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span>    <span class="token comment">#启动web程序，开始监听端口的连接</span>    tornado<span class="token punctuation">.</span>ioloop<span class="token punctuation">.</span>IOLoop<span class="token punctuation">.</span>current<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个tornado类里面只有一个函数，就是POST，即这个服务内部使用post来进行传输的，POST函数里其实就是整个数据处理的流程：</p><ul><li>获取参数和整理参数</li><li>模型预测</li><li>结果整理和返回</li></ul><p>流程非常清晰明确，大家可以根据这个格式去进行自己的拓展，例如数据合法性校验、模型和规则的协调等。</p><p>至于服务的启动，只需要在命令行里整这个就好了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python server<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务就算起来了，注意这里是不会运行结束的，而是像一个长期挂着，一旦有人请求，这里就会打日志，打的时候POST中内容。</p><p>这里面还有一件事，就是我们要测一下我们的服务是否OK，这里就需要一个模拟请求的工具，也就是一个用于测试的客户端，我这里用requests也写了一个：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> randomrecordid <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>json_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'recordid'</span><span class="token punctuation">:</span>recordid<span class="token punctuation">,</span> <span class="token string">"cal_number"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://localhost:8081/demo"</span><span class="token punctuation">,</span> json_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里模拟了一个recordid和一个cal_number的参数，然后用request去请求，这里的localhost表示本地，大家可以换成自己的ip或者是域名，demo是服务下的服务名，直接请求就可以得到结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python check_api<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先可以看到check_api这打印的结果（多来几次）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">'recordid'</span><span class="token punctuation">:</span> <span class="token string">'77492467'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'recordid'</span><span class="token punctuation">:</span> <span class="token string">'29791408'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'recordid'</span><span class="token punctuation">:</span> <span class="token string">'46915366'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而另一侧我们去看看正在挂载着的服务打印了什么东西：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">57.251</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> __main__<span class="token punctuation">:</span>post<span class="token punctuation">:</span><span class="token number">17</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">77492467</span><span class="token punctuation">]</span>request<span class="token punctuation">:</span> <span class="token number">5</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">57.251</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> __main__<span class="token punctuation">:</span>post<span class="token punctuation">:</span><span class="token number">21</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">77492467</span><span class="token punctuation">]</span>response<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'recordid'</span><span class="token punctuation">:</span> <span class="token string">'77492467'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">12.529</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> __main__<span class="token punctuation">:</span>post<span class="token punctuation">:</span><span class="token number">17</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">29791408</span><span class="token punctuation">]</span>request<span class="token punctuation">:</span> <span class="token number">5</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">12.529</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> __main__<span class="token punctuation">:</span>post<span class="token punctuation">:</span><span class="token number">21</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">29791408</span><span class="token punctuation">]</span>response<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'recordid'</span><span class="token punctuation">:</span> <span class="token string">'29791408'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">27.939</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> __main__<span class="token punctuation">:</span>post<span class="token punctuation">:</span><span class="token number">17</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">46915366</span><span class="token punctuation">]</span>request<span class="token punctuation">:</span> <span class="token number">5</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">27.939</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> __main__<span class="token punctuation">:</span>post<span class="token punctuation">:</span><span class="token number">21</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">46915366</span><span class="token punctuation">]</span>response<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'recordid'</span><span class="token punctuation">:</span> <span class="token string">'46915366'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得益于日志，我们看到了每次请求过程的输入和输出。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文给大家介绍了模型部署的最基本方案，告诉大家模型是怎么上线的，同时也给了大家一个很简单的demo级别的例子方便大家理解。当然还有很多复杂的组件没有和大家展开聊，例如模型数据的维护、日志系统等，日后有机会再说（这篇文章写了巨久）。</p><p>指的强调的是，这块东西对于一名算法工程师来说非常重要，大家可以根据我里面提到的名词进行更进一步的深入学习，另外对于一些服务方面的技术细节，大家需要看看计算机方面的数据进行补充，类似计算机网络。</p>]]></content>
      
      
      <categories>
          
          <category> 周总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python将PDF转为WORD</title>
      <link href="/2021/12/22/python-jiang-pdf-zhuan-wei-word/"/>
      <url>/2021/12/22/python-jiang-pdf-zhuan-wei-word/</url>
      
        <content type="html"><![CDATA[<p>6行代码！用Python将PDF转为word</p><p>pdf转word应该算是一个很常见的需求了。网上有些免费的转换工具，一方面不安全，有文件泄露风险，另一方面有免费转换的次数限制。今天向大家分享一个很好用的工具：pdf2docx</p><p>安装</p><pre class="line-numbers language-pip" data-language="pip"><code class="language-pip">pip install pdf2docx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用法也很简单，核心方法是Converter，我写了一个小脚本，如有需要，大家可以直接copy走。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># -*- coding: utf-8 -*-# @Author  : Shajiu# @FileName: pdf_word.py# @Time    : 2021/12/22 17:12import argparsefrom pdf2docx import Converterdef main(pdf_file, docx_file):    cv = Converter(pdf_file)    cv.convert(docx_file, start=0, end=None)    cv.close()if __name__ == "__main__":    parser = argparse.ArgumentParser()    parser.add_argument("--pdf_file", type=str)    parser.add_argument('--docx_file', type=str)    args = parser.parse_args()    main(args.pdf_file, args.docx_file)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">python pdf2word.py --pdf_file  pdf文件路径\example.pdf --docx_file 输出word文件的路径\example.docx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不喜欢命令行跑脚本的同学可以copy下面简化版</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from pdf2docx import Converterpdf_file = 'pdf文件路径'docx_file = '输出word文件的路径'cv = Converter(pdf_file)cv.convert(docx_file, start=0, end=None)cv.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于我，欢迎关注<br>  博客：<a href="https://shajiu.github.io/">甘南第一勇士</a>  微信公众号:”源码上门取算法码上到” 。</p></blockquote><p><img src="https://s2.loli.net/2021/12/23/6lBOuQad1n2GCwA.jpg" alt="请关注且回复“Python安装包”关键字，便可获取不同版本的Python,Pycharm等相关工具"></p>]]></content>
      
      
      <categories>
          
          <category> 工具方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源软件程序设计接口</title>
      <link href="/2021/12/22/kai-yuan-ruan-jian-cheng-xu-she-ji-jie-kou/"/>
      <url>/2021/12/22/kai-yuan-ruan-jian-cheng-xu-she-ji-jie-kou/</url>
      
        <content type="html"><![CDATA[<h3 id="软件程序接口设计"><a href="#软件程序接口设计" class="headerlink" title="软件程序接口设计"></a>软件程序接口设计</h3><h4 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h4><h6 id="为什么要重视API设计？"><a href="#为什么要重视API设计？" class="headerlink" title="为什么要重视API设计？"></a>为什么要重视API设计？</h6><ul><li>降低用户学习成本</li><li>例如：用户主要使用Python</li><li>Tensorflow把C++ API包装成Python</li><li>开源软件不是单独的存在</li><li>API决定技术栈的稳定性</li><li>为上层建筑打下基础</li><li>API设计VS底层技术</li><li>API设计又超高的性价比</li></ul><p><img src="https://s2.loli.net/2021/12/22/wFuKEHpdiYh38rx.jpg" alt="底层技术与API的成本和收益"></p><h4 id="新挑战"><a href="#新挑战" class="headerlink" title="新挑战"></a>新挑战</h4><ul><li>用户需求未知</li></ul><p><img src="https://s2.loli.net/2021/12/22/i7I15H8w2LZklmG.jpg" alt="用户需求未知"></p><ul><li>用户群体割裂</li><li>把需求缝合进同一套API</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/fe635741eb6c13a1.jpg" alt="把需求缝合进同一套API"></p><h4 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h4><h6 id="原则一、代码未动，设计先行"><a href="#原则一、代码未动，设计先行" class="headerlink" title="原则一、代码未动，设计先行"></a>原则一、代码未动，设计先行</h6><ul><li>有设计，才有可能有好的设计</li><li>有API设计倒推代码结构</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/fcf3e83496a5f9bf.jpg" alt="有API设计倒推代码结构"></p><ul><li>谨慎修改API，重走设计流程</li><li>谨慎增加API,会增加历史包袱</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/3e2ed7cfae96ac22.jpg" alt="谨慎增加API,会增加历史包袱"></p><h6 id="API设计文档里有什么？"><a href="#API设计文档里有什么？" class="headerlink" title="API设计文档里有什么？"></a>API设计文档里有什么？</h6><ul><li>把设计文档当教程写</li><li>单个函数定义VS完整代码段</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/c3e36dd690570b36.jpg" alt="单个函数定义VS完整代码段"></p><ul><li>写完整的代码段</li></ul><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">output_tensor=x_textfor layer in model.layers:     output_tesor=layer(output_tensor)     print(output_tensor)class Layer(tf.Module):     def __call__(self,tensor):          pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="原则二、所想即所得"><a href="#原则二、所想即所得" class="headerlink" title="原则二、所想即所得"></a>原则二、所想即所得</h6><ul><li>好的API设计</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/21c079e686cc3ad8.jpg" alt="好的API设计"></p><ul><li>正例</li></ul><pre class="line-numbers language-Keras" data-language="Keras"><div class="caption"><span>Model</span></div><code class="language-Keras">model=keras.Sequential([   layers.Conv2D(filters=32,kernel_size=3,activation='relu'),   layers.Conv2D(filters=32,kernel_size=3,activation='relu'),   layers.Flatten(),   layers.Dense(10,activation='softmax'),   ])model.compile(    optimizer='adam',    loss='categorical_crossentropy')model.fit(x_train,y_train,epochs=3)model.predict(x_test)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最差API设计</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/0a88c67bfb704d87.jpg" alt="最差API设计"></p><ul><li>反例</li></ul><pre class="line-numbers language-TF1" data-language="TF1"><div class="caption"><span>Tensor</span></div><code class="language-TF1"># 给用户灌输编译器中的概念x=tf.placeholder("float",None)y=x*2# y是tensor,能相乘却没有值with tf.Session() as session:     result=session.run(y,feed_dict={x:[1,2,3]})     print(result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如何兼顾两者的需求？</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/ccd4299d550de3de.jpg" alt="如何兼顾两者的需求？"></p><ul><li>让用户只学习必要的知识</li></ul><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">model.compile(    optimizer='adam',    loss='categorical_crossentropy'    model.fit(x_train,y_train,epochs=3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="科学家VS工程师"><a href="#科学家VS工程师" class="headerlink" title="科学家VS工程师"></a>科学家VS工程师</h6><ul><li><p>只学习必要的内容</p></li><li><p>降低学习门槛</p></li></ul><h6 id="原则三、让用户在交互中学习"><a href="#原则三、让用户在交互中学习" class="headerlink" title="原则三、让用户在交互中学习"></a>原则三、让用户在交互中学习</h6><ul><li>代码不是一种静态的存在</li><li>引入时间维度</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/985d5cda5f5c808c.jpg" alt="引入时间维度"></p><ul><li><p>用户难以一次行写对</p></li><li><p>在试错中前进</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/81c43d03f6e79e8c.jpg" alt="在试错中前进"></p><ul><li><p>尽早捕捉异常</p></li><li><p>发出有意义的信息</p></li></ul><p><img src="https://s2.loli.net/2021/12/22/IXUTmvY6wqSuPZO.jpg" alt="发出有意义的信息"></p><ul><li>最佳错误信息：指导用户如何修正</li></ul><p><img src="https://s2.loli.net/2021/12/22/yZ23Bm9bpnEfGTN.jpg" alt="最佳错误信息：指导用户如何修正"></p><h6 id="一条朴素的API评价标准"><a href="#一条朴素的API评价标准" class="headerlink" title="一条朴素的API评价标准"></a>一条朴素的API评价标准</h6><p><font face="逐浪立楷" color="green" size="3">用户能轻易掌握API的使用逻辑，并在根据这种逻辑构建自己的应用，而很少查阅文档。</font></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th align="center">重要性</th><th align="center">新挑战</th><th align="center">基本原则</th></tr></thead><tbody><tr><td align="center">① 降低学习成本；②生态稳定性；③高性价比</td><td align="center">① 无法提前接触用户；② 用户群体割裂</td><td align="center"><font color="#871F78">原则一代码未动、设计先行：谨慎修改增加API、写完整代码段; </font><font color="#008000">原则二、所想即所得:契合用户心理表征、尽量不灌输新概念、不迷惑用户、只学需要的；</font><font color="Blue">原则三、让用户在交互中学习:用户需要试错、尽早捕捉异常 、抛出有意义的异常信息、指导用户修正</font></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 周总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于BERT舆情分析的Demo实例</title>
      <link href="/2021/12/17/ji-yu-bert-yu-qing-fen-xi-de-demo-shi-li/"/>
      <url>/2021/12/17/ji-yu-bert-yu-qing-fen-xi-de-demo-shi-li/</url>
      
        <content type="html"><![CDATA[<h4 id="基于BERT舆情分析的Demo实例"><a href="#基于BERT舆情分析的Demo实例" class="headerlink" title="基于BERT舆情分析的Demo实例"></a>基于BERT舆情分析的Demo实例</h4><h5 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h5><p>   Google发布了《Pre-training of Deep Bidirectional Transformers for Language Understanding》，一举刷新多项NLP领域记录后。BERT为“Bidirectional Encoder Representations from Transformers”的首字母缩写，整体式一个自编码语言模型(Autoencoder LM)，而且其内部设置了两个任务来预测训练模型。</p><ul><li><p>第一个任务是采用MaskLM的方式来训练语言模型，通俗地讲就是在输入一句话的时候，随机地选一些预测的词，然后用一个特殊的符号[MASK]来代替他们，之后让模型根据所给定的标签去学习这些地方该填写的词；</p></li><li><p>第二个任务在双向语言模型的基础上额外增加了一个句子级别的连续性预测任务，即预测输入BERT的两段文本是否为连续的文本，引入这个任务可以更好地让模型学到连续的文本片段之间的关系。</p><p>按照<a href="https://arxiv.org/abs/1810.04805">原论文</a>中的描述，最后的实验结果表明BERT模型的有效性，并在11项NLP任务上取得SOTA结果。BERT相较于原来的RNN,LSTM可以做到并发执行，同时提取词在句子中的关系特征，并且能在多个不同层次提取关系特征，进而更全面反映句子语义。相较于word2vec, 其又能根据句子上下文获取词义，从而避免歧义出现。同时缺点也是显而易见的，模型参数太多，而且模型太大，少数数据训练时，容易过拟合。</p></li></ul><p>  BERT模型可谓红遍NLP领域，更多人都想通过BERT对自己的数据进行预处理。由于当前对BERT分析的文章太多，这里也不在赘述。本文接下来将会简单介绍几个使用BERT模型运行的Demo。</p><h5 id="2、实操"><a href="#2、实操" class="headerlink" title="2、实操"></a>2、实操</h5><ul><li>运行平台：Linux、1080Ti、Python=3.6.3$(Anaconda)$、Tensorflow=1.15.0。</li><li>下载源码：<a href="https://github.com/google-research/bert">BERT</a>。或者直接使用clone方式获取源码。<pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/google-research/bert.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下载中文预训练摩模型<a href="https://link.csdn.net/?target=https://storage.googleapis.com/bert_models/2018_11_03/chinese_L-12_H-768_A-12.zip">BERT-Base, Chinese:</a>，至于其他的预训练模型，请到<a href="https://github.com/google-research/bert">官网</a>进行下载即可。其中模型文件夹下包含三个文件，依次为<code>bert_model.ckpt、 vocab.txt和bert_config.json</code>，其中<code>bert_model.ckpt</code>为预训练模型结果文件；<code>vocab.txt</code>为词汇表文件；<code>bert_config.json</code>为模型的超参数文件。</li></ul><p><img src="https://s2.loli.net/2021/12/18/RtqxjKweh9yAHa4.jpg" alt="BERT模型说明"></p><ul><li>下载训练数据，本次举一个例子即可，本文按照官网说明进行下载MRPC语料。直接运行<code>download_glue_data.py</code>即可下载GLUE data。具体执行命令如下：<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">python3 download_glue_data.py --data_dir glue_data --tasks MRPC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 然后这样的方式下载80%都为失败，并且下载的部分也比较慢，可以采用文末提供的链接即可下载全部文件。最终此文件夹下包含如下文件<code>dev.tsv、dev_ids.tsv、msr_paraphrase_test.txt、msr_paraphrase_train.txt、test.tsv、train.tsv、xx.tsv</code>。</li></ul><h5 id="3、Run-Demo"><a href="#3、Run-Demo" class="headerlink" title="3、Run Demo"></a>3、Run Demo</h5><p>基于MRPC语料的句子对分类分类任务<br><strong>训练</strong>：在bert源码文件里执<code>run_classifier.py</code>，基于预训练模型进行Fine-tune，直接运行run_train.sh即可:<code>./run_train.sh</code>，其中run_train.sh中的具体命令如下：</p><pre class="line-numbers language-Sh" data-language="Sh"><code class="language-Sh">python run_classifier.py \ --task_name=MRPC \ --do_train=true \ --do_eval=true \ --data_dir=glue_data/MRPC \ --vocab_file=models/cased_L-12_H-768_A-12/vocab.txt \ --bert_config_file=models/cased_L-12_H-768_A-12/bert_config.json \ --init_checkpoint=models/cased_L-12_H-768_A-12/bert_model.ckpt \ --max_seq_length=128 \ --train_batch_size=32 \ --learning_rate=2e-5 \ --num_train_epochs=3.0 \ --output_dir=emotion_output \ --do_lower_case=True \ --do_lower_case=False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，–do_eval为true的意思，即会生成模型验证结果文件如下图。如果false，既没有验证结果生成。最终的模型保存在<code>output_dir</code>中，验证结果为:</p><pre class="line-numbers language-none"><code class="language-none">***** Eval results *****  eval_accuracy = 0.845588  eval_loss = 0.505248  global_step = 343  loss = 0.505248<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模型具体存储文件如下：<br><img src="https://s2.loli.net/2021/12/18/CqmBwOv8En17SNb.jpg" alt="存储的模型文件"><br><strong>验证:</strong> 指定Fine-tune之后模型所在地，执行<code>run_test.sh</code>，其中<code>run_test.sh</code>中的具体内容如下:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">python run_classifier.py \  --task_name=MRPC \  --do_predict=true \  --data_dir=glue_data/MRPC \  --vocab_file=models/cased_L-12_H-768_A-12/vocab.txt \  --bert_config_file=models/cased_L-12_H-768_A-12/bert_config.json \  --init_checkpoint=emotion_output \  --max_seq_length=128 \  --output_dir=./tmp/mrpc_output/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、自定义任务-x2F-加载数据"><a href="#4、自定义任务-x2F-加载数据" class="headerlink" title="4、自定义任务/加载数据"></a>4、自定义任务/加载数据</h5><p>本次实例以情感分析为例，进行实验，本次主要修改两处。<br><strong>构建数据:</strong> 以情感分析为例，以句子级别为粒度的构建数据集，每条序列的分类-正/中/负，分别用“0、1、2”表示。则构建的数据集如下：<br><img src="https://s2.loli.net/2021/12/18/dYKEZamge1AnTvb.jpg" alt="一行一条，序列与标签之间用&quot;\t&quot;分割"><br><strong>代码修改:</strong> 第一处是在在<code>run_classifier.py</code>中添加读取自己的数据集即可。原先脚本中读取数据的类分别有<code> XnliProcessor、MnliProcessor、MrpcProcessor、ColaProcessor</code>。首先加入一个类，用于读取自定义数据集，此处所加的类为<code>EmotionProcessor</code>，具体内容如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EmotionProcessor</span><span class="token punctuation">(</span>DataProcessor<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""针对情感分析进行训练的测试数据的读取"""</span>  <span class="token keyword">def</span> <span class="token function">get_train_examples</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""See base class."""</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_create_examples<span class="token punctuation">(</span>        self<span class="token punctuation">.</span>_read_tsv<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">"train.tsv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">get_dev_examples</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""See base class."""</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_create_examples<span class="token punctuation">(</span>        self<span class="token punctuation">.</span>_read_tsv<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">"dev.tsv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"dev"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">get_test_examples</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""See base class."""</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_create_examples<span class="token punctuation">(</span>        self<span class="token punctuation">.</span>_read_tsv<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">"test.tsv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">get_labels</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""See base class."""</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span>  <span class="token keyword">def</span> <span class="token function">_create_examples</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lines<span class="token punctuation">,</span> set_type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Creates examples for the training and dev sets."""</span>    examples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>      guid <span class="token operator">=</span> <span class="token string">"%s-%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>set_type<span class="token punctuation">,</span> i<span class="token punctuation">)</span>      text_a <span class="token operator">=</span> tokenization<span class="token punctuation">.</span>convert_to_unicode<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> set_type <span class="token operator">==</span> <span class="token string">"test"</span><span class="token punctuation">:</span>        label <span class="token operator">=</span> <span class="token string">"0"</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        label <span class="token operator">=</span> tokenization<span class="token punctuation">.</span>convert_to_unicode<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      examples<span class="token punctuation">.</span>append<span class="token punctuation">(</span>          InputExample<span class="token punctuation">(</span>guid<span class="token operator">=</span>guid<span class="token punctuation">,</span> text_a<span class="token operator">=</span>text_a<span class="token punctuation">,</span> text_b<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> examples<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 解释，其中以上代码中，我们的标签为正/中/负，所以:<br> </p><pre class="line-numbers language-none"><code class="language-none">def get_labels(self):   """See base class."""   return ["0","1","2"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>本此数据中每行只有一条数据和标签(没有别的列)，其中数据列为第0列，标签列为第1列，所以对应的设置如下：<p></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">text_a <span class="token operator">=</span> tokenization<span class="token punctuation">.</span>convert_to_unicode<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>label <span class="token operator">=</span> tokenization<span class="token punctuation">.</span>convert_to_unicode<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>text_b<span class="token operator">=</span><span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 第二处修改是在<code> run_classifier.py的processors</code>中加入<code>"emotion":EmotionProcessor</code>最终为如下内容:</p><pre class="line-numbers language-none"><code class="language-none">processors = {      "cola": ColaProcessor,      "mnli": MnliProcessor,      "mrpc": MrpcProcessor,      "xnli": XnliProcessor,      "emotion":EmotionProcessor  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>emotion</code>为执行脚本时传入的参数，类似于任务名称；<code>EmotionProcessor</code>为以上添加的读取自定义数据的类名。接下来即可执行。执行分别为微调和验证，可以修改以上<code>run_train.sh和run_test.sh</code>中的输入/输出路径即可。</p><h5 id="5、获取实例源码以及模型"><a href="#5、获取实例源码以及模型" class="headerlink" title="5、获取实例源码以及模型"></a>5、获取实例源码以及模型</h5><p>以上实例的所有源码以及数据可以在<a href="https://github.com/Shajiu/NaturalLanguageProcessing/tree/master/SentimentAnalysis/BERT">这里</a>获取，其中BERT相关模型从按照如下方式获取，具体有如下版本:</p><ul><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2019_05_30/wwm_uncased_L-24_H-1024_A-16.zip">BERT-Large, Uncased (Whole Word Masking)</a><br>语言种类：英文<br>网络结构：24-layer, 1024-hidden, 16-heads<br>参数规模：340M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2019_05_30/wwm_cased_L-24_H-1024_A-16.zip">BERT-Large, Cased (Whole Word Masking)</a><br>语言种类：英文<br>网络结构：24-layer, 1024-hidden, 16-heads<br>参数规模：340M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2018_10_18/uncased_L-12_H-768_A-12.zip">BERT-Base, Uncased</a><br>语言种类：英文<br>网络结构：12-layer, 768-hidden, 12-heads<br>参数规模：110M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2018_10_18/uncased_L-24_H-1024_A-16.zip">BERT-Large, Uncased</a><br>语言种类：英文<br>网络结构：24-layer, 1024-hidden, 16-heads<br>参数规模：340M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2018_10_18/cased_L-12_H-768_A-12.zip">BERT-Base, Cased</a><br>语言种类：英文<br>网络结构：12-layer, 768-hidden, 12-heads<br>参数规模：110M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2018_10_18/cased_L-24_H-1024_A-16.zip">BERT-Large, Cased</a><br>语言种类：英文<br>网络结构：24-layer, 1024-hidden, 16-heads<br>参数规模：340M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2018_11_23/multi_cased_L-12_H-768_A-12.zip">BERT-Base, Multilingual Cased (New, recommended)</a><br>语言种类：104 种语言<br>网络结构：12-layer, 768-hidden, 12-heads<br>参数规模：110M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2018_11_03/multilingual_L-12_H-768_A-12.zip">BERT-Base, Multilingual Uncased (Orig, not recommended)</a><br>语言种类：102 种语言<br>网络结构：12-layer, 768-hidden, 12-heads<br>参数规模：110M</p></li><li><p><a href="https://link.zhihu.com/?target=https://storage.googleapis.com/bert_models/2018_11_03/chinese_L-12_H-768_A-12.zip">BERT-Base, Chinese</a><br>语言种类：中文<br>网络结构：12-layer, 768-hidden, 12-heads<br>参数规模：110M</p></li></ul><p>从上面的版本可以看出，语言主要分为三种：中文、英文和多语言。其中英文和多语言版本还区分：cased 和 uncased，cased 表示区分大小写，uncased 表示不区分大小写。网络结构主要分为两种：Base 和 Large。Base版本相比于Large版本网络规模较小，参数量为110M。中文的预训练模型只有一个版本，是用Base版本的网络结构训练得到。</p><h5 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h5><p>本文对BERT做了一些简单的Demo展示, 首先，介绍了BERT中的两个重要任务，分别为Masked LM和Next Sentence Prediction；其次，介绍了如何下载源码/预训练模型并介绍基本的配置环境需求；然后，通过官网说明下载MRPC语料并进行了微调和预测；最后，以情感分析的数据实例进行了详细的自定义数据微调和预测的使用说明。希望通过简要介绍能为一些类似本人的小白起到学习的作用。</p>]]></content>
      
      
      <categories>
          
          <category> 周总结(BERT) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于LiquiBase的学习笔记</title>
      <link href="/2021/12/13/guan-yu-liquibase-de-xue-xi-bi-ji/"/>
      <url>/2021/12/13/guan-yu-liquibase-de-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="关于LiquiBase的学习笔记"><a href="#关于LiquiBase的学习笔记" class="headerlink" title="关于LiquiBase的学习笔记"></a>关于LiquiBase的学习笔记</h3><p>$\quad$ 如果您使用的是Spring，则有可能使用诸如Hibernate，Jooq或Ebean之类的持久性技术从数据库中获取数据。功能来去去去发生变化；数据模型也发生变化，当您需要更改数据模型时会发生什么？您运行数据库迁移以添加或删除列或进行其他更改。<br>$\quad$过去通常是手动进行，有人会登录到数据库，运行大量SQL，并依赖于您在应用程序中进行了相同的更改。虽然这里还有很多人为错误的余地。通过尝试使数据库更改更安全，我们对此进行了改进。版本控制，可重复性，可测试性；这些概念适用于堆栈的更多部分。包括数据库。<br>$\quad$Liquibase和Flyway都可以帮助我们进行这些迁移。Spring会依次帮助我们使用Liquibase和Flyway。今天本文针对Liquibase通过实例进行简要介绍。<br>$\quad$Liquibase是一个用于跟踪、管理数据库变化的开源数据库重构工具。它将数据库的所有变化（包括结构和数据）都保存在XML文件中，便于版本控制。Liquibase不依赖特定数据库，支持常见的12种数据库，包括：Oracle,MySQL, DB2,SQL Server,PostgreSQL,h2等。</p><h3 id="Spring-boot中使用LiquiBase"><a href="#Spring-boot中使用LiquiBase" class="headerlink" title="Spring boot中使用LiquiBase"></a>Spring boot中使用LiquiBase</h3><ul><li>添加依赖<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.liquibase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>liquibase-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>application.yml配置方式<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">可参考路径：src/main/resources/application.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>java配置方式<pre class="line-numbers language-java" data-language="java"><code class="language-java">可参考路径：com<span class="token operator">/</span>example<span class="token operator">/</span>mybatis_plus<span class="token operator">/</span>mybatis_plus_learn<span class="token operator">/</span>config<span class="token operator">/</span><span class="token class-name">LiquibaseConfig</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>配置DB change</li></ul><p>$\quad$DB配置一般分为master配置和细节配置，master中使用include引入细节配置文件。</p><ul><li>添加 master.xml<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">可参考路径: src/main/resources 目录下 config/liquibase/master.xml可参考路径: src/main/resources/config/liquibase/master.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>添加子配置文件201712022057_add_entity_Base.xml<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">可参考路径:src/main/resources/config/liquibase/changelog/201712022057_add_entity_Base.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>执行以上脚本会在DB中生成如下数据表</li></ul><ul><li>本次待创建的数据表 (tb_member)</li><li>记录database上执行的所有statements (databasechangelog)</li><li>用于确保两台机器不会同时修改database  (databasechangeloglock)</li></ul><p>Liquibase执行时会检查表databasechangelog，从而只执行没有执行过的changeSet。</p><h3 id="Liquibase构件讲解"><a href="#Liquibase构件讲解" class="headerlink" title="Liquibase构件讲解"></a>Liquibase构件讲解</h3><p>$\quad$databasechangelog中包含元素include，property，changeSet，preConditions</p><ul><li><a href="https://docs.liquibase.com/concepts/advanced/preconditions.html">preConditions</a></li></ul><p>$\quad$preConditions作用于databaseChangelog或changeSet来控制执行。changelog level的precoditions应用于所有的changeSet，包含include进来的changeSet。preConditions条件满足，按顺序执行其中的changeSet和include；preConditions条件不满足，失败退出并解释失败的原因。<br>下面是使用preConditions的示例。只有database type为oracle且username为DEVNEW时才执行该changelog。同时，只有oldtable中没有数据时才能drop table。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseChangeLog</span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.liquibase.org/xml/ns/dbchangelog/1.8<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.liquibase.org/xml/ns/dbchangelog/1.8         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.8.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>preConditions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbms</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>runningAs</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>preConditions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changeSet</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bob<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>preConditions</span> <span class="token attr-name">onFail</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlCheck</span> <span class="token attr-name">expectedResult</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select count(*) from oldtable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlCheck</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>preConditions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">&gt;</span></span>Comments should go after preCondition. If they are before then liquibase            usually gives error.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dropTable</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oldtable<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>changeSet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseChangeLog</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>① 对应的常见参数有：</p><p><a href="https://imagelol.com/image/L6ozNr"><img src="https://s6.jpg.cm/2021/12/13/L6ozNr.jpg" alt="对应的常见参数有"></a></p><p>② 如果出现以上结果时，可以进行一些处理</p><p>③ 当结果为onFail或onError时，可执行下面操作</p><p><a href="https://imagelol.com/image/L6o9kG"><img src="https://s6.jpg.cm/2021/12/13/L6o9kG.jpg" alt="当结果为onFail或onError时"></a></p><p>④ 当结果为onUpdateSQL时，可执行下面操作</p><p><a href="https://imagelol.com/image/L6oD2p"><img src="https://s6.jpg.cm/2021/12/13/L6oD2p.jpg" alt="当结果为onUpdateSQL时"></a></p><p>⑤ 条件之间可以使用AND/OR/NOT进行拼接来构建复杂的环境，默认为and。下面为示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>preConditions</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>or</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>and</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbms</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>runningAs</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>and</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>and</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbms</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mssql<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>runningAs</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sa<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>and</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>or</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>preConditions</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑥ precoditions包括下面item</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbms</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>runningAs</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changeSetExecuted</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columnExists</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableExists</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>viewExists</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreignKeyConstraintExists</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>indexExists</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sequenceExists</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>primaryKeyExists</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlCheck</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://docs.liquibase.com/concepts/basic/changelog-property-substitution.html">property</a></li></ul><p>$\quad$Liquibase允许动态替换changelog中的参数，参数一般使用${}表示。参数值的搜索顺序：<br>$\quad$ a. Liquibase runner的参数；<br>$\quad$ b. JVM系统参数；<br>$\quad$ c. changelog中<property>提供的参数。<br>$\quad$ property具有如下属性，设置context或dbms，参数只会在这些context或dbms中使用。<br><a href="https://imagelol.com/image/L64G4E"><img src="https://s6.jpg.cm/2021/12/13/L64G4E.jpg" alt="设置context或dbms"></a><br>① property的示例如下</property></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simpleproperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>somevalue<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clob.type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clob<span class="token punctuation">"</span></span> <span class="token attr-name">dbms</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oracle,h2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clob.type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>longtext<span class="token punctuation">"</span></span> <span class="token attr-name">dbms</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myproperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common,test<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://docs.liquibase.com/concepts/basic/changeset.html">changeSet</a></li></ul><p>$\quad$ changeSet将database changes组合在一起，使用id,author以及changelog file path来唯一识别。Liquibase顺序执行changelog中的changeSet，根据表databasechangelog判断id/author/filepath是否已经执行过，若执行过则跳过该changeSet，除非指定runAlways为true. 当changeset执行完，在表databasechangelog插入一行来记录id/author/filepath以及changeset的MD5sum值。<br>Liquibase通常在一个transaction中执行changeSet。<br>下面是changeSet具有的属性</p><p><a href="https://imagelol.com/image/L64tBt"><img src="https://s6.jpg.cm/2021/12/13/L64tBt.jpg" alt="changeSet具有的属性"></a><br>changeSet中可以包含如下的sub-tags</p><p><a href="https://imagelol.com/image/L64NOR"><img src="https://s6.jpg.cm/2021/12/13/L64NOR.jpg" alt="changeSet中可以包含如下的sub-tags"></a></p><ul><li><a href="https://docs.liquibase.com/concepts/advanced/include.html">include</a></li></ul><p>用来在root change log file中引入其他的change log file</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseChangeLog</span>  <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.liquibase.org/xml/ns/dbchangelog/1.9<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.liquibase.org/xml/ns/dbchangelog/1.9         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/example/news/news.changelog.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/example/directory/directory.changelog.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseChangeLog</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>include具有如下属性<br><a href="https://imagelol.com/image/L64zTS"><img src="https://s6.jpg.cm/2021/12/13/L64zTS.jpg" alt="include具有属性"></a></p><p>$\quad$ include目前具有重复引用和循环引用的问题。重复引用因为不会执行已经执行过的changeSet而自动解决。</p><ul><li><a href="https://docs.liquibase.com/concepts/advanced/contexts.html">contexts</a></li></ul><p>$\quad$ Liquibase使用contexts作为tag来限制changeSet是否执行，可将changeSet进行分组。若不设置context，该changeSet将总是执行。context可以具有任意名称且大小写不敏感。<br>使用context的示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changeSet</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bob<span class="token punctuation">"</span></span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>news<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Liquibase 0.8 Released<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>news<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Liquibase 0.9 Released<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>changeSet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$\quad$ 可以使用and,or,!以及()来组合context，优先级顺序! &gt; and &gt; or。context也可以用,分隔，优先级比较高。test, qa and master等价于(test) or (qa and master)。</p><ul><li><a href="https://docs.liquibase.com/change-types/home.html">changes</a></li></ul><p>Liquibase中提供了很多可以作用于database的changes。Table/View。包括create, drop, rename table/view/column.index 包括create,drop index/procedure/primary key/foreign key/unique constraint/not null constraint/default value。insert/delete<br>创建table的示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changeSet</span> <span class="token attr-name">author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>liquibase-docs<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTable-example<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>createTable</span> <span class="token attr-name">catalogName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span>            <span class="token attr-name">remarks</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A String<span class="token punctuation">"</span></span>            <span class="token attr-name">schemaName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>public<span class="token punctuation">"</span></span>            <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span>            <span class="token attr-name">tablespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A String<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>varchar(255)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>createTable</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>changeSet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>$\quad$ Liquibase可以on demand执行，也可以自动执行。On demand执行的方式包括command line, Ant, Maven。自动执行的方式包括servlet listener, spring listener。更多信息参见文章Running。<br>推荐关于Liquibase的资料:</p><p>① <a href="https://docs.liquibase.com/workflows/liquibase-community/trimming-changelogs.html">Log trim</a></p><p>② <a href="https://docs.liquibase.com/home.html">Document</a></p><p>③ <a href="https://docs.liquibase.com/workflows/liquibase-community/existing-project.html">Special care exist project</a></p><p>④ <a href="https://github.com/Shajiu/JavaProjects/tree/main/mybatisPlusLearn">以上源码请在这里获取</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言(Java) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树</title>
      <link href="/2021/12/12/jue-ce-shu/"/>
      <url>/2021/12/12/jue-ce-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><ul><li>决策树是一种自上而下，对样本数据进行树形分类的过程，由结点和有向边组成，节点分为内部结点和外部结点，其中每个内部结点表示一个特征或者属性，叶结点表示类别。从顶部根结点开始，所有样本聚在一起。经过根结点的划分，样本被分到不同的子结点中。再根据子结点的特征进一步划分，直至所有样本都被归到某一个类别(即叶结点)中。<br><img src="https://s2.loli.net/2021/12/12/c5OzEfmHnTxhNJk.jpg" alt="决策树"></li><li>决策树作为最基本、最常见的有监督学习模型，常被用于分类问题和回归问题，再市场营销和生物医药等领域具有广大应用场景。将决策树应用集成学习的思想可以得到随机森林、梯度提升决策等模型。完成生长的决策树模型具有简单直观、解释性强的特点，值得读者认真理解，这也是为融为贯通集成学习相关内容所作的铺垫。<br><img src="https://s2.loli.net/2021/12/12/3vJr1ONxLo6e8ZP.png" alt="参考资料及知识点盘点"></li><li>常见的决策树算法有ID3、C4.5、CART,接下来逐一讲解构建树所使用的启发式函数、准则、区别与联系。</li><li>为了便于理解，本文通过如下实例进行推导相关算法的计算和实现。假设共有5个人追求场景中的女孩，年龄有两个属性(老、年轻)；长相有三个属性(帅、一般、丑)；工资有三个属性(高、中等、低)；会写代码有两个属性(会、不会)；最终分类结果有两类(见、不见)，具体如表《5个候选对象的属性以及女孩对应的主观意愿》所示：</li></ul><table><thead><tr><th align="left"></th><th align="right">年龄</th><th align="center">长相</th><th align="center">工资</th><th align="center">写代码</th><th align="center">类别</th></tr></thead><tbody><tr><td align="left">小A</td><td align="right">老</td><td align="center">帅</td><td align="center">高</td><td align="center">不会</td><td align="center">不见</td></tr><tr><td align="left">小B</td><td align="right">年轻</td><td align="center">一般</td><td align="center">中等</td><td align="center">会</td><td align="center">见</td></tr><tr><td align="left">小C</td><td align="right">年轻</td><td align="center">丑</td><td align="center">高</td><td align="center">不会</td><td align="center">不见</td></tr><tr><td align="left">小D</td><td align="right">年轻</td><td align="center">一般</td><td align="center">高</td><td align="center">会</td><td align="center">见</td></tr><tr><td align="left">小L</td><td align="right">年轻</td><td align="center">一般</td><td align="center">低</td><td align="center">不会</td><td align="center">不见</td></tr></tbody></table><h4 id="1-ID3-最大信息增益"><a href="#1-ID3-最大信息增益" class="headerlink" title="1. ID3 最大信息增益"></a>1. ID3 最大信息增益</h4><p>对于样本集合D，类别数为K，数据集D的经验熵表示为：<br>$$H\big(D\big)=-\sum_{k=1}^{k}\frac{|C_k|}{|D|}log_2\frac{|C_k|}{|D|}$$<br>其中$C_k$是样本集合$D$中属于第$k$类的样本子集，$C_k$表示该子集的元素个数，$|D|$表示样本集合的元素个数。<br>然后计算某个特征$A$的对于数据集$D$的经验条件熵$H\big(D|A\big)$为：<br>$$H\big(D|A\big)=\sum_{i=1}^n\frac{|D_i|}{|D|}\Big(-\sum_{k=1}^k\frac{|D_{ik}|}{|D_i|}log_2\frac{|D_{ik}|}{|D_i|}\Big)$$<br>其中，$D_i$表示$D$中特征$A$取第$i$个值的样本子集，$D_{ik}$表示$D_i$中属于第$k$类的样本子集。<br>于是信息增益$g\big(D,A\big)$可以表示为二者之差，可得:<br>$$g\big(D,A\big)=H\big(D\big)-H\big(D|A\big)$$</p><ul><li>计算经验熵计算为：<br>$$H\big(D\big)=-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5}=0.971$$</li><li>计算四个分支结点的信息熵为：<br>$$H\big(D|年龄\big)=\frac{1}{5}H\big(老\big)+\frac{4}{5}H\big(年轻\big)=\frac{1}{5}\big(-0\big)+\frac{4}{5}\Big(-\frac{2}{4}log_2\frac{2}{4}-\frac{2}{4}log_2\frac{2}{4}\Big)=0.8$$</li></ul><p>$$H\big(D|长相\big)=\frac{1}{5}H\big(帅\big)+\frac{3}{5}H\big(一般\big)+\frac{1}{5}H\big(丑\big)=0+\frac{3}{5}\Big(-\frac{2}{3}log_2\frac{2}{3}-\frac{1}{3}log_2\frac{1}{3}\Big)+0=0.551$$</p><p>$$H\big(D|工资\big)=\frac{3}{5}H\big(高\big)+\frac{1}{5}H\big(中等\big)+\frac{1}{5}H\big(低\big)=\frac{3}{5}\Big(-\frac{2}{3}log_2\frac{2}{3}-\frac{1}{3}log_2\frac{1}{3}\Big)+0+0=0.551$$</p><p>$$H\big(D|写代码\big)=\frac{3}{5}H\big(不会\big)+\frac{2}{5}H\big(一会\big)=\frac{3}{5}\Big(0)+\frac{2}{5}(0)=0$$</p><p>可计算各个特征的信息增益为：<br>$$g\big(D,年龄\big)=H\big(D\big)-H\big(D|A\big)=0.971-0.8=0.171$$<br>$$g\big(D,年龄\big)=H\big(D\big)-H\big(D|A\big)=0.971-0.551=0.42$$<br>$$g\big(D,年龄\big)=H\big(D\big)-H\big(D|A\big)=0.971-0.551=0.42$$<br>$$g\big(D,年龄\big)=H\big(D\big)-H\big(D|A\big)=0.971-0=0.971$$<br>显然，特征”写代码”的信息增益最大，所有的样本根据此特征，可以直接被分到叶结点(即见/不见)中，完成决策树生长。当然，再实际应用中，决策树往往不能通过一个特征完成构建，需要在经验熵非0的类别中继续生长。</p><h4 id="2-C4-5-最大信息增益比"><a href="#2-C4-5-最大信息增益比" class="headerlink" title="2. C4.5 最大信息增益比"></a>2. C4.5 最大信息增益比</h4><p>特征A对于数据集$D$的信息增益比定义为：<br>$$g_{R}\big(D,A\big)=\frac{g(D,A)}{H_A(D)}$$<br>其中，$$H_A(D)=-\sum_{i=1}^n\frac{D_i}{D}log_2\frac{D_i}{D}$$，称为数据集$D$关于$A$的取值熵，针对以上描述问题，可以使用此公式计算数据集关于每个特征的的取值熵为：</p><p>$$H_{年龄}(D)=-\frac{1}{5}log_2\frac{1}{5}-\frac{4}{5}log_2\frac{4}{5}=0.722$$<br>$$H_{长相}(D)=-\frac{1}{5}log_2\frac{1}{5}-\frac{3}{5}log_2\frac{3}{5}-\frac{1}{5}log_2\frac{1}{5}=1.371$$<br>$$H_{工资}(D)=-\frac{3}{5}log_2\frac{3}{5}-\frac{1}{5}log_2\frac{1}{5} -\frac{1}{5}log_2\frac{1}{5}=1.371$$<br>$$H_{写代码}(D)=-\frac{3}{5}log_2\frac{3}{5}-\frac{2}{5}log_2\frac{2}{5}=0.971$$<br>于是，根据公式即可计算每个特征对于数据集D的信息增益比，具体如下：<br>$$g_R(D,年龄)=\frac{g(D,A)}{H_A(D)}=0.171-0.722=0.236$$<br>$$g_R(D,长相)=\frac{g(D,A)}{H_A(D)}=0.171-1.371=0.402$$<br>$$g_R(D,工资)=\frac{g(D,A)}{H_A(D)}=0.171-1.371=0.0.402$$<br>$$g_R(D,写代码)=\frac{g(D,A)}{H_A(D)}=0.171-.0971=1$$<br>信息增益比最大的仍是特征“写代码”，但通过信息增益比，特征“年龄”对应的指标上升了，而特征“长相”和特征“工资”却有所下降。</p><h4 id="3-CART-最大基尼指数Gini"><a href="#3-CART-最大基尼指数Gini" class="headerlink" title="3. CART 最大基尼指数Gini"></a>3. CART 最大基尼指数Gini</h4><p>Gini描述的时数据的纯度，与信息熵含义类似：<br>$$Gini(D)=1-\sum_{k=1}^n\Big(\frac{|C_k|}{D}\Big)^2=\sum_{i=1}^np(x_i)*(1-p(x_i))=1-\sum_{i=1}^np(x_i)^2$$<br>CART在每一次迭代中选择基尼指数最小的特征及其对应的切分点进行分类，但与ID3、C4.5不同的是，CART是一颗二叉树，采用二元切分法，每一步将数据按特征A的取值切分成两份，分别进如左右子树。特征$A$的Gini指数定义为：<br>$$Gini(D|A)=\sum_{i=1}^n\frac{|D_i|}{|D|}Gini(D_i)$$</p><p>依然使用上述数据进行应用CART分类准则，可以计算出每个特征的Gini指数为:<br>按照年龄、长相、工资和写代码四个离散特征以及最后的类别分类结果进行如下归纳：</p><table><thead><tr><th align="center"></th><th align="center">老</th><th align="center">年轻</th></tr></thead><tbody><tr><td align="center">见</td><td align="center">0</td><td align="center">2</td></tr><tr><td align="center">不见</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>按照以上归纳表和相应的公式便可计算对应的Gini分数：<br>$$Gini(老)=1-\sum_{i=1}^np(x_i)^2=1-p(见|老)-p(不见|老)=1-\Big(\frac{0}{1}\Big)^2-\Big(\frac{1}{1}\Big)^2=0$$<br>$$Gini(年轻)=1-\sum_{i=1}^np(x_i)^2=1-p(见|年轻)-p(不见|年轻)=1-\Big(\frac{2}{4}\Big)^2-\Big(\frac{2}{4}\Big)^2=\frac{1}{2}$$<br>$$所以:Gini(D|A)=Gini(类别|年龄)=\sum_{i=1}^n\frac{|D_i|}{D}Gini(D_i)=\frac{1}{5}*0+\frac{4}{5}*0.5=0.4$$</p><table><thead><tr><th align="center"></th><th align="center">帅</th><th align="center">一般</th><th align="center">丑</th></tr></thead><tbody><tr><td align="center">见</td><td align="center">0</td><td align="center">2</td><td align="center">0</td></tr><tr><td align="center">不见</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>按照以上归纳表和相应的公式便可计算对应的Gini分数：<br>$$Gini(帅)=1-\sum_{i=1}^np(x_i)^2=1-p(见|帅)-p(不见|帅)=1-\Big(\frac{0}{1}\Big)^2-\Big(\frac{1}{1}\Big)^2=0$$<br>$$Gini(一般)=1-\sum_{i=1}^np(x_i)^2=1-p(见|一般)-p(不见|一般)=1-\Big(\frac{2}{3}\Big)^2-\Big(\frac{1}{3}\Big)^2=\frac{4}{9}$$<br>$$Gini(丑)=1-\sum_{i=1}^np(x_i)^2=1-p(见|丑)-p(不见|丑)=1-\Big(\frac{0}{1}\Big)^2-\Big(\frac{1}{1}\Big)^2=0$$<br>$$所以:Gini(D|A)=Gini(类别|长相)=\sum_{i=1}^n\frac{|D_i|}{D}Gini(D_i)=\frac{1}{5}*0+\frac{3}{5}*\frac{4}{9}+\frac{1}{5}*0=0.27$$</p><table><thead><tr><th align="center"></th><th align="center">高</th><th align="center">中等</th><th align="center">低</th></tr></thead><tbody><tr><td align="center">见</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">不见</td><td align="center">2</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><p>按照以上归纳表和相应的公式便可计算对应的Gini分数：<br>$$Gini(高)=1-\sum_{i=1}^np(x_i)^2=1-p(见|高)-p(不见|高)=1-\Big(\frac{1}{3}\Big)^2-\Big(\frac{2}{3}\Big)^2=\frac{4}{9}$$<br>$$Gini(中等)=1-\sum_{i=1}^np(x_i)^2=1-p(见|中等)-p(不见|中等)=1-\Big(\frac{1}{1}\Big)^2-\Big(\frac{0}{1}\Big)^2=0$$<br>$$Gini(低)=1-\sum_{i=1}^np(x_i)^2=1-p(见|低)-p(不见|低)=1-\Big(\frac{0}{1}\Big)^2-\Big(\frac{1}{1}\Big)^2=0$$<br>$$所以:Gini(D|A)=Gini(类别|工资)=\sum_{i=1}^n\frac{|D_i|}{D}Gini(D_i)=\frac{3}{5}*\frac{4}{9}+\frac{1}{5}*0+\frac{1}{5}*0=0.27$$</p><table><thead><tr><th align="center"></th><th align="center">会</th><th align="center">不会</th></tr></thead><tbody><tr><td align="center">见</td><td align="center">2</td><td align="center">0</td></tr><tr><td align="center">不见</td><td align="center">0</td><td align="center">3</td></tr></tbody></table><p>按照以上归纳表和相应的公式便可计算对应的Gini分数：<br>$$Gini(会)=1-\sum_{i=1}^np(x_i)^2=1-p(见|会)-p(不见|会)=1-\Big(\frac{2}{2}\Big)^2-\Big(\frac{0}{2}\Big)^2=0$$<br>$$Gini(不会)=1-\sum_{i=1}^np(x_i)^2=1-p(见|不会)-p(不见|不会)=1-\Big(\frac{0}{3}\Big)^2-\Big(\frac{3}{3}\Big)^2=0$$<br>$$Gini(低)=1-\sum_{i=1}^np(x_i)^2=1-p(见|低)-p(不见|低)=1-\Big(\frac{0}{1}\Big)^2-\Big(\frac{1}{1}\Big)^2=0$$<br>$$所以:Gini(D|A)=Gini(类别|写代码)=\sum_{i=1}^n\frac{|D_i|}{D}Gini(D_i)=\frac{2}{5}*0+\frac{3}{5}*0=0$$</p><h4 id="4-对决策树进行剪枝"><a href="#4-对决策树进行剪枝" class="headerlink" title="4. 对决策树进行剪枝"></a>4. 对决策树进行剪枝</h4><p>一颗完全生长的决策树会面临一个很严重的问题，即过拟合，因此需要通过简直来解决。剪枝可分为预剪枝(Pre-Pruning)和后剪枝(Post-Pruning)，预剪枝是指在构造的过程中就知道那些节点可以剪掉。后剪枝是指构造出完整的决策树之后再来考查娜些子树可以剪掉。常见的后剪枝方法有：错误率降低剪枝、悲观剪枝、代价复杂剪枝、最小误差剪枝、CVP、OPP等方法。</p><ul><li>代价复杂剪枝(CCP):<br>对于分类回归树中的每一个非叶子节点计算它的表面误差率增益值$α$<br>$$α=\frac{C(t)-C(T_i)}{T_i-1}$$<br>其中$T_i$为子树中包含的叶子节点个数，$C(t)$为以$t$为单节点树的误差代价，该节点被剪枝，$C(t)=r(t)*p(t)$，$r(t)$为节点$t$的误差率，$p(t)$节点$t$上的数据占所有用户的比例。$C(T_i)$是以$t$为根节点的子树$T_t$的误差代价，如果该节点不被剪枝，它等于子树$T_t$上所有叶子节点的误差代价之和。</li></ul><h4 id="5、ID3、C4-5和CART之间的对比分析"><a href="#5、ID3、C4-5和CART之间的对比分析" class="headerlink" title="5、ID3、C4.5和CART之间的对比分析"></a>5、ID3、C4.5和CART之间的对比分析</h4><p>通过对比三种决策树的构造准则，以及在同一个例子上的不同表现，我们不难发现总结三者之间的差异：</p><ul><li>ID3是采用信息增益作为评价指标，除了“会写代码”这一逆天特征外，会倾向于取值较多的特征。因为，信息增益反映的是给定条件以后不确定性减少的程度，特征取值越多就意味着确定性更高，也就是条件傻熵越小，信息增益越大。</li><li>C4.5处理连续型变量时，通过对数据排序之后找到类别不同的分割线作为切分点，根绝切分点把连续属性转换为布尔型，从而将连续变量转换多个取值区间离散型变量。</li><li>三者之间的对比分析表</li></ul><table><thead><tr><th align="center">算法</th><th align="center">树结构</th><th align="center">支持模型</th><th align="center">特征选择</th><th align="center">连续值处理</th><th>缺失值处理</th><th>剪枝</th></tr></thead><tbody><tr><td align="center">ID3</td><td align="center">多叉树</td><td align="center">分类</td><td align="center">信息增益</td><td align="center">不支持</td><td>不支持</td><td>不支持</td></tr><tr><td align="center">C4.5</td><td align="center">多叉树</td><td align="center">分类</td><td align="center">信息增益</td><td align="center">不支持</td><td>支持</td><td>不支持</td></tr><tr><td align="center">CART</td><td align="center">二叉树</td><td align="center">分类、回归</td><td align="center">基尼系数、平方误差和</td><td align="center">支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h4><p><img src="https://s2.loli.net/2021/12/20/a5ZOzd9rv4MCJKq.jpg" alt="决策树分支总结"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令大全</title>
      <link href="/2021/12/08/linux-ming-ling-da-quan/"/>
      <url>/2021/12/08/linux-ming-ling-da-quan/</url>
      
        <content type="html"><![CDATA[<p>虽然每天都会接触Linux系统, 尤其是使用了Mac之后, 每天都是工作在黑色背景的命令行环境中. 自己记忆力不好, 很多有用的Linux命令不能很好的记忆, 现在逐渐总结一下, 以便后续查看.</p><h5 id="Linux关机-重启"><a href="#Linux关机-重启" class="headerlink" title="Linux关机,重启"></a>Linux关机,重启</h5><ul><li>关机<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">shutdown -h now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>重启<pre class="line-numbers language-none"><code class="language-none">shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="查看系统-CPU信息"><a href="#查看系统-CPU信息" class="headerlink" title="查看系统,CPU信息"></a>查看系统,CPU信息</h5><ul><li>查看系统内核信息<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">uname -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看系统内核版本<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">cat /proc/version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看当前用户环境变量<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">envcat /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>查看有几个逻辑cpu, 包括cpu型号<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看有几颗cpu,每颗分别是几核<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">cat /proc/cpuinfo | grep physical | uniq -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看当前CPU运行在32bit还是64bit模式下, 如果是运行在32bit下也不代表CPU不支持64bit<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">getconf LONG_BIT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit<pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="搭建虚拟环境"><a href="#搭建虚拟环境" class="headerlink" title="搭建虚拟环境"></a>搭建虚拟环境</h5><ul><li>创建虚拟名称为”tensorflow”，Python版本为3.6<pre class="line-numbers language-conda" data-language="conda"><div class="caption"><span>create -n tensorflow python</span></div><code class="language-conda"> ```-  激活虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>conda activate tensorflow <pre class="line-numbers language-none"><code class="language-none">-  关闭虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>conda deactivate <pre class="line-numbers language-none"><code class="language-none">- 检查可使用的虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>conda info –envs<pre class="line-numbers language-none"><code class="language-none">- 卸载虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>conda remove –name tensorflow –all <pre class="line-numbers language-none"><code class="language-none">- 在Linux中使用Anaconda安装指定文件,以Torch为例<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>anaconda search -t conda torch <pre class="line-numbers language-none"><code class="language-none">- 可以看到如下所示：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>Esri/pytorch              |    1.8.2 | conda           | linux-64, win-64 | py3.8_cuda101_cudnn7_0, py3.6_cuda11.1_cudnn8_0, py3.7_cuda101_cudnn7_0, py3.6_cuda101_cudnn7_0, py3.8_cuda11.1_cudnn8_0, py3.6_cuda10.0.130_cudnn7.5.1_0, py3.7_cuda11.1_cudnn8_0, py3.6_cuda11.1_cudnn8.0.5_0, py3.7_cuda11.1_cudnn8.0.5_0, py3.7_cuda10.0.130_cudnn7.6.3_0, py3.7_cuda11.1_cudnn8.1_1, py3.8_cuda10.0.130_cudnn7.6.3_0, py3.9_cuda11.1_cudnn8_0, py3.6_cuda11.1_cudnn8.1_1, py3.6_cuda100_cudnn7_1, py3.6_cuda10.1.243_cudnn7.6.3_0, py3.8_cuda10.1.243_cudnn7.6.3_0, py3.9_cuda11.1_cudnn8.1_1, py3.8_cuda11.1_cudnn8.1_1, py3.8_cuda11.1_cudnn8.0.5_0, py3.6_cuda10.0.130_cudnn7.6.3_0, py3.7_cuda11.2_cudnn8.1_1, py3.7_cuda10.1.243_cudnn7.6.3_0, py3.9_cuda11.1_cudnn8.0.5_0···· <pre class="line-numbers language-none"><code class="language-none">- 接着，使用show指令来查看此包的详细情况<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> anaconda show  Esri/pytorch<pre class="line-numbers language-none"><code class="language-none">- 根据提示，我们使用如下的命令进行安装<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>conda install –channel <a href="https://conda.anaconda.org/Esri">https://conda.anaconda.org/Esri</a> pytorch <pre class="line-numbers language-none"><code class="language-none">- 选择y(yes)，然后等待安装，等安装完成后我们可以通过python中导入的方式进行检查。##### 深度学习框架等相关操作- 从文本中(vim)中第n到m行的文件复制到另外一个文本中的命令为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>n,mw!./vhost/res.help.com.conf <pre class="line-numbers language-none"><code class="language-none">- 将file1.txt和file2.txt合并到file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>cat file1.txt file2.txt &gt; file.txt <pre class="line-numbers language-none"><code class="language-none">-将file1.txt追加到file2.txt的末尾<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>cat file1.txt &gt;&gt; file2.txt<pre class="line-numbers language-none"><code class="language-none">- 从文本中(vim)中第n到m行的文件追加到另外一个文本末尾的命令为：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>n,m w! &gt;&gt;./vhost/res.help.com.conf <pre class="line-numbers language-none"><code class="language-none">-计算文本行数：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>wc –l filename(计算文本行数)<pre class="line-numbers language-none"><code class="language-none">- 查看看gpu使用情况<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>nvidia-smi <pre class="line-numbers language-none"><code class="language-none">- 搭建虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>conda create -n tensorflow python=3.6 or 2.7 <pre class="line-numbers language-none"><code class="language-none">- 激活虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>conda activate pytorch <pre class="line-numbers language-none"><code class="language-none">- 关闭虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>conda deactivate <pre class="line-numbers language-none"><code class="language-none">-卸载虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> conda remove –name tensorflow –all <pre class="line-numbers language-none"><code class="language-none">-引入tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> import tensorflow as tf <pre class="line-numbers language-none"><code class="language-none">-用Tensorflow测试能否用cuda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> sess = tf.Session(config=tf.ConfigProto(log_device_placement=True)) <pre class="line-numbers language-none"><code class="language-none">- 查看tensorflow版本：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> tf.<strong>version</strong> <pre class="line-numbers language-none"><code class="language-none">-卸载tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> pip uninstall tensorflow <pre class="line-numbers language-none"><code class="language-none">-查看虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> conda info –envs <pre class="line-numbers language-none"><code class="language-none">- Top命令查看运行进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a href="https://blog.csdn.net/dxl342/article/details/53507673">https://blog.csdn.net/dxl342/article/details/53507673</a><pre class="line-numbers language-none"><code class="language-none">-无法获得锁---找出含有apt-get的进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> ps  -aux <pre class="line-numbers language-none"><code class="language-none">``` sudo kill PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><pre><code>使用screen命令</code></pre><pre class="line-numbers language-none"><code class="language-none">screen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>使用screen查看进行<pre class="line-numbers language-none"><code class="language-none">screen –ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>创建screen<pre class="line-numbers language-none"><code class="language-none">screen -S han<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>返回进程<pre class="line-numbers language-none"><code class="language-none">screen -r 3985<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre><code>退出快捷键为：</code></pre><pre class="line-numbers language-none"><code class="language-none">CTRL+A+D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>文件运行时加权限<pre class="line-numbers language-none"><code class="language-none">chmod a+x 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看Ubuntu版本<pre class="line-numbers language-none"><code class="language-none">lsb_release –a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看Ubuntu位数<pre class="line-numbers language-none"><code class="language-none">getconf LONG_BIT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>查看配置：</code></pre><pre class="line-numbers language-none"><code class="language-none">df –h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>查看CPU是几核：</code></pre><pre class="line-numbers language-none"><code class="language-none">cat /proc/cpuinfo |grep "cores"|uniq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>查看位数：</code></pre><pre class="line-numbers language-none"><code class="language-none">sudo uname --m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>ubuntu16.04安装torch</code></pre><pre class="line-numbers language-none"><code class="language-none">http://blog.csdn.net/KGzhang/article/details/72884126<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>升级python</code></pre><pre class="line-numbers language-none"><code class="language-none">conda updata python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>更新python版本</code></pre><pre class="line-numbers language-none"><code class="language-none">conda install python==x.x.x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>直接下载包：</code></pre><pre class="line-numbers language-none"><code class="language-none">git clone xxx(具体下载内容的路径)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>指定服务器：</code></pre><pre class="line-numbers language-none"><code class="language-none">CUDA_VISIBLE_DEVICES=7,1 python xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>命令行可查看当前anaconda的版本</code></pre><pre class="line-numbers language-none"><code class="language-none">conda –version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>测试pytorch安装是否成功(在Ipython中)</code></pre><pre class="line-numbers language-none"><code class="language-none">import torch \ import torchvision<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>torch能否使用GPU<pre class="line-numbers language-none"><code class="language-none">print(torch.cuda.is_available())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>将file1.txt追加到file2.txt的末尾</code></pre><pre class="line-numbers language-none"><code class="language-none">cat file1.txt &gt;&gt; file2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>如把文件a.txt得命名为b.txt</code></pre><pre class="line-numbers language-none"><code class="language-none">mv a.txt b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>在ubuntu中启动jupyter notebook</code></pre><pre class="line-numbers language-none"><code class="language-none">jupyter notebook --ip=0.0.0.0 --port=8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li>在ubuntu中安装nccl<pre class="line-numbers language-none"><code class="language-none">conda install -c anaconda nccl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>在ubuntu中安装pytoch</code></pre><pre class="line-numbers language-none"><code class="language-none">conda install pytorch torchvision cuda80 -c pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>测试是否安装成功pytorch</code></pre><pre class="line-numbers language-none"><code class="language-none">import torchprint(torch.cuda.is_available())    output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li>jupyter命令把.ipynb文件转化为.py文件—打开进入对应目录<pre class="line-numbers language-none"><code class="language-none">jupyter nbconvert --to script *.ipynb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>替换文本中的字符串</code></pre><pre class="line-numbers language-none"><code class="language-none">%s/well/good/g（等同于 :g/well/s//good/g） 替换每一行中所有 well 为 good<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>查看cuda安装路径：</code></pre><pre class="line-numbers language-none"><code class="language-none">whereis cuda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li>去除文本中字符前后的空格并将每一个字之间的编辑而替换为空格<pre class="line-numbers language-none"><code class="language-none">sed ‘s/ //g; s/\B /g’ ./test.txt &gt; test-txt.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>说明:’s/ //g’表示去除文本中已有的空格。’s/\B /g’将每个字之间的边界替换为空格<ul><li><pre><code>验证theano是否安装成功</code></pre><pre class="line-numbers language-none"><code class="language-none">python -c "import theano;theano.test()"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>查看具体用户所对应的进程</code></pre><pre class="line-numbers language-none"><code class="language-none">ps –u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li>验证能否使用gpu版本的tensorflow<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import tensorflow as tfimport osos.environ['TF_CPP_MIN_LOG_LEVEL']='2'print(tf.__version__)a = tf.constant(1.)b = tf.constant(2.)print(a+b)print('GPU:', tf.test.is_gpu_available())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><pre><code>查看某一个用户的进程例如root</code></pre><pre class="line-numbers language-none"><code class="language-none">ps –u root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>查看指定的PID(33799)</code></pre><pre class="line-numbers language-none"><code class="language-none">ps –f –p 33799<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><pre><code>如何使用pytorch运行时出现错误，可以使用@torchsnooper.snoop() 装饰函数可以输出对应的内容出现的错误，如下所示:</code></pre><ul><li><pre><code>nltk下载程序获取资源</code></pre><pre class="line-numbers language-none"><code class="language-none">import nltknltk.download('stopwords')import nltknltk.download('punkt')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言(Linux) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测任务</title>
      <link href="/2021/11/27/mu-biao-jian-ce-ren-wu/"/>
      <url>/2021/11/27/mu-biao-jian-ce-ren-wu/</url>
      
        <content type="html"><![CDATA[<h4 id="目标检测任务"><a href="#目标检测任务" class="headerlink" title="目标检测任务"></a>目标检测任务</h4><h4 id="一、PixelLib"><a href="#一、PixelLib" class="headerlink" title="一、PixelLib"></a>一、<a href="https://github.com/ayoolaolafenwa/PixelLib#Instance-Segmentation-of-objects-in-Images-and-Videos-with-5-Lines-of-Code">PixelLib</a></h4><h4 id="二、ImageAI"><a href="#二、ImageAI" class="headerlink" title="二、ImageAI"></a>二、<a href="https://github.com/OlafenwaMoses/ImageAI">ImageAI</a></h4>]]></content>
      
      
      <categories>
          
          <category> 工具收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的基本语法格式汇总</title>
      <link href="/2021/11/26/mysql-de-ji-ben-yu-fa-ge-shi-hui-zong/"/>
      <url>/2021/11/26/mysql-de-ji-ben-yu-fa-ge-shi-hui-zong/</url>
      
        <content type="html"><![CDATA[<h4 id="Mysql-的基本语法格式汇总"><a href="#Mysql-的基本语法格式汇总" class="headerlink" title="Mysql 的基本语法格式汇总"></a>Mysql 的基本语法格式汇总</h4><h5 id="1、Mysql-先判断是否存在此表，如果不存在则创建此表-字段、字段类型、字段长度、字段描述、表描述、表编码、多列唯一索引。"><a href="#1、Mysql-先判断是否存在此表，如果不存在则创建此表-字段、字段类型、字段长度、字段描述、表描述、表编码、多列唯一索引。" class="headerlink" title="1、Mysql 先判断是否存在此表，如果不存在则创建此表:字段、字段类型、字段长度、字段描述、表描述、表编码、多列唯一索引。"></a>1、Mysql 先判断是否存在此表，如果不存在则创建此表:字段、字段类型、字段长度、字段描述、表描述、表编码、多列唯一索引。</h5><pre class="line-numbers language-Mysql" data-language="Mysql"><code class="language-Mysql">CREATE TABLEIFNOT EXISTS WEWWWW (id INT ( 11 ) COMMENT '用户id',INDEX ( id ),FIE_NAME VARCHAR ( 25 ) COMMENT '字段名称',FIE_DES VARCHAR ( 25 ) COMMENT '字段描述',FIE_TYPE VARCHAR ( 25 ) COMMENT '字段类型',FIE_LEN INT ( 100 ) COMMENT '字段长度',IND_FLAG VARCHAR ( 25 ) COMMENT '是否为索引',TAB_NAME VARCHAR ( 25 ) COMMENT '表名',UNIQUE INDEX ( TAB_NAME, FIE_NAME, IND_FLAG ),TAB_DES VARCHAR ( 11 ) COMMENT '表描述') COMMENT = '测试表头信息' CHARSET = utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、Mysql-查询表格。"><a href="#2、Mysql-查询表格。" class="headerlink" title="2、Mysql 查询表格。"></a>2、Mysql 查询表格。</h5> <pre class="line-numbers language-Mysql" data-language="Mysql"><code class="language-Mysql">SELECT * FROM DEV_TAB_D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3、Mysql-删除表格。"><a href="#3、Mysql-删除表格。" class="headerlink" title="3、Mysql 删除表格。"></a>3、Mysql 删除表格。</h5><pre class="line-numbers language-Mysql" data-language="Mysql"><code class="language-Mysql">DROP TABLE EDM_COM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4、Mysql插入数据。"><a href="#4、Mysql插入数据。" class="headerlink" title="4、Mysql插入数据。"></a>4、Mysql插入数据。</h5> <pre class="line-numbers language-Mysql" data-language="Mysql"><code class="language-Mysql">INSERT INTO DEV_TAB_H ( id, TAB_NAME,TAB_DES,FIE_NAME,FIE_DES,FIE_TYPE,FIE_LEN,IND_FLAG)                      VALUES                      ( '4', 'EDM_COM','产品物料清单格','field4','任务数量4','INT',25,'Y');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="5、获取所有表结构TABLES。"><a href="#5、获取所有表结构TABLES。" class="headerlink" title="5、获取所有表结构TABLES。"></a>5、获取所有表结构TABLES。</h5><pre class="line-numbers language-Mysql" data-language="Mysql"><code class="language-Mysql">SELECT  *  FROM information_schema.TABLES WHERE  TABLE_SCHEMA='数据库名';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言(mysql) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下查看某个端口被谁占用并且关闭该端口</title>
      <link href="/2021/11/23/windows-xia-cha-kan-mou-ge-duan-kou-bei-shui-zhan-yong-bing-qie-guan-bi-gai-duan-kou/"/>
      <url>/2021/11/23/windows-xia-cha-kan-mou-ge-duan-kou-bei-shui-zhan-yong-bing-qie-guan-bi-gai-duan-kou/</url>
      
        <content type="html"><![CDATA[<p>Windows下查看某个端口被谁占用并且关闭该端口</p><h5 id="1、打开命令窗口-以管理员身份运行"><a href="#1、打开命令窗口-以管理员身份运行" class="headerlink" title="1、打开命令窗口(以管理员身份运行)"></a>1、打开命令窗口(以管理员身份运行)</h5><pre class="line-numbers language-Windows" data-language="Windows"><code class="language-Windows">开始—-&gt;运行—-&gt;cmd，或者是 window+R 组合键，调出命令窗口。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/11/23/9eUt3D57EBqnJhd.jpg" alt="以管理员方式打开窗口"></p><h4 id="2、查找所有运行的端口"><a href="#2、查找所有运行的端口" class="headerlink" title="2、查找所有运行的端口"></a>2、查找所有运行的端口</h4><p>  输入如下命令:<br> </p><pre class="line-numbers language-Windows" data-language="Windows"><code class="language-Windows">netstat -ano<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  <img src="https://i.loli.net/2021/11/23/ho2afFgHCiwmtLx.jpg" alt="列出所有端口的使用情况"><p></p><h4 id="3、查看被占用端口对应的-PID"><a href="#3、查看被占用端口对应的-PID" class="headerlink" title="3、查看被占用端口对应的 PID"></a>3、查看被占用端口对应的 PID</h4><p>  输入如下命令:<br>  </p><pre class="line-numbers language-Windows" data-language="Windows"><code class="language-Windows">netstat -aon|findstr "9091"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  <a href="https://imagelol.com/image/IZlgk5"><img src="https://s6.jpg.cm/2021/11/23/IZlgk5.jpg" alt="回车执行该命令，最后一位数字就是 PID, 这里是19416"></a><p></p><h4 id="4、查看指定-PID-的进程"><a href="#4、查看指定-PID-的进程" class="headerlink" title="4、查看指定 PID 的进程"></a>4、查看指定 PID 的进程</h4><p>  输入如下命令:</p><pre class="line-numbers language-Windows" data-language="Windows"><code class="language-Windows">tasklist|findstr "19416"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <a href="https://imagelol.com/image/IZlhPu"><img src="https://s6.jpg.cm/2021/11/23/IZlhPu.jpg" alt="查看指定 PID 的进程"></a><br>  此时可以看出端口号为“19416”的程序被 java.exe占用。</p><h4 id="5、结束进程"><a href="#5、结束进程" class="headerlink" title="5、结束进程"></a>5、结束进程</h4><p>强制（/F参数）杀死 pid 为 19416 的所有进程包括子进程（/T参数）：<br>输入如下命令:<br>输入如下命令:</p><pre class="line-numbers language-Windows" data-language="Windows"><code class="language-Windows">taskkill /T /F /PID 19416<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <a href="https://imagelol.com/image/IZ6PBW"><img src="https://s6.jpg.cm/2021/11/23/IZ6PBW.jpg" alt="已终止进程"></a></p>]]></content>
      
      
      <categories>
          
          <category> 工具收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git推拉文件步骤</title>
      <link href="/2021/11/23/git-tui-la-wen-jian-bu-zou/"/>
      <url>/2021/11/23/git-tui-la-wen-jian-bu-zou/</url>
      
        <content type="html"><![CDATA[<h4 id="1、快速实现远程上传"><a href="#1、快速实现远程上传" class="headerlink" title="1、快速实现远程上传"></a>1、快速实现远程上传</h4><ul><li>1、初始化<pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>2、添加项目<pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>3、提交注释<pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git commit -m "first commit"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>4、链接远端链接<pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git remote add origin https://gitee.com/guoaibin/build-nginx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>5、向源端推送<pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="2、解决问题措施"><a href="#2、解决问题措施" class="headerlink" title="2、解决问题措施"></a>2、解决问题措施</h4><ul><li><p>1、如果第四步出现错误(fatal: remote origin already exists.)，则先删除远程 Git 仓库。</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2、再添加远程 Git 仓库。</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git remote add origin https://gitee.com/guoaibin/build-nginx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>3、 获取远程代码并与本地一致。</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>4、不慎多次提交后出现 (master|REBASE 1/2)。</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git rebase --abort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>5 把远程分支上的内容都拉取到本地。</p> <pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git pull origin develop(远程分支名称)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>6 把本地的master 仓库名称修改为远端的 main (Git 在 push 的时候报的错误：error: src refspec xxx does not match any / error: failed to push some refs to ….)</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git branch -m master main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>7 git上查看冲突文件的具体信息</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>8 git看到分支的合并情况</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git log --graph --pretty=oneline --abbrev-commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>9 切换分支</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git switch master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>10 在本地分支合并</p><pre class="line-numbers language-Git" data-language="Git"><code class="language-Git">git merge master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle的基本语法格式汇总</title>
      <link href="/2021/11/16/oracle-de-ji-ben-yu-fa-ge-shi-hui-zong/"/>
      <url>/2021/11/16/oracle-de-ji-ben-yu-fa-ge-shi-hui-zong/</url>
      
        <content type="html"><![CDATA[<p>最近由于工作原因不得不接触关于不同数据库的操作语法，为此本人将相关语法进行汇总，便于后续工作中使用以及他人学习，有需要的直接复制粘贴即可使用。</p><h5 id="基于Oracle的语法"><a href="#基于Oracle的语法" class="headerlink" title="基于Oracle的语法"></a>基于Oracle的语法</h5><ul><li><p>Oracle查询</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">SELECT * FROM 数据表 WHERE 关联字段='具体的值'    --例如：SELECT * FROM DEV_DBS WHERE USR_NAME='dev'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Oracle 删除数据表</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">DROP TABLE 表名  -- 例如   DROP TABLE PAC_ORDER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Oracle创建数据表</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">CREATE TABLE 表名 ( 字段 类型 (大小 ), 字段 类型 ( 大小 ) )  --例如:CREATE TABLE TABLE_TEST ( ORD_QTY NUMBER ( 20 ), DEP_CODE nvarchar2 ( 5 ) )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Oracle添加字段注解</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">COMMENT ON COLUMN 表名.字段 IS 注释'  --例如: COMMENT ON COLUMN TABLE_TEST.ORD_QTY IS '测试'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Oracle添加表的描述</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">COMMENT ON TABLE 表名 IS '表描述'   --例如: COMMENT ON TABLE TABLE_TEST IS '个人信息'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Oracle添加唯一索引</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">CREATE UNIQUE INDEX 设定的索引名 ON 表名 ( 字段1,字段2)  --例如: CREATE UNIQUE INDEX IDX_PROCESSVERSION_PROCID ON TABLE_TEST ( ORD_QTY,DEP_CODE)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-Oracle 判断是否存在数据表</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">SELECT COUNT(*) FROM  USER_TABLES WHERE TABLE_NAME =UPPER('表名')   --例如:SELECT COUNT(*) FROM  USER_TABLES WHERE TABLE_NAME =UPPER('PAC_ORDER')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Oracle删除表中的字段</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">ALTER TABLE 表名 DROP (字段)  --例如: ALTER TABLE PAC_ORDER DROP (PON)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Oracle 修改某个字段的值</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">UPDATE 表名 SET 待修改字段 = '具体的值' WHERE 条件字段='值'  //UPDATE DEV_DBS SET NAME = 'test' WHERE USR_NAME='dev'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新增字段并赋予默认值</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">ALTER TABLE   表名ADD (字段 类型(长度) default '默认值' not null) //例如：alter table DBS_TYPEadd (NAME varchar2(30) default '2' not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Oracle修改某个字段的值</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">Alter table 表名 rename column 原字段名称 to 新字段名称  // 例如：alter table cxj rename column DEP_NAME to NEW_DEP_NAME  将数据表cxj中字典DEP_NAME更改为NEW_DEP_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新Oracle中的字段属性</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">Alter table 表名 modify (字段 字段类型(长度)); //例如：Alter table cxj modify (DEP_NAME NVARCHAR2(5));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取Oracle数据表中字段的属性值</p><pre class="line-numbers language-Oracle" data-language="Oracle"><code class="language-Oracle">select 列名,类型,长度,DATA_PRECISION ,DATA_SCALE from all_tab_columns  where table_name=upper('表名') AND COLUMN_NAME='字段名称' //  select COLUMN_NAME,data_type,data_length,DATA_PRECISION ,DATA_SCALE from all_tab_columns  where table_name=upper('SHA') AND COLUMN_NAME='DEP_CODE'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言(oracle) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串速查表</title>
      <link href="/2021/11/08/python-zi-fu-chuan-su-cha-biao/"/>
      <url>/2021/11/08/python-zi-fu-chuan-su-cha-biao/</url>
      
        <content type="html"><![CDATA[<p>Python字符串速查表</p><h4 id="一、创建字符串"><a href="#一、创建字符串" class="headerlink" title="一、创建字符串"></a>一、创建字符串</h4><p>在Python中处理文本数据是使用str对象，也成为字符串，字符串是由Unicode码构成的不可变序列，字符串字面值有多种不同的写法：</p><ul><li>① 单引号：“允许包含有’双’引号”；</li><li>② 双引号：“允许包含’单’引号”；</li><li>③ 三重引号：’””‘三重引号””,”””三重双引号”””;<br>使用三重引号的字符串可以跨越多行—其中所有的空白字符都将包含在改字符串字面值中。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1<span class="token operator">=</span><span class="token string">"lemon"</span>s2<span class="token operator">=</span><span class="token string">"Python"</span>s3<span class="token operator">=</span><span class="token triple-quoted-string string">"""Hello  world"""</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token comment"># 输出结果如下</span>lemonPythonHello  world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、访问字符串中的值"><a href="#二、访问字符串中的值" class="headerlink" title="二、访问字符串中的值"></a>二、访问字符串中的值</h4><p> 字符串(String)支持用切片的方式来访问字符串中的值<br> </p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">s2="Python数据之美"print(s2[0])print(s2[5:])# 输出的结果如下Pn数据之美<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>打印的字符串里包含\，因为它是转义字符，所以打印这字符串，最前面加个r<p></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r".\data"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r"D:no"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"D:\no"</span><span class="token punctuation">)</span><span class="token comment"># 输出如下所示</span><span class="token punctuation">.</span>\dataD<span class="token punctuation">:</span>noD<span class="token punctuation">:</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、字符串格式化"><a href="#三、字符串格式化" class="headerlink" title="三、字符串格式化"></a>三、字符串格式化</h4><p> Python支持格式化字符串的输出，一般有三种方式可以实现，包括format、%、f-string。<br> 字符串格式化是Python字符串内容的重要组成部分，应用广泛：</p><ul><li>① format方法</li></ul><pre class="line-numbers language-Python3" data-language="Python3"><code class="language-Python3">name="Lemon"age=18print("My name is {0},age is {1}".format(name,age))# 输出如下所示：My name is Lemon,age is 18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>② %方法</li></ul><pre class="line-numbers language-Python3" data-language="Python3"><code class="language-Python3">name="Lemon"age=18print("My name is %s,age is %s"%(name,age))# 输出如下所示：My name is Lemon,age is 18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>③ f-string方法</li></ul><pre class="line-numbers language-Python3" data-language="Python3"><code class="language-Python3">name="Lemon"age=18# python3.6以上的版本支持如下格式print(f"My name is {name},age is {age}")# 输出如下所示：My name is Lemon,age is 18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、数字格式化"><a href="#四、数字格式化" class="headerlink" title="四、数字格式化"></a>四、数字格式化</h4><p>在进行字符串格式化时，经常遇到需要将数字转换为字符串，并且要按照某种特定的格式显示。数字格式转为字符串，可以用format，%或f-string方法实现<br>下面的数字格式化，主要以format方法来举例子。</p><ul><li>① 保留两位小数</li><li>② 百分比和千分位格式</li><li>③ 对齐方式</li><li>④ 补零或字符</li><li>⑤ 补正负符号</li></ul><p>1、保留两位小数:</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">n1=3.1415926n2=31415.926n3=0.3141n4=21print("保留两位小数：%.2f"%(n1))print("保留两位小数:{:.2f}".format(n1))print(f"保留两位小数:{n1:.2f}")# 输出结果为保留两位小数：3.14保留两位小数:3.14保留两位小数:3.14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、百分比和千分位格式</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">n1=3.1415926n2=31415.926n3=0.3141n4=21print("百分比格式:{:.2%}".format(n3))print("既有千分位分隔符又有小数位:{:,.2f}".format(n2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、对齐方式<br>字符串对齐格式，设置默认宽度为8</p><pre class="line-numbers language-Python3" data-language="Python3"><code class="language-Python3">n1=3.1415926n2=31415.926n3=0.3141n4=21print("右对齐:{:&gt;8}".format(n4))print("左对齐:{:&lt;8}".format(n4))print("居中{:^8}".format(n4))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、数字补零， 或者补特定符号， 比如‘ x ’</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">print(' 左边补零： {:0&gt;4}'.format(n4)) # 左边补0 ， 宽度为4print(' 右边补x ： {:x&lt;5}'.format(n4)) # 右边补x ， 宽度为5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、带符号保留小数点后两位</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3"># "+"print(' 正数前加正号， 负数前加负:')print('{:+.2f}'.format(n1))print('{:+.2f}'.format(n2))# "-"print(' 正数前无符号， 负数前加负号:')print('{:-.2f}'.format(n1))print('{:-.2f}'.format(n2))# 空格print(' 正数前加空格， 负数前加负号:')print('{: .2f}'.format(n1))print('{: .2f}'.format(n2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、字符串的基本运算"><a href="#五、字符串的基本运算" class="headerlink" title="五、字符串的基本运算"></a>五、字符串的基本运算</h4><ul><li>① 拼接字符串</li></ul><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s1 = 'Hello, Dear friends, 's2 = 'welcome to PyDataLab '# 字符串拼接print(s1 + s2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>② 字符串的大小写转换</li></ul><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s="hello, welcome to PyDataLab"print("每个单词的首字母大写",s.title())print("段落的首字母都大写",s.capitalize())print("所有字母小写",s.lower())print("所有字母大写",s.upper())print("大写转小写，小写转大写",s.swapcase())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="六、字符串分割"><a href="#六、字符串分割" class="headerlink" title="六、字符串分割"></a>六、字符串分割</h4><p>① 字符串的分割，通常有split 和partition 系列方法。</p><ul><li>split 系列：split 系列方法包括split() 、rsplit() 、splitlines() 等。split() 将一个字符串分隔成多个字符串组成的列表，不含分隔符; rsplit() 的功能与split() 类似，只不过是从字符串最后面开始分割；splitlines() 按照(\n, \r, \r\n 等) 分隔，分割成列表。</li></ul><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s = 'hello, welcome to PyDataLab'print("按照空格分割:",s.split())print("按照某个字符分割",s.split("e"))print("按照某个字符分割，只分割一次",s.split("e",1))print("按照某个字符分割，只分割一次",s.rsplit("e",1))print("去掉换行符， 以换行符分割成列表","1+2\n3+4".splitlines())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>partition 系列：partition 系列方法包括partition() 和rpartition() 。partition() 根据指定的分隔符(sep) 将字符串进行分割，从字符串左边开始索引分隔符sep, 索引到则停止索引，返回的是一个包含三个元素的元组(tuple)，即(head, sep, tail)。rpartition() 的功能与partition() 类似，只不过是从字符串最后面开始分割。</li></ul><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s = 'hello, welcome to PyDataLab'print("遇到第一个分隔符后就停止索引",s.partition("e"))print("没有遇到分隔符， 返回原字符串和两个空字符串",s.partition("f"))print("遇到第一个分隔符后就停止索引",s.rpartition("e"))print("没有遇到分隔符， 返回两个空字符串和原字符串",s.rpartition("f"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>返回类型</th><th>是否包含分隔符</th></tr></thead><tbody><tr><td>split</td><td>系列方法list(列表)</td><td>否</td></tr><tr><td>partition 系列方法</td><td>tuple(元组)</td><td>是</td></tr></tbody></table><p>② 去除字符串两边的空白</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s = 'hello, welcome to PyDataLab'print("去除字符串两端的空白",s.rsplit())print("去除字符串左侧的空白",s.lstrip())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>③ 字符串编码</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s1 = 'Python 数据之道's2 = s1.encode(encoding='utf-8')print("编码encoder",s2)s3=s2.decode(encoding="utf-8")print("解码decoder",s3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="八、is相关方法"><a href="#八、is相关方法" class="headerlink" title="八、is相关方法"></a>八、is相关方法</h4><p>相关的方法有isdigit() , isdecimal() , isnumeric()</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s4 = 'Hi PyDataLab's5 = '2021's6 = "Lemon2069"print(s4.isdigit())print(s5.isdecimal())print(s6.isnumeric())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>True</th><th>False</th><th>Error</th></tr></thead><tbody><tr><td>isdigit()</td><td>Unicode 数字，byte 数字（单字节），全角数字（双字节），罗马数字</td><td>汉字数字</td><td>无</td></tr><tr><td>isdecimal()</td><td>Unicode 数字，全角数字（双字节）</td><td>罗马数字，汉字数字</td><td>byte 数字（单字节)</td></tr><tr><td>isnumeric()</td><td>Unicode 数字，全角数字（双字节），罗马数字，汉字数字</td><td>无</td><td>byte 数字（单字节)</td></tr></tbody></table><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s= 'PyDataLab'print("判断字符串内全部是否为数字",s.isdigit())print("判断字符串内全部是否为字符",s.isalpha())print("判断字符串内由一个或多个空格组成",s.isspace())print("判断字符串内全部 为数字和字符",s.isalnum())print("判断字符串全部由大写组成",s.isupper())print("判断字符串全部由小写组成",s.islower())print("判断字符串形式为驼峰命名",s.istitle())print("判断是什么类型",isinstance(s,str))print(s,(str,int))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>isinstance(obj,type)，其中type 可选类型为：int，float，bool，complex，str，bytes，unicode，list，dict，set，tuple并且type 可以为一个元组（tuple）。</p><pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">s= 'PyDataLab'print("统计相同字符的个数",s.count("a"))print("计算字符串的长度",len(s))print("字符替换",s.replace('l',"L"))print("限定替换次数不超过max",s.replace('l',"L",2))print("判断是否以某字符开头， 区分大小写",s.startswith("H"))print("判断是否以某字符开头",s.startswith("a"))print("判断是否以某字符结尾",s.endswith("d"))print("判断是否以某字符结尾， 区分大小写",s.endswith("d"))print("用--分割字符串s中的每个单词","--".join(s))print("返回字符串中最大的字符",max(s))print("返回字符串中最小的字符",min(s))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言(Python) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SpringBoot框架MyBatis快速入门搭建运行一个访问数据源的应用程序</title>
      <link href="/2021/11/05/ji-yu-springboot-kuang-jia-mybatis-kuai-su-ru-men-da-jian-yun-xing-yi-ge-fang-wen-shu-ju-yuan-de-ying-yong-cheng-xu/"/>
      <url>/2021/11/05/ji-yu-springboot-kuang-jia-mybatis-kuai-su-ru-men-da-jian-yun-xing-yi-ge-fang-wen-shu-ju-yuan-de-ying-yong-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><ul><li>Java环境：1.8版本</li><li>开发工具： Intellij IDEA</li></ul><h3 id="二-简单应用"><a href="#二-简单应用" class="headerlink" title="二 简单应用"></a>二 简单应用</h3><ul><li>1.创建项目<br><img src="https://i.loli.net/2021/11/05/TCJ7HIpRZlKh1Wm.png" alt="IDEA中创建maven"></li><li>2.填写项目名称和项目存放路径，点击Finish:<br><img src="https://i.loli.net/2021/11/05/T5kL4hXEjBIWxc2.png" alt="IDEA中写maven的项目名称和路径"></li><li>3.进入项目界面如下(因为本人已经建立好了，所以显示有对应文件)：<br><img src="https://i.loli.net/2021/11/05/y19N8WqOdIQMenx.png" alt="初始化项目文件"></li></ul><h3 id="三、熟悉的HelloWorld"><a href="#三、熟悉的HelloWorld" class="headerlink" title="三、熟悉的HelloWorld"></a>三、熟悉的HelloWorld</h3><ul><li>先在com.springboot下新建一个Package，命名为controller，再在controller下创建一个HelloWorldController类，如下：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.springboot.controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * @author shajiu * @date 2021/11/5 13:48 */@RestControllerpublic class HelloWorldController {    @GetMapping("/hello")    public String sayHelloWorld() {        System.out.println("测试段!!!");        return "HelloWorld";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>注释@RequestMapping(value = “/hello”)是指定映射的URL，@RestController是将它标注的类中的所有方法返回的json格式的数据转化成视图view。</li><li>运行程序，在DemoApplication.java文件中，运行程序：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.springboot;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * @author shajiu * @date 2021/11/5 13:49 */@SpringBootApplication@MapperScan("com.springboot.mapper")public class DemoApplication {    public static void main(String[] args) {        SpringApplication.run(DemoApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <img src="https://i.loli.net/2021/11/05/iAc9a57nFeNMWvr.png" alt="运行的结果"></li></ul><h3 id="四、使用mybatis连接mysql数据库完成数据访问。"><a href="#四、使用mybatis连接mysql数据库完成数据访问。" class="headerlink" title="四、使用mybatis连接mysql数据库完成数据访问。"></a>四、使用mybatis连接mysql数据库完成数据访问。</h3><p>话不多说直接上代码，具体解释其对应代码中描述。 代码框架结构如下：<br><img src="https://i.loli.net/2021/11/05/q5X1Z2MQ6KCYxEl.png" alt="Demo代码的框架结构图"></p><h5 id="1、在pom-xml文件中添加依赖，直接用如下替换之前的即可："><a href="#1、在pom-xml文件中添加依赖，直接用如下替换之前的即可：" class="headerlink" title="1、在pom.xml文件中添加依赖，直接用如下替换之前的即可："></a>1、在pom.xml文件中添加依赖，直接用如下替换之前的即可：</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rs.cloud.business<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--druid--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--aop--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、修改后缀名为application-yml，直接用如下替换即可"><a href="#2、修改后缀名为application-yml，直接用如下替换即可" class="headerlink" title="2、修改后缀名为application.yml，直接用如下替换即可"></a>2、修改后缀名为application.yml，直接用如下替换即可</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">1234</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /cn<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>oracle<span class="token punctuation">:</span>thin<span class="token punctuation">:</span>@192.168.168.105<span class="token punctuation">:</span>1521<span class="token punctuation">:</span>ZLORANEW    <span class="token key atrule">username</span><span class="token punctuation">:</span> devnew    <span class="token key atrule">password</span><span class="token punctuation">:</span> devpass    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> oracle.jdbc.OracleDriver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> classpath<span class="token important">*:mapper/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、数据访问层"><a href="#3、数据访问层" class="headerlink" title="3、数据访问层"></a>3、数据访问层</h5><ul><li>3.1. UserPO类 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>po</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/11/5 13:34 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 用户ID     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">/**     * 年龄     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">/**     * 性别     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3.2. User类implements了一个Serializable类，该类的作用是序列化。</li><li>3.2.1. UserMapper接口:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/11/5 13:35 */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3.2.2. UserMapper.xml配置文件： <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        mapper的namespace指定了该xml文件指向的Mapper接口，里面的sql语句接受传来的username数据进行数据访问。--&gt;</span><span class="token comment">&lt;!--        语句的id="getAgeByUsername"则是对应mapper接口中的方法，resultType="int"指定本次数据访问的数据返回类型。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springboot.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springboot.po.UserPO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>USERNAME<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PASSWORD<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AGE<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SEX<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        ID,USERNAME,PASSWORD,AGE,SEX    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAgeByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT age FROM spring_boot_demo    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    &lt;select id="getNameByUsername" parameterType="com.springboot.po.UserPO" resultMap="ResultMap"&gt;--&gt;</span><span class="token comment">&lt;!--        SELECT * from ${UserPO.username}--&gt;</span><span class="token comment">&lt;!--    &lt;/select&gt;--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="4、业务逻辑层"><a href="#4、业务逻辑层" class="headerlink" title="4、业务逻辑层"></a>4、业务逻辑层</h5><ul><li>4.1、UserService类 <pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span> <span class="token comment">/**  * @author shajiu  * @date 2021/11/5 13:39  */</span> <span class="token annotation punctuation">@Resource</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> <span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>4.2、UserServiceImpl类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/11/5 13:47 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token comment">//通过@Autowired注解获得自动注入的userMapper实现类，在重写的方法中进行调用，获得数据。</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getAgeByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5、页面展示层"><a href="#5、页面展示层" class="headerlink" title="5、页面展示层"></a>5、页面展示层</h4><ul><li>UserController类<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/11/5 13:48 */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/age"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAgeOfUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token string">"springbootdemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6、运行程序"><a href="#6、运行程序" class="headerlink" title="6、运行程序"></a>6、运行程序</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springboot</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/11/5 13:49 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.springboot.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7、测试数据如下，spring-boot-demo："><a href="#7、测试数据如下，spring-boot-demo：" class="headerlink" title="7、测试数据如下，spring_boot_demo："></a>7、测试数据如下，spring_boot_demo：</h4><p><img src="https://i.loli.net/2021/11/05/ui3DtwlQp91vboc.png" alt="spring_boot_demo"></p><h4 id="8、若需源码，请点击这里下载即可直接使用SpringBoot"><a href="#8、若需源码，请点击这里下载即可直接使用SpringBoot" class="headerlink" title="8、若需源码，请点击这里下载即可直接使用SpringBoot"></a>8、若需源码，<a href="https://github.com/Shajiu/JavaLearn/tree/main/SpringBoot">请点击这里下载即可直接使用SpringBoot</a></h4><ul><li>推荐一款好玩的东西<br> <a href="https://www.hxstrive.com/subject/mybatis_plus.htm?id=256">MyBatis Plus 教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言(MyBatis) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语言的应用领域</title>
      <link href="/2021/11/05/python-yu-yan-de-ying-yong-ling-yu/"/>
      <url>/2021/11/05/python-yu-yan-de-ying-yong-ling-yu/</url>
      
        <content type="html"><![CDATA[<h3 id="Python-被广泛的应用于诸多领域，比如："><a href="#Python-被广泛的应用于诸多领域，比如：" class="headerlink" title="Python 被广泛的应用于诸多领域，比如："></a>Python 被广泛的应用于诸多领域，比如：</h3><ul><li>数据科学：数据科学涉及领域很广，涉及到当前火热的人工智能领域。Python 的数据科学包括数据分析、数据<br>可视化、数据挖掘、自然语言处理、机器学习、深度学习等。典型的Python 库有：Numpy，Scipy，Pandas，<br>Matplotlib，Seaborn，Scikit-learn，tensorflow 等。</li><li>云计算：典型应用—— Python 开发的OpenStack</li><li>WEB 开发：众多优秀的WEB 框架，比如：Django、flask、tornado</li><li>网络爬虫：使用Python 可以便捷的编写网络爬虫，从网页上爬取相关信息，常用的Python 库包括：Requests，<br>BeautifulSoup，Scrapy 等。</li><li>系统运维：运维人员必备，slatstack（系统自动化配置和管理工具），Ansible（自动化运维工具）</li><li>图形界面开发： wxPython、PyQT、TKinter</li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言(Python) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多元分享接口汇集</title>
      <link href="/2021/10/27/duo-yuan-fen-xiang-jie-kou-hui-ji/"/>
      <url>/2021/10/27/duo-yuan-fen-xiang-jie-kou-hui-ji/</url>
      
        <content type="html"><![CDATA[<p>&amp;ensp; 本文聚集一些高质量的资源链接，主要包括NLP、CV、API和其他相关工具。来源于知乎、微信公众号和博客等。请有需要的朋友可以直接点击标题即可访问相关资源，在这里也感谢这么多作者的默默分享。</p><h4 id="一、学习资源"><a href="#一、学习资源" class="headerlink" title="一、学习资源"></a>一、学习资源</h4><ul><li><a href="https://www.mindspore.cn/">MindSpore相关学习</a>；<a href="https://app6ca5octe2206.pc.xiaoe-tech.com/detail/v_5ff2c909e4b0c4f2bc4fa320/3?from=p_5ff2c60ae4b0c4f2bc4fa1ff&amp;type=6">MindSpore 分布式自动并行训练</a></li><li><a href="https://courses.d2l.ai/zh-v2/">李沐的动手学深度学习在线课程</a>；<a href="https://zh-v2.d2l.ai/">《动手学深度学习》</a></li><li><a href="https://tf.wiki/">简明的Tensorflow2</a></li><li><a href="https://www.geekxh.com/0.0.%E5%AD%A6%E4%B9%A0%E9%A1%BB%E7%9F%A5/01.html">小浩算法</a></li></ul><h4 id="二、NLP领域"><a href="#二、NLP领域" class="headerlink" title="二、NLP领域"></a>二、NLP领域</h4><ul><li><a href="https://mp.weixin.qq.com/s/3VENXNmV_wTpa6ilN5O80Q">机器翻译前沿 | 微信图片翻译技术进化之路</a></li><li><a href="https://mp.weixin.qq.com/s/7tXrAamSqfnEm0wGUDdPmg">这个开源数据集要在全球扩大中文NLP影响力，你也能来做贡献！</a></li><li><a href="https://mp.weixin.qq.com/s/4KkSHr_DGwZtAk8ELBkg2A">统一对比学习框架？没错它来了。</a></li><li><a href="https://mp.weixin.qq.com/s/fjUhAUnemEctISTUZK0OXQ">EMNLP 2021 | 学习改写非自回归机器翻译的翻译结果</a></li><li><a href="https://mp.weixin.qq.com/s/AReIqYBgA3PsT6ACuB6eDQ">首次开源！一行代码轻松搞定中英文语音识别、合成、翻译核心功能！</a></li><li><a href="https://mp.weixin.qq.com/s/6HBF413yhyrXYBlsE87PiQ">2020深度主动学习综述</a></li><li><a href="https://mp.weixin.qq.com/s/qe4BtuD1gVr5IfVEjwi06w">关于”知识蒸馏”，你想知道的都在这里！</a></li><li><a href="https://mp.weixin.qq.com/s/5MSztaNcULyf0mp-AMSPyw">NLP技术中的Tokenization</a></li><li><a href="https://mp.weixin.qq.com/s/N4Z2Yrpik2SLVjbph7Crrw">年终巨献！哈工大讯飞联合实验室推出模型裁剪工具包TextPruner</a></li><li><a href="https://mp.weixin.qq.com/s/a9q_4yw59rUHINBY9bx_MA">浅谈 NLP 细粒度情感分析（ABSA）</a></li><li><a href="https://mp.weixin.qq.com/s/N8iFQjgbXhtEdrMQwbJJPw">浅谈问题生成（Question Generation）</a></li><li><a href="https://mp.weixin.qq.com/s/q0kdi2emRvJ8FBTfkdbpaQ">Twitch表情中的情绪分析</a></li><li><a href="https://mp.weixin.qq.com/s/pG7DGrDoier06KWDNY5suA">从整体视角了解情感分析、文本分类！</a></li><li><a href="https://mp.weixin.qq.com/s/MKbVoxhO0C1s4fxw3IsYUA">技术总结：NLP技术架构中的词法、句法与语义分析任务演进</a></li><li><a href="https://mp.weixin.qq.com/s/JzNl2-TxWmIBh3VbnqQyHw">文本生成系列之文本编辑</a></li><li><a href="https://mp.weixin.qq.com/s/6361XRiBFCtg5JBdNiaZFQ">句子表示学习前沿技术分享</a></li><li><a href="https://mp.weixin.qq.com/s/nai4KBW98pSHA3w5cm5Dww">强化学习可解释性」最新2022综述</a></li><li><a href="https://mp.weixin.qq.com/s/CrA1XA1kw_nMJGtR135Lmw">2022 | 预训练模型研究十大趋势亮点</a></li><li><a href="https://mp.weixin.qq.com/s/ofEM6WUxOYA8GZy6BqUWZQ">杨宇鸿：腾讯多模态内容理解技术及应用</a></li><li><a href="https://mp.weixin.qq.com/s/Qiu9L_qkELcKDL2uzeeWRg">使用Bert完成实体之间关系抽取</a><br>-<a href="https://mp.weixin.qq.com/s/oU3JvQ40ADQ0KnKTDaQ3SQ">如何提升NLP模型鲁棒性？试试从样本上多做做工作</a><br>-<a href="https://mp.weixin.qq.com/s/ZjvNli-kDx9j_SrSVk_EGw">BERT模型的优化改进方法！</a></li><li><a href="https://mp.weixin.qq.com/s/ZZq6lIyrqKswQhLjfZor6g">低资源场景下知识抽取的综述与展望</a></li><li><a href="https://mp.weixin.qq.com/s/on4O2zCl8MPF9DOIvWVZog">ACL 2022 | DictBERT：一种通过低频词典增强预训练模型表征方法</a></li></ul><h4 id="三、CV领域"><a href="#三、CV领域" class="headerlink" title="三、CV领域"></a>三、CV领域</h4><ul><li><a href="https://mp.weixin.qq.com/s/_-ES_KqQAbk3c2kjrMOAaA">智能结算新方案，这个商品识别算法你值得拥有！</a></li><li><a href="https://mp.weixin.qq.com/s/7Nq3VmnsgXP4O6xSeshmxg">2022，我将入坑爆火的自动驾驶感知…</a></li><li><a href="https://mp.weixin.qq.com/s/gmVrnBdlzP14JkaHLZlfOQ">一文详解Vision Transformer（附代码）</a></li><li></li></ul><h4 id="四、算法类"><a href="#四、算法类" class="headerlink" title="四、算法类"></a>四、算法类</h4><ul><li><a href="https://onnx.ai/">Open Neural Network Exchange</a></li><li><a href="https://mp.weixin.qq.com/s/VpTz0pg3pyaTDgDoGbXfmQ">深入浅出的模型压缩：你一定从未见过如此通俗易懂的Slimming操作</a></li><li><a href="https://mp.weixin.qq.com/s/tuCHFrWjpiYdNyR5y3G6rA">自然语言处理竞赛相关比赛项目、比赛经验、工具、算力平台资源分享</a></li><li><a href="https://mp.weixin.qq.com/s/LglV7qE5vP9hmDL2azvnfg">技术详解：BERT的分词预处理、输入Embedding、中间编码与输出向量解析</a></li><li><a href="https://courses.d2l.ai/zh-v2/">动手学深度学习在线课程</a></li></ul><h4 id="五、工具类"><a href="#五、工具类" class="headerlink" title="五、工具类"></a>五、工具类</h4><ul><li><a href="https://mp.weixin.qq.com/s/1zZV0iHE9LxD9F0veuRCxw">干掉 Postman？测试接口直接生成API文档，这个文档工具真香！</a></li><li><a href="https://mp.weixin.qq.com/s/q1pE3oxn0DHh4vYooz9V0A">3行Python代码提取音乐高潮部分！</a></li><li><a href="https://mp.weixin.qq.com/s/4JI2bIhDZV-FejuYTJBICg">简单好用，分享 4 款 Pandas 自动数据分析神器！</a></li><li><a href="https://mp.weixin.qq.com/s/tt_sJxOPkANLm-xKClkYEA">不用P图！用Python给头像加圣诞帽并制作成可执行软件！</a></li><li><a href="https://mp.weixin.qq.com/s/ydvlYGjM4k8eUMKOxSUTFA">丢弃 Tkinter！几行代码快速生成漂亮 GUI！</a></li><li><a href="https://mp.weixin.qq.com/s/YHPro-PbFi02LpAWdZcrsg">四个 Python 项目管理的构建工具</a></li><li><a href="https://mp.weixin.qq.com/s/vuv2HbNrSfYOYqblGlpEXQ">图解 ElasticSearch 原理,文末送10本书</a></li></ul><h4 id="六、数据可视化"><a href="#六、数据可视化" class="headerlink" title="六、数据可视化"></a>六、数据可视化</h4><ul><li><a href="https://mp.weixin.qq.com/s/etIoeynDEzorj_xcDgK9xg">这5种炫酷的动态图，都是用Python实现的！</a></li><li><a href="https://mp.weixin.qq.com/s/aYemxdeOZLKOlbdsN4yvJQ">用Python制作酷炫的可视化大屏，特简单！</a></li></ul><h4 id="七、演讲及报告"><a href="#七、演讲及报告" class="headerlink" title="七、演讲及报告"></a>七、演讲及报告</h4><ul><li><a href="https://mp.weixin.qq.com/s/zHXaIQLUgtBYnZ6U3Z-pFg">贾扬清与阿里灵杰丨搞AI框架那帮人（二）</a></li><li><a href="https://mp.weixin.qq.com/s/PVSq4FI4HISV5zDrnWOQBQ">贾扬清演讲实录：一个AI开发者的奇幻漂流丨2021阿里灵杰AI工程化峰会</a></li><li><a href="https://mp.weixin.qq.com/s/2iNA8LCJizdqvzoPbWpPKA">徐宗本院士：人工智能的10个重大数理基础问题</a></li><li><a href="https://mp.weixin.qq.com/s/tsrf_E0XKsrjngRXxYU0Ww">张一鸣：我遇到的优秀年轻人的5个特质</a></li><li><a href="https://mp.weixin.qq.com/s/76YAS5vWZgZq1OA0d23NOA">10 张逻辑思维图，迅速提升你的工作能力</a></li><li><a href="https://mp.weixin.qq.com/s/-QzLpkb3s_CLlUH_HWfXug">分享 10 个日常使用的脚本</a></li><li><a href="https://mp.weixin.qq.com/s/zlIDgHC8MYqFq1oVdhZWxQ">全球开发者近 70% 是因为薪资原因离职？</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4MjM1NzQ0OA==&amp;mid=2247498606&amp;idx=3&amp;sn=fbb6d310780c304375be8c8a1286d768&amp;chksm=eb9980c9dcee09df7a5a61e9c143c7072c7b62a85e224a14777809c0d49cd0c6e656f4af95f4&amp;scene=132#wechat_redirect">5 年 Python 的我，总结了这 90 条写 Python 程序的建议</a></li><li><a href="https://mp.weixin.qq.com/s/7elUzIet8MnWKrN5W-tXgg">如何高效快速搞散一个团队？</a><br>-<a href="https://mp.weixin.qq.com/s?__biz=MzkxNDI5NjQ1NA==&amp;mid=2247483969&amp;idx=1&amp;sn=8720a95e5c398dac9675f8bbd913e5b8&amp;scene=45#wechat_redirect">程序员离职原因汇总（珍藏版）</a></li><li><a href="https://mp.weixin.qq.com/s/ikaLZqpvQ-wcpZk2Y_gHVg">一位女博士在人工智能领域创业的那五年</a></li><li><a href="https://mp.weixin.qq.com/s/c94J5vYOLgHdO-m-TWyHCA">2021，谁最风光，谁最惨？</a></li><li><a href="https://mp.weixin.qq.com/s/U8FLJPhqJGh7egmiax_XTg">微软的文本转语音服务，已经听不出是机器了</a></li><li><a href="https://mp.weixin.qq.com/s/leNBXopEds3pC4sWuS29EA">一个员工的离职成本有多高？</a></li><li><a href="https://mp.weixin.qq.com/s/SsIPLIF3Y3JZb5P6lSzoBA">呵呵，拿了北京户口！却是跌落的开始</a></li><li><a href="http://zx2.mtzxgf.com/aw3/ff83bf118a1b489c8607688bbaaf6bf7.html?id=39043BA7B0754910962E3E46CE406ED8">阿里CEO张勇：9年前马云送我8个字，让我受用至今</a></li><li><a href="https://www.bilibili.com/video/BV1Gs411o71d?p=1">《哈弗大学幸福课 》</a></li><li><a href="https://mp.weixin.qq.com/s/9CR8oA5S4R7fp2AOfB6c2w">干货分享 | 成功者的特征：如何与他人打交道</a></li><li><a href="https://mp.weixin.qq.com/s/VtE5ggrMBn8tHfKVWNVbjA">这 10 个程序员的好习惯，让我变强了</a></li><li><a href="https://mp.weixin.qq.com/s/EjPvjyfaIdQC7HNbwCVXXQ">达摩院发布2022十大科技趋势</a></li><li><a href="https://mp.weixin.qq.com/s/uExPCfCZBKdXt6modbD01Q">百度研究院2022年科技趋势预测</a></li><li><a href="https://mp.weixin.qq.com/s/r4mMCf7t7qVxNPS484Wa6A">为什么我在腾讯待了近十年，还是离了职？</a></li><li><a href="https://mp.weixin.qq.com/s/aGk7VmGBM5S2tDNuDGr87w">聊聊我遇到的那些贵人</a></li><li><a href="https://mp.weixin.qq.com/s/_olnXfB9gOZr9T6pRbVVxg">一位38岁被裁技术经理的忠告：在职场，这5件事越早做越好</a></li><li><a href="https://mp.weixin.qq.com/s/xM9WHrFxnCgUsYbMi0CuDQ">清华刘知远：大模型「十问」，寻找新范式下的研究方向</a></li><li><a href="https://mp.weixin.qq.com/s/aUb1gyI0aCnzACq5yoYtpQ">演讲 | 创新工场首席科学家、澜舟科技创始人周明：认知智能的进展和思考</a></li></ul><h4 id="八、后端开发"><a href="#八、后端开发" class="headerlink" title="八、后端开发"></a>八、后端开发</h4><ul><li><a href="https://mp.weixin.qq.com/s/Yh1soDBdGtIW4rIhE5C4xw">Spring Boot + EasyExcel 导入导出，好用到爆！</a></li><li><a href="https://mp.weixin.qq.com/s/MoHFl2OpxCNia4TmsGHYLA">真正的缓存之王，Google Guava 只是弟弟</a></li></ul><h4 id="九、前端开发"><a href="#九、前端开发" class="headerlink" title="九、前端开发"></a>九、前端开发</h4><h4 id="十、八股文汇集"><a href="#十、八股文汇集" class="headerlink" title="十、八股文汇集"></a>十、八股文汇集</h4><ul><li><a href="https://mp.weixin.qq.com/s/YJkgszUo7vdJNks-Z93aEg">深度学习面试必备的 25 个问题</a></li><li><a href="https://mp.weixin.qq.com/s/Vqe7zGW16spm-W4-3IfCNQ">17个机器学习的常用算法！</a></li></ul><h4 id="十一、学习教程"><a href="#十一、学习教程" class="headerlink" title="十一、学习教程"></a>十一、学习教程</h4><ul><li><a href="https://time.geekbang.org/course/detail/100046401-202901">NLP 实战高手课</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过WindowsTerminal在Windows上安装Ubuntu以及窗口控制台切换快捷键总结</title>
      <link href="/2021/10/27/tong-guo-windowsterminal-zai-windows-shang-an-zhuang-ubuntu-yi-ji-chuang-kou-kong-zhi-tai-qie-huan-kuai-jie-jian-zong-jie/"/>
      <url>/2021/10/27/tong-guo-windowsterminal-zai-windows-shang-an-zhuang-ubuntu-yi-ji-chuang-kou-kong-zhi-tai-qie-huan-kuai-jie-jian-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>通过WindowsTerminal在Windows上安装Ubuntu以及窗口控制台切换快捷键总结</p><h3 id="一、安装教程"><a href="#一、安装教程" class="headerlink" title="一、安装教程"></a>一、安装教程</h3><p>Linux在程序员中属于高逼格的存在，当然安装了图形界面的程序员要减分，毕竟你需要用鼠标了！程序员的桌面不能比谁的更酷更炫，要比谁的屏幕多，桌面颜色少！<br>Windows向来是没有这种光圈的，因为它的目标是白痴用户。当然它的<code>cmd</code>命令从始至终充满了科技的味道，一直都是黑白两色。<br>为什么终端这么重要呢？对于一个程序员来说，没有了命令行相当于少了半条手臂。这条手臂到底美不美，壮不壮，要看命令行终端好不好用。<br>在远程连接其他<code>Linux</code>的时候，我通常使用<code>Xshell</code>，就因为它长得比较漂亮耐看。在<code>Windows</code>上，就可以安装<code>Windows Terminal</code>。有点类似于<code>MacOS</code>上的<code>iTerm</code>，可以说是<code>Windows</code>下最舒适的终端。</p><h4 id="①-打开”应用商店”"><a href="#①-打开”应用商店”" class="headerlink" title="①  打开”应用商店”"></a>①  打开”应用商店”</h4><p>安装<code>Windows Terminal</code>需要从”应用商店”去获取，就是下面这个按钮。<br><img src="https://i.loli.net/2021/11/06/IvPT3LckYN8Z4eg.png" alt="应用商店"></p><h4 id="②-搜索Windows-Terminal"><a href="#②-搜索Windows-Terminal" class="headerlink" title="② 搜索Windows Terminal"></a>② 搜索Windows Terminal</h4><p>在搜索框里搜索<code>Windows Terminal</code>，即可找到这个软件。比较人性化的一点是，它不像Mac的应用商店一样，需要你先准备一个账号。WT不需要登录即可获取。如果你的页面一直打转也不要紧，关闭重新打开几次就好了。由于众所周知的原因，国外网站就没有几个不转圈的。<br><img src="https://i.loli.net/2021/11/06/Z3HP7tmKwQBDloI.png" alt="Windows Terminal安装包"></p><h4 id="③-安装Ubuntu子系统"><a href="#③-安装Ubuntu子系统" class="headerlink" title="③ 安装Ubuntu子系统"></a>③ 安装Ubuntu子系统</h4><p>此时，我们仅仅安装了一个命令行终端而已，离我们扔掉Linux的目标还差上一小节。别担心，下面就介绍怎么在Windows上安装Ubuntu。</p><ul><li>首先，如下图，在控制面板，找到程序选项，点击  “启用或关闭Windows功能”。<br><img src="https://pic.imgdb.cn/item/618622452ab3f51d91ae90b0.png" alt="启用或关闭Windows功能"></li><li>其次，从应用商店安装Ubuntu系统，这个系统将会以软件的形式存在。我这里选择的是LTS版本，可以看到给它打分的人并不多，可能大多数都是像我一样没有微软账号的游客。<br><img src="https://pic.imgdb.cn/item/618622972ab3f51d91af1c34.png" alt="下载Ubuntu系统"></li><li>然后，查看安装镜像<br>此时，神奇的事情发生了。在我们的<code>Windows Terminal</code>右上角，有一个向下的箭头，点击它，就可以看到刚刚安装的<code>Ubuntu</code>。<br><img src="https://pic.imgdb.cn/item/618623392ab3f51d91b03585.png" alt="选择Ubuntu镜像"><br>进入Linux系统之后，我们就可以像配置一个普通Linux一样配置这台机器。把ubuntu的软件源给换掉。编辑/etc/apt/sources.list文件，把它的内容换成下面的源。<br>vim /etc/apt/sources.list<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">deb https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic main restricted universe multiversedeb https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>updates main restricted universe multiversedeb https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>backports main restricted universe multiversedeb https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>security main restricted universe multiversedeb https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>proposed main restricted universe multiversedeb<span class="token operator">-</span>src https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic main restricted universe multiversedeb<span class="token operator">-</span>src https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>updates main restricted universe multiversedeb<span class="token operator">-</span>src https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>backports main restricted universe multiversedeb<span class="token operator">-</span>src https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>security main restricted universe multiversedeb<span class="token operator">-</span>src https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>ubuntu<span class="token operator">/</span> bionic<span class="token operator">-</span>proposed main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 安装最好用的oh-my-zsh。先用sudo apt install zsh安装shell终端，然后运行下面的命令 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="二、基本快捷键"><a href="#二、基本快捷键" class="headerlink" title="二、基本快捷键"></a>二、基本快捷键</h3><table><thead><tr><th>快捷键</th><th>用处</th></tr></thead><tbody><tr><td><code>Ctrl +Alt+数字 </code></td><td>切换打开的控制台</td></tr><tr><td><code>Ctrl+Shift+数字</code></td><td>打开新的控制台</td></tr><tr><td><code>Shift+Alt++/=</code></td><td>横向打开新控制台</td></tr><tr><td><code>Shift+Alt+_/-</code></td><td>纵向打开新控制台</td></tr><tr><td><code>Shift+Alt+方向键</code></td><td>控制控制台尺寸</td></tr><tr><td><code>Alt+方向键</code></td><td>在本标签内切换控制台</td></tr><tr><td><code>Ctrl+Shift+w </code></td><td>关闭当前控制台</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java连接多源数据库实例</title>
      <link href="/2021/10/26/java-lian-jie-duo-yuan-shu-ju-ku-shi-li/"/>
      <url>/2021/10/26/java-lian-jie-duo-yuan-shu-ju-ku-shi-li/</url>
      
        <content type="html"><![CDATA[<h5 id="使用Java连接多源数据库实例，并有相应的增、删、改、除等操作"><a href="#使用Java连接多源数据库实例，并有相应的增、删、改、除等操作" class="headerlink" title="使用Java连接多源数据库实例，并有相应的增、删、改、除等操作"></a>使用Java连接多源数据库实例，并有相应的增、删、改、除等操作</h5><ul><li>Java连接Oracle实例<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/10/25 16:13 */</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * 1:向数据库中添加数据 * * @author biexiansheng */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerOracle</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"oracle.jdbc.OracleDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载数据库驱动</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加载数据库驱动成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:oracle:thin:@192.168.168.105:1521:ZLORANEW"</span><span class="token punctuation">;</span><span class="token comment">//声明数据库test的url</span>            <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment">//数据库的用户名</span>            <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment">//数据库的密码</span>            <span class="token comment">//建立数据库连接，获得连接对象conn(抛出异常即可)</span>            <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接数据库成功"</span><span class="token operator">+</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Inquire</span> inquire<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Inquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 调用增删改除操作接口如下             * 分别传入conn和tableName             */</span>            inquire<span class="token punctuation">.</span><span class="token function">gitInquire</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"dev_tab_d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭数据库成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Java连接Mysql实例<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/10/26 14:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerMysql</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//MySql8.0以下版本-jdbc驱动名及数据库url</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> jdbc_driver <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> db_url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//注册JDBC驱动</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>jdbc_driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打开链接</span>            conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>db_url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 调用增删改除操作接口如下             * 分别传入conn和tableName             */</span>            <span class="token class-name">Inquire</span> inquire<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Inquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inquire<span class="token punctuation">.</span><span class="token function">gitInquire</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"sys_user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mysql连接成功"</span><span class="token operator">+</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>查询接口(Oracle+Mysql)都通用 <pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inquire</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">gitInquire</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> tabname<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行的语句</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select *from "</span> <span class="token operator">+</span> tabname<span class="token punctuation">;</span>            <span class="token comment">//创建该连接下的PreparedStatement对象</span>            <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//执行查询语句，将数据保存到ResultSet对象中</span>            <span class="token class-name">ResultSet</span> rset <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSetMetaData</span> rsmd <span class="token operator">=</span> rset<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rset<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">///获取指定列的列值</span>                    <span class="token class-name">String</span> columnValue <span class="token operator">=</span> rset<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取指定列的列值:\t"</span> <span class="token operator">+</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取指定列的列名</span>                    <span class="token class-name">String</span> colunmName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取指定列的列名:\t"</span> <span class="token operator">+</span> colunmName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获得指定列的数据类型</span>                    <span class="token keyword">int</span> columnType <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnType</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得指定列的数据类型:\t"</span> <span class="token operator">+</span> columnType<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取指定列的数据类型名</span>                    <span class="token class-name">String</span> columnTypeName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnTypeName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取指定列的数据类型名:\t"</span> <span class="token operator">+</span> columnTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//所在的Catalog名字</span>                    <span class="token class-name">String</span> catalogName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnClassName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所在的Catalog名字:\t"</span> <span class="token operator">+</span> catalogName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//对应数据类型的类</span>                    <span class="token class-name">String</span> columnClassName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnClassName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对应数据类型的类:\t"</span> <span class="token operator">+</span> columnClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//在数据库中类型的最大字符个数</span>                    <span class="token keyword">int</span> columnDisplaySize <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnDisplaySize</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在数据库中类型的最大字符个数:\t"</span> <span class="token operator">+</span> columnDisplaySize<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//默认的列的标题</span>                    <span class="token class-name">String</span> columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认的列的标题:\t"</span> <span class="token operator">+</span> columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获得列的模式</span>                    <span class="token class-name">String</span> schemaName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getSchemaName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得列的模式:\t"</span> <span class="token operator">+</span> schemaName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//某列类型的精确度(类型的长度)</span>                    <span class="token keyword">int</span> precision <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getPrecision</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"某列类型的精确度(类型的长度):\t"</span> <span class="token operator">+</span> precision<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//小数点后的位数</span>                    <span class="token keyword">int</span> scale <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getScale</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小数点后的位数:\t"</span> <span class="token operator">+</span> scale<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取某列对应的表名</span>                    <span class="token class-name">String</span> tableName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取某列对应的表名:\t"</span> <span class="token operator">+</span> tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 是否自动递增</span>                    <span class="token keyword">boolean</span> isAutoInctement <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">isAutoIncrement</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否自动递增:\t"</span> <span class="token operator">+</span> isAutoInctement<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//在数据库中是否为货币型</span>                    <span class="token keyword">boolean</span> isCurrency <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">isCurrency</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在数据库中是否为货币型:\t"</span> <span class="token operator">+</span> isCurrency<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//是否为空</span>                    <span class="token keyword">int</span> isNullable <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">isNullable</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否为空:\t"</span> <span class="token operator">+</span> isNullable<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//是否为只读</span>                    <span class="token keyword">boolean</span> isReadOnly <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否为只读:\t"</span> <span class="token operator">+</span> isReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"查询完成"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>接口的实现 <pre class="line-numbers language-MySql8" data-language="MySql8"><code class="language-MySql8">String sql="待执行的语句";    // 例如 Alter table cxj drop (COM_CODE)Statement stmt= conn.createStatement();   //创建一个Statement对象stmt.executeUpdate(sql);       //执行sql语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言(java) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过AOP和自定义注解完成druid连接池的动态数据源切换</title>
      <link href="/2021/10/22/tong-guo-aop-he-zi-ding-yi-zhu-jie-wan-cheng-druid-lian-jie-chi-de-dong-tai-shu-ju-yuan-qie-huan/"/>
      <url>/2021/10/22/tong-guo-aop-he-zi-ding-yi-zhu-jie-wan-cheng-druid-lian-jie-chi-de-dong-tai-shu-ju-yuan-qie-huan/</url>
      
        <content type="html"><![CDATA[<p>通过AOP和自定义注解完成druid连接池的动态数据源切换</p><hr><h3 id="一、引入依赖的相关包pom-xml"><a href="#一、引入依赖的相关包pom-xml" class="headerlink" title="一、引入依赖的相关包pom.xml"></a>一、引入依赖的相关包pom.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rs.cloud.business<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--druid--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--aop--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外如需加入其他依赖包时，可以在pom.xml中的<code>&lt;dependencies&gt;xxx&lt;/dependencies&gt;</code>中添加相应代码。<br>在Maven管理中点击Reload All Maven Projects,重启加载项目。<br><img src="https://i.loli.net/2021/10/27/cHDpuL91vBwCqUh.jpg" alt="IDE中刷新Maven项目"></p><h3 id="二、创建数据库"><a href="#二、创建数据库" class="headerlink" title="二、创建数据库"></a>二、创建数据库</h3><ul><li><h4 id="2-1-主数据库（Oracle）"><a href="#2-1-主数据库（Oracle）" class="headerlink" title="2.1. 主数据库（Oracle）"></a>2.1. 主数据库（Oracle）</h4>分别创建主数据库(spring_boot_demo)和辅数据库(other_data)<br>具体语法如下：</li><li><h5 id="2-1-1-创建数据表"><a href="#2-1-1-创建数据表" class="headerlink" title="2.1.1. 创建数据表"></a>2.1.1. 创建数据表</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table spring_boot_demo(              id nvarchar2(10),              username nvarchar2(39),              password nvarchar2(20),              age nvarchar2(11),              sex nvarchar2(21))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="2-1-2-数据表中插入数据"><a href="#2-1-2-数据表中插入数据" class="headerlink" title="2.1.2. 数据表中插入数据"></a>2.1.2. 数据表中插入数据</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into sprin VALUES ('11','root','root','18','男')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h4 id="2-2-辅数据库（mysql）"><a href="#2-2-辅数据库（mysql）" class="headerlink" title="2.2. 辅数据库（mysql）"></a>2.2. 辅数据库（mysql）</h4>辅数据库结构与主数据表结构一致，其实非务必一致。此处为了便于操作，与Oracle下部署数据库并且使表结构一致，方便形成数据对比。</li><li><h5 id="2-2-1-创建数据表"><a href="#2-2-1-创建数据表" class="headerlink" title="2.2.1. 创建数据表"></a>2.2.1. 创建数据表</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE IF NOT EXISTS `other_data`(                `id` INT UNSIGNED AUTO_INCREMENT,                `username` VARCHAR(100) NOT NULL,                `password` VARCHAR(40) NOT NULL,                `age` VARCHAR(100) NOT NULL,                `sex` VARCHAR(100) NOT NULL,                PRIMARY KEY ( `id` )                )ENGINE=InnoDB DEFAULT CHARSET=utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="2-2-2-数据表中插入数据"><a href="#2-2-2-数据表中插入数据" class="headerlink" title="2.2.2. 数据表中插入数据"></a>2.2.2. 数据表中插入数据</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into other_data VALUES ('11','root','root','18','男')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="三、数据库连接配置文件信息"><a href="#三、数据库连接配置文件信息" class="headerlink" title="三、数据库连接配置文件信息"></a>三、数据库连接配置文件信息</h3><p>在application.yml中，修改数据库连接配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9999</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /cn<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>demo  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>oracle<span class="token punctuation">:</span>thin<span class="token punctuation">:</span>@192.168.168.105<span class="token punctuation">:</span>1521<span class="token punctuation">:</span>ZLORANEW        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> root        <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> oracle.jdbc.OracleDriver      <span class="token key atrule">second</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useSSL=false<span class="token important">&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> root        <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.200.113<span class="token punctuation">:</span><span class="token number">8848</span><span class="token comment">#在application.yml中添加配置mapper.xml文件的路径：</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>   <span class="token comment"># 扫描路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、编写代码"><a href="#四、编写代码" class="headerlink" title="四、编写代码"></a>四、编写代码</h3><ul><li><h4 id="4-1-代码的整个结构"><a href="#4-1-代码的整个结构" class="headerlink" title="4.1. 代码的整个结构"></a>4.1. 代码的整个结构</h4><img src="https://i.loli.net/2021/10/26/bNpErUD8ijvsAx2.png" alt="整个代码结构说明"></li><li><h4 id="4-2-数据库访问层"><a href="#4-2-数据库访问层" class="headerlink" title="4.2. 数据库访问层"></a>4.2. 数据库访问层</h4></li><li><h5 id="4-2-1-类UserPO-java"><a href="#4-2-1-类UserPO-java" class="headerlink" title="4.2.1. 类UserPO.java"></a>4.2.1. 类UserPO.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>po</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/10/22 10:16 * 描述：User类implements了一个Serializable类，该类的作用是序列化。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 用户ID     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户名     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">/**     * 年龄     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">/**     * 性别     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 以上User类implements了一个Serializable类，此类的作用是序列化。</li><li><h5 id="4-2-2-接口UserMapper-java"><a href="#4-2-2-接口UserMapper-java" class="headerlink" title="4.2.2. 接口UserMapper.java"></a>4.2.2. 接口UserMapper.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">UserPO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/10/22 10:22 * UserMapper接口  这里的函数名称跟xml中的一致 */</span><span class="token annotation punctuation">@Repository</span>  <span class="token comment">//@Repository注解是把这个接口的一个实现类交给spring管理</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserPO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNameByUsername</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"UserPO"</span><span class="token punctuation">)</span><span class="token class-name">UserPO</span> userpo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="4-2-3-配置文件-UserMapper-xml"><a href="#4-2-3-配置文件-UserMapper-xml" class="headerlink" title="4.2.3. 配置文件 UserMapper.xml"></a>4.2.3. 配置文件 UserMapper.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        mapper的namespace指定了该xml文件指向的Mapper接口，里面的sql语句接受传来的username数据进行数据访问。--&gt;</span><span class="token comment">&lt;!--        语句的id="getAgeByUsername"则是对应mapper接口中的方法，resultType="int"指定本次数据访问的数据返回类型。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rs.cloud.business.cache.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rs.cloud.business.cache.po.UserPO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>USERNAME<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PASSWORD<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AGE<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SEX<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        ID,USERNAME,PASSWORD,AGE,SEX    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAgeByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT age FROM spring_boot_demo  WHERE username='${username}'    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getNameByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rs.cloud.business.cache.po.UserPO<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT * from ${UserPO.username}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>详细说明已在脚本中注释，对应的在application.yml中添加配置mapper.xml文件的路径：<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>   <span class="token comment"># 扫描路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="4-2-4-在程序入口类中添加扫描CacheApplication-java"><a href="#4-2-4-在程序入口类中添加扫描CacheApplication-java" class="headerlink" title="4.2.4. 在程序入口类中添加扫描CacheApplication.java"></a>4.2.4. 在程序入口类中添加扫描CacheApplication.java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.rs.cloud.business.cache.mapper"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h4 id="4-3-业务逻辑"><a href="#4-3-业务逻辑" class="headerlink" title="4.3. 业务逻辑"></a>4.3. 业务逻辑</h4>代码结构如下：<br><img src="https://i.loli.net/2021/10/27/D1H9OsPzREqiavW.png" alt="业务层结构"></li><li><h5 id="4-3-1-UserService-java类"><a href="#4-3-1-UserService-java类" class="headerlink" title="4.3.1. UserService.java类"></a>4.3.1. UserService.java类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">UserPO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/10/22 10:33 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserPO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNameByUsername</span><span class="token punctuation">(</span><span class="token class-name">UserPO</span> userpo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="4-3-2-UserServiceImpl-java类"><a href="#4-3-2-UserServiceImpl-java类" class="headerlink" title="4.3.2. UserServiceImpl.java类"></a>4.3.2. UserServiceImpl.java类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">UserPO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/10/22 10:35 */</span><span class="token comment">//在service接口的实现类中，要加上@Service注解，把实现类交给spring处理</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment">//通过@Autowired注解获得自动注入的userMapper实现类，在重写的方法中进行调用，获得数据。</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getAgeByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserPO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNameByUsername</span><span class="token punctuation">(</span><span class="token class-name">UserPO</span> userpo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getNameByUsername</span><span class="token punctuation">(</span>userpo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="4-4-页面展示层"><a href="#4-4-页面展示层" class="headerlink" title="4.4. 页面展示层"></a>4.4. 页面展示层</h4></li><li><h5 id="4-4-1-UserController-java类"><a href="#4-4-1-UserController-java类" class="headerlink" title="4.4.1. UserController.java类"></a>4.4.1. UserController.java类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>enums<span class="token punctuation">.</span></span><span class="token class-name">DataSourceName</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>business<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">UserPO</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author shajiu * @date 2021/10/22 10:37 * 按照配置的端口和映射URL，页面的路径应该是http://localhost:9999/cn/user/age * 结果与我们预存在数据库中的数据一致。函数名称跟xml中的一致 * https://www.cnblogs.com/guobin-/p/13696900.html */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user/age"</span><span class="token punctuation">)</span>    <span class="token comment">//@DataSource(DataSourceName.SECOND)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAgeOfuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getAgeByUsername</span><span class="token punctuation">(</span><span class="token string">"沙九"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 全部查询     * @param userpo     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/createTable"</span><span class="token punctuation">)</span>    <span class="token comment">//@DataSource(DataSourceName.SECOND)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getNameOfuser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserPO</span> userpo<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> username<span class="token operator">=</span>userpo<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"传入的参数:\t"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getNameByUsername</span><span class="token punctuation">(</span>userpo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="4-5-枚举类DataSourceName-java"><a href="#4-5-枚举类DataSourceName-java" class="headerlink" title="4.5. 枚举类DataSourceName.java"></a>4.5. 枚举类DataSourceName.java</h4>此类用于存储数据源名称，并且定义两个数据源名称分别为PRIMARY和SECOND<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache.enums;/** * @author shajiu * @date 2021/10/21 13:30 * 功能：枚举类DataSourceName便于切换 * 此类用来存放数据源的名称，定义两个数据源名称分别为PRIMARY和SECOND。 */public enum DataSourceName {    /**     * 主数据源 spring_boot_demo     */    PRIMARY("PRIMARY"),    /**     * 副数据源other_data     */    SECOND("PRIMARY");    private String dataSourceName;    private DataSourceName(String dataSourceName) {        this.dataSourceName = dataSourceName;    }    DataSourceName() {    }    public String getDataSourceName() {        return this.dataSourceName;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="4-6-配置类DynamicDataSourceConfig-Java"><a href="#4-6-配置类DynamicDataSourceConfig-Java" class="headerlink" title="4.6. 配置类DynamicDataSourceConfig.Java"></a>4.6. 配置类DynamicDataSourceConfig.Java</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache.config;import com.alibaba.druid.pool.DruidDataSource;import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;import com.rs.cloud.business.cache.bean.DynamicDataSource;import com.rs.cloud.business.cache.enums.DataSourceName;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import java.util.HashMap;import java.util.Map;/** * @author shajiu * @date 2021/10/21 13:30 */@Configurationpublic class DynamicDataSourceConfig {    /**     * 创建DataSource,将数据源配置从文件中读取     */    @Bean    @ConfigurationProperties("spring.datasource.druid.primary")    public DruidDataSource oneDataSource(){        return DruidDataSourceBuilder.create().build();    }    @Bean    @ConfigurationProperties("spring.datasource.druid.second")    public DruidDataSource twoDataSource(){        return DruidDataSourceBuilder.create().build();    }    /**     * 将数据源放入到这个map中，注入到Ioc     */    @Bean    @Primary    public DynamicDataSource dataSource(DruidDataSource oneDataSource,DruidDataSource twoDataSource){        Map&lt;Object,Object&gt; targetDataSources=new HashMap&lt;&gt;(2);        targetDataSources.put(DataSourceName.PRIMARY.getDataSourceName(),oneDataSource);        targetDataSources.put(DataSourceName.SECOND.getDataSourceName(),twoDataSource);        return new DynamicDataSource(oneDataSource,targetDataSources);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="4-7-动态数据源DynamicDataSource-Java"><a href="#4-7-动态数据源DynamicDataSource-Java" class="headerlink" title="4.7. 动态数据源DynamicDataSource.Java"></a>4.7. 动态数据源DynamicDataSource.Java</h4>此类通过继承AbstractRoutingDataSource类，在构造函数中调用父类的方法，将配置类中放入map的数据源集合定为备选数据源，将传来的oneDataSource作为默认数据源。<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache.bean;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;import java.util.Map;/** * @author shajiu * @date 2021/10/21 13:29 * 描述：通过继承AbstractRoutingDataSource类，在构造函数中调用父类的方法，将配置类 *      中放入map的数据源集合定为备选数据源，将传来的oneDataSource作为默认数据源 */public class DynamicDataSource extends AbstractRoutingDataSource {    private static final ThreadLocal&lt;String&gt; contextHolder=new ThreadLocal&lt;&gt;();    /**     * 配置DatsSource     * 设置defaultTargetDataSource为主数据库     * @param targetDataSources     */    public DynamicDataSource(DruidDataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources) {        // 设置默认数据源        super.setDefaultTargetDataSource(defaultTargetDataSource);        // 设置备选的数据源集合        super.setTargetDataSources(targetDataSources);        super.afterPropertiesSet();    }    public static String getDataSource(){        return contextHolder.get();    }    public static void setDataSource(String dataSource){        contextHolder.set(dataSource);    }    public static void clearDataSource(){        contextHolder.remove();    }    @Override    protected Object determineCurrentLookupKey() {        // 决定当前数据源对应的key        return getDataSource();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="4-8-自定义注释类DataSource-Java"><a href="#4-8-自定义注释类DataSource-Java" class="headerlink" title="4.8. 自定义注释类DataSource.Java"></a>4.8. 自定义注释类DataSource.Java</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache.annotation;import com.rs.cloud.business.cache.enums.DataSourceName;import java.lang.annotation.*;/** * @author shajiu * @date 2021/10/21 13:29 * 描述：自定义注释类DataSource： */@Documented                             //指定被标注的注解会包含在javadoc中@Target(ElementType.METHOD)             //指定注释可能出现在Java程序中的语法位置（ElementType.METHOD则说明注解可能出现在方法上）@Retention(RetentionPolicy.RUNTIME)     //指定注释的保留时间（RetentionPolicy.RUNTIME则是在java文件编译成class类时也依旧保存该注释）public @interface DataSource {    DataSourceName value() default DataSourceName.PRIMARY;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="4-9-切面类DataSourceAspect-Java"><a href="#4-9-切面类DataSourceAspect-Java" class="headerlink" title="4.9.  切面类DataSourceAspect.Java"></a>4.9.  切面类DataSourceAspect.Java</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache.aspect;import com.rs.cloud.business.cache.annotation.DataSource;import com.rs.cloud.business.cache.bean.DynamicDataSource;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.aspectj.lang.reflect.MethodSignature;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.core.Ordered;import org.springframework.stereotype.Component;import java.lang.reflect.Method;/** * @author shajiu * @date 2021/10/21 13:29 * 描述：Spring框架有很多相同接口的实现类，提供了Ordered接口来处理相同接口实现类之间的优先级问题。 * 通过环绕切面，对方法上的注释进行了检验，如果获取到有DataSource注释，则会进行数据源的切换，否则按默认数据源进行处理。 */@Aspect@Componentpublic class DataSourceAspect implements Ordered {    //初始化LoggerFactory对象 , CaseAutoPullController是日志所属的类    private final static Logger log = LoggerFactory.getLogger(DataSourceAspect.class);    /**     * 切点：所有配置DataSource注解的方法     */    @Pointcut("@annotation(com.rs.cloud.business.cache.annotation.DataSource)")    public void dataSourcePointCut() {    }    @Around(value = "dataSourcePointCut()")    public Object around(ProceedingJoinPoint point) throws Throwable {        Object result;        MethodSignature signature = (MethodSignature) point.getSignature();        Method method = signature.getMethod();        DataSource ds = method.getAnnotation(DataSource.class);        /**         * 判断DataSource的值         * 获取当前方法应用的数据源         */        DynamicDataSource.setDataSource(ds.value().getDataSourceName());        try {            result = point.proceed();        } finally {            DynamicDataSource.clearDataSource();        }        return result;    }    @Override    public int getOrder() {        return 1;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> Spring框架有很多相同接口的实现类，提供了Ordered接口来处理相同接口实现类之间的优先级问题。通过环绕切面，对方法上的注释进行了检验，如果获取到有DataSource注释，则会进行数据源的切换，否则按默认数据源进行处理。</li><li><h4 id="4-10-引入配置类CacheApplication-java"><a href="#4-10-引入配置类CacheApplication-java" class="headerlink" title="4.10. 引入配置类CacheApplication.java"></a>4.10. 引入配置类CacheApplication.java</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache;import com.rs.cloud.business.cache.config.DynamicDataSourceConfig;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;import org.springframework.context.annotation.EnableAspectJAutoProxy;import org.springframework.context.annotation.Import;//  在程序入口类中添加扫描,添加该注解后，运行程序时会自动扫描指定路径中的mapper接口实现类。//  @EnableAspectJAutoProxy用来开启AOP@MapperScan("com.rs.cloud.business.cache.mapper")@Import({DynamicDataSourceConfig.class})@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})@EnableAspectJAutoProxypublic class CacheApplication {public static void main(String[] args) {SpringApplication.run(CacheApplication.class, args);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="五、测试阶段"><a href="#五、测试阶段" class="headerlink" title="五、测试阶段"></a>五、测试阶段</h3><ul><li><h4 id="5-1-不使用注解"><a href="#5-1-不使用注解" class="headerlink" title="5.1. 不使用注解"></a>5.1. 不使用注解</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache.controller;import com.rs.cloud.business.cache.annotation.DataSource;import com.rs.cloud.business.cache.enums.DataSourceName;import com.rs.cloud.business.cache.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import com.rs.cloud.business.cache.po.UserPO;/** * @author shajiu * @date 2021/10/22 10:37 * 按照配置的端口和映射URL，页面的路径应该是http://localhost:9999/cn/user/age * 结果与我们预存在数据库中的数据一致。函数名称跟xml中的一致 */@RestControllerpublic class UserController {    @Autowired    UserService userService;    @RequestMapping("/user/age")    public int getAgeOfuser(){        return userService.getAgeByUsername("shajiu");    }    /**     * 全部查询     * @param userpo     * @return     */    @PostMapping(value = "/createTable")    public Object getNameOfuser(@RequestBody UserPO userpo){        String username=userpo.getUsername();        System.out.printf("传入的参数:\t"+username+"\n");        return userService.getNameByUsername(userpo);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="5-2-访问链接：192-168-2-186-9999-x2F-cn-x2F-user-x2F-age"><a href="#5-2-访问链接：192-168-2-186-9999-x2F-cn-x2F-user-x2F-age" class="headerlink" title="5.2. 访问链接：192.168.2.186:9999/cn/user/age"></a>5.2. 访问链接：192.168.2.186:9999/cn/user/age</h4> 以上结果返回“19”，以上结果从Oracle数据源的spring_boot_demo数据表中读取。</li><li><h4 id="5-3-数据表内容如下"><a href="#5-3-数据表内容如下" class="headerlink" title="5.3. 数据表内容如下"></a>5.3. 数据表内容如下</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">12shajiuroot19男<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h4 id="5-4-注解访问链接"><a href="#5-4-注解访问链接" class="headerlink" title="5.4. 注解访问链接"></a>5.4. 注解访问链接</h4>在方法前添加注解@DataSource(DataSourceName.SECOND)，具体代码如下：<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.rs.cloud.business.cache.controller;import com.rs.cloud.business.cache.annotation.DataSource;import com.rs.cloud.business.cache.enums.DataSourceName;import com.rs.cloud.business.cache.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import com.rs.cloud.business.cache.po.UserPO;/** * @author shajiu * @date 2021/10/22 10:37 * 按照配置的端口和映射URL，页面的路径应该是http://localhost:9999/cn/user/age * 结果与我们预存在数据库中的数据一致。函数名称跟xml中的一致 */@RestControllerpublic class UserController {    @Autowired    UserService userService;    @RequestMapping("/user/age")    @DataSource(DataSourceName.SECOND)    public int getAgeOfuser(){        return userService.getAgeByUsername("root");    }    /**     * 全部查询     * @param userpo     * @return     */    @PostMapping(value = "/createTable")    //@DataSource(DataSourceName.SECOND)    public Object getNameOfuser(@RequestBody UserPO userpo){        String username=userpo.getUsername();        System.out.printf("传入的参数:\t"+username+"\n");        return userService.getNameByUsername(userpo);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>以上结果返回“18”，以上结果从Mysql数据源的other_data数据表中读取。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言(Java) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git报错解决方案</title>
      <link href="/2021/10/20/git-bao-cuo-jie-jue-fang-an/"/>
      <url>/2021/10/20/git-bao-cuo-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<ul><li>Git报错解决：OpenSSL SSL_read: Connection was reset, errno 10054 错误解决<pre class="line-numbers language-java" data-language="java"><code class="language-java">git config <span class="token operator">--</span>global http<span class="token punctuation">.</span>sslVerify <span class="token string">"false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能够帮助新人快速融入新团队</title>
      <link href="/2021/10/19/neng-gou-bang-zhu-xin-ren-kuai-su-rong-ru-xin-tuan-dui/"/>
      <url>/2021/10/19/neng-gou-bang-zhu-xin-ren-kuai-su-rong-ru-xin-tuan-dui/</url>
      
        <content type="html"><![CDATA[<h2 id="能够帮助“新人”快速融入新团队"><a href="#能够帮助“新人”快速融入新团队" class="headerlink" title="能够帮助“新人”快速融入新团队"></a>能够帮助“新人”快速融入新团队</h2><p>不同的软件开发团队做事的风格也完全不同。即使在同一家公司内，许多可变因素也会导致团队之间出现分歧。作为一名软件工程师，每当与新同事合作或开发新软件时，通常都会觉得非常兴奋。但在加入新的开发团队时，我们需要思考一系列的问题。</p><h4 id="1-程序人生-技术层面"><a href="#1-程序人生-技术层面" class="headerlink" title="1 程序人生*技术层面"></a>1 程序人生*技术层面</h4><h5 id="1-1-如何在本地构建软件？"><a href="#1-1-如何在本地构建软件？" class="headerlink" title="1.1 如何在本地构建软件？"></a>1.1 如何在本地构建软件？</h5><ul><li>这是你应该了解的第一件事。毕竟，你的工作是开发和运行软件，构建是第一步！</li></ul><h5 id="1-2-如何在本地测试软件？"><a href="#1-2-如何在本地测试软件？" class="headerlink" title="1.2 如何在本地测试软件？"></a>1.2 如何在本地测试软件？</h5><ul><li>虽然我们可以通过 CI 流水线发现测试错误，但是为了缩短内部开发循环周期，你必须能够在开发的机器上运行测试，确保你能够正确地运行测试，同时还需要执行回归测试。CI 流水线不应该成为检验代码错误的第一道关卡。</li></ul><h5 id="1-3-如何设置开发环境？"><a href="#1-3-如何设置开发环境？" class="headerlink" title="1.3 如何设置开发环境？"></a>1.3 如何设置开发环境？</h5><ul><li>也许团队文档中有明确的要求，但你应该了解需要在开发机器上安装哪些不同的工具，才能让你成为一名高效的团队成员。一次性解决95%的要求，总好过在开发的过程中不断遇到错误和依赖项。</li></ul><h5 id="1-4-源代码在哪里？"><a href="#1-4-源代码在哪里？" class="headerlink" title="1.4 源代码在哪里？"></a>1.4 源代码在哪里？</h5><ul><li>除了还没有编写任何代码的新产品以外，通常项目都有代码库。你需要知道代码保存在何处，以及如何在本地机器上获取代码。</li></ul><h5 id="1-5-CI-x2F-CD-流水线在哪里，工作方式是什么？"><a href="#1-5-CI-x2F-CD-流水线在哪里，工作方式是什么？" class="headerlink" title="1.5 CI/CD 流水线在哪里，工作方式是什么？"></a>1.5 CI/CD 流水线在哪里，工作方式是什么？</h5><ul><li>对于一个可确保交付高质量产品的团队来说，CI/CD 流水线是最常用的工具之一。你需要找出CI/CD流水线在哪里，并大致了解它的工作方式（可能只需要到处点一点试试看）。查看一下最近的运行状况，了解都有哪些步骤。</li></ul><h5 id="1-6-产品的待开发项在哪里？"><a href="#1-6-产品的待开发项在哪里？" class="headerlink" title="1.6.产品的待开发项在哪里？"></a>1.6.产品的待开发项在哪里？</h5><ul><li>你不仅需要知道软件当前的状况，而且还需要了解软件未来的样子。快速浏览待开发项，看看产品需要优先推出的功能。</li></ul><h5 id="1-7-如何在预生产以及生产环境中运行测试？"><a href="#1-7-如何在预生产以及生产环境中运行测试？" class="headerlink" title="1.7.如何在预生产以及生产环境中运行测试？"></a>1.7.如何在预生产以及生产环境中运行测试？</h5><ul><li>有集成环境吗？团队是否采用了金丝雀构建与部署？团队是否采用了混乱测试？了解团队如何确保生产软件符合并保持特定的标准。</li></ul><h5 id="1-8-是否需要随时待命？"><a href="#1-8-是否需要随时待命？" class="headerlink" title="1.8.是否需要随时待命？"></a>1.8.是否需要随时待命？</h5><ul><li>这个软件是否需要随时待命？如果需要的话，轮班机制是什么？正常办公时间以外是否也需要随时待命？在待命期间，如何获取通知？通常如果不是遇到新组建的队伍，并被直接安排上值班任务的话，在熟悉这方面的流程之前，你不会接到紧急电话。</li></ul><h5 id="1-9-内部文档在哪里？"><a href="#1-9-内部文档在哪里？" class="headerlink" title="1.9.内部文档在哪里？"></a>1.9.内部文档在哪里？</h5><ul><li>团队维护的内部文档在哪里？这些文档都是如何划分的？是最新的吗？</li></ul><h4 id="2-程序人生-合作"><a href="#2-程序人生-合作" class="headerlink" title="2 程序人生*合作"></a>2 程序人生*合作</h4><h5 id="2-1-团队中都有谁？负责哪方面的工作？"><a href="#2-1-团队中都有谁？负责哪方面的工作？" class="headerlink" title="2.1 团队中都有谁？负责哪方面的工作？"></a>2.1 团队中都有谁？负责哪方面的工作？</h5><ul><li>通常软件团队都有几位工程师。有的时候，每个工程师负责的工作都不一样，但这种情况并不常见。一般都由一个或几个工程师共同完成一个子项目。因此，你需要了解团队中每位程序员负责的工作。通常，你可以通过早晨的例会了解他们的工作内容。</li></ul><h5 id="2-2-团队每周都有哪些例行会议？"><a href="#2-2-团队每周都有哪些例行会议？" class="headerlink" title="2.2 团队每周都有哪些例行会议？"></a>2.2 团队每周都有哪些例行会议？</h5><ul><li>每天早上都有例会吗？还是每周一次例行会议？你应该了解一下团队每周的例行会议。</li></ul><h5 id="2-3-遇到“新手”问题，我应该找谁？"><a href="#2-3-遇到“新手”问题，我应该找谁？" class="headerlink" title="2.3 遇到“新手”问题，我应该找谁？"></a>2.3 遇到“新手”问题，我应该找谁？</h5><ul><li>通常在刚加入一个团队的时候，都会给你分配一个“指导伙伴”，这个人已经在团队待了一段时间，了解团队的运作状况。这是一件非常重要的事情，尤其是你对新软件一无所知（或几乎一无所知）的时候，你的问题可以非常低级。即使你是高级工程师，在遇到“新手”问题时，也不要觉得不好意思。</li></ul><h5 id="2-4-新功能的决定权在谁手里？"><a href="#2-4-新功能的决定权在谁手里？" class="headerlink" title="2.4 新功能的决定权在谁手里？"></a>2.4 新功能的决定权在谁手里？</h5><ul><li>产品有产品经理吗？工程团队有架构师吗？我们应该了解功能请求的上游想法。如果能够跟这个人（产品经理）约个时间，了解一下产品近期与长期的发展计划就更好了。</li></ul><h5 id="2-5-团队的主要沟通方式是什么？"><a href="#2-5-团队的主要沟通方式是什么？" class="headerlink" title="2.5 团队的主要沟通方式是什么？"></a>2.5 团队的主要沟通方式是什么？</h5><ul><li>他们使用 Slack ？还是Teams？或者通过电子邮件沟通？工程师通常会花费大量时间探讨问题和进行其他类型的讨论。当然，作为团队的新成员，你也希望加入这些沟通渠道。</li></ul><h4 id="3-程序人生-外部因素"><a href="#3-程序人生-外部因素" class="headerlink" title="3 程序人生*外部因素"></a>3 程序人生*外部因素</h4><h5 id="3-1如何获得客户的反馈？"><a href="#3-1如何获得客户的反馈？" class="headerlink" title="3.1如何获得客户的反馈？"></a>3.1如何获得客户的反馈？</h5><ul><li>我们的软件是 GitHub 上的开源软件吗？我们获取反馈的方式通过GitHub的议题吗？还是说由销售团队为产品团队获取客户的反馈？是否还有支持团队可以收集客户经常遇到的问题？换句话说，我们必须了解获取客户反馈的方式：无论是通过其他平台、个人还是团队。毕竟，我们是在为客户编写软件。</li></ul><h5 id="3-2客户的支持协议有哪些？"><a href="#3-2客户的支持协议有哪些？" class="headerlink" title="3.2客户的支持协议有哪些？"></a>3.2客户的支持协议有哪些？</h5><ul><li>是否有我们必须遵守的 SLA？我们必须支持哪些协议？</li></ul><h5 id="3-3公开-x2F-客户文档在哪里？"><a href="#3-3公开-x2F-客户文档在哪里？" class="headerlink" title="3.3公开/客户文档在哪里？"></a>3.3公开/客户文档在哪里？</h5><ul><li>这一点很重要。如今无论软件本身有多么好，我们都需要确保客户文档的准确性与及时性。这些文档在哪里？如何保持文件及时更新？是谁的责任？（希望答案是“每个人”）。</li></ul><h4 id="4-程序人生-产品"><a href="#4-程序人生-产品" class="headerlink" title="4 程序人生*产品"></a>4 程序人生*产品</h4><h5 id="4-1-软件有哪些高层面的痛点？"><a href="#4-1-软件有哪些高层面的痛点？" class="headerlink" title="4.1 软件有哪些高层面的痛点？"></a>4.1 软件有哪些高层面的痛点？</h5><ul><li>我们必须知道软件和团队是否面临一些重大问题。是否有一些因架构引发的问题？是否存在安全漏洞？是否有一些常见的客户问题反复出现并需要解决？</li></ul><h5 id="4-2-利益相关者关注的焦点是什么？"><a href="#4-2-利益相关者关注的焦点是什么？" class="headerlink" title="4.2 利益相关者关注的焦点是什么？"></a>4.2 利益相关者关注的焦点是什么？</h5><ul><li>是否存在某个核心人物或其他团队希望看到的功能？这些利益相关者往往会对软件的短期和长期路线图产生重大影响。了解他们关注的焦点就可以让你看清接下来的发展方向。</li></ul><h5 id="4-3-软件的发布周期是什么？"><a href="#4-3-软件的发布周期是什么？" class="headerlink" title="4.3 软件的发布周期是什么？"></a>4.3 软件的发布周期是什么？</h5><ul><li>我们必须了解软件的发布频率以及时间。团队是否实施连续部署，每天都部署多次？还是说一年只有两次发布？了解软件的发布日程可以让你更好地掌握软件的开发节奏。</li></ul><h4 id="5-程序人生-总结"><a href="#5-程序人生-总结" class="headerlink" title="5 程序人生*总结"></a>5 程序人生*总结</h4><ul><li>对于大多数软件工程师来说，加入一个新团队与接触一项新技术是一个激动人心的时刻！我们需要利用这段时间抓紧学习。希望本文的这些问题能够帮助你快速地融入新团队！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown相关基本语法</title>
      <link href="/2021/10/17/markdown-xiang-guan-ji-ben-yu-fa/"/>
      <url>/2021/10/17/markdown-xiang-guan-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>Markdown数学公式语法</p><h3 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h3><ul><li>行内公式：将公式插入到本行内，符号：$公式内容$，如：<code>$xyz$</code></li><li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：<code>$$xyz$$</code></li></ul><h3 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h3><ul><li>上标符号，符号：^，如：<code>$x^4$</code></li><li>下标符号，符号：_，如：<code>$x_1$</code></li><li>组合符号，符号：{}，如：<code>${16}_{8}O{2+}_{2}$</code></li></ul><h3 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h3><ul><li>汉字形式，符号：<code>\mbox{}</code>，如：<code>$V_{\mbox{初始}}$</code></li><li>字体控制，符号：<code>\displaystyle</code>，如：<code>$\displaystyle \frac{x+y}{y+z}$</code></li><li>下划线符号，符号：<code>\underline</code>，如：<code>$\underline{x+y}$</code></li><li>标签，符号\tag{数字}，如：<code>$\tag{11}$</code></li><li>上大括号，符号：<code>\overbrace{算式}</code>，如：<code>$\overbrace{a+b+c+d}^{2.0}$</code></li><li>下大括号，符号：<code>\underbrace{算式}</code>，如：<code>$a+\underbrace{b+c}_{1.0}+d$</code></li><li>上位符号，符号：\stacrel{上位符号}{基位符号}，如：<code>$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</code></li></ul><p><a href="https://www.jianshu.com/p/e74eb43960a1">https://www.jianshu.com/p/e74eb43960a1</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言(Markdown) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完美! 两行代码便能对图像加水印、文件对比以及利好抓包</title>
      <link href="/2021/10/17/wan-mei-liang-xing-dai-ma-bian-neng-dui-tu-xiang-jia-shui-yin/"/>
      <url>/2021/10/17/wan-mei-liang-xing-dai-ma-bian-neng-dui-tu-xiang-jia-shui-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="完美-两行代码便能对图像加水印、文件对比以及利好抓包"><a href="#完美-两行代码便能对图像加水印、文件对比以及利好抓包" class="headerlink" title="完美! 两行代码便能对图像加水印、文件对比以及利好抓包"></a>完美! 两行代码便能对图像加水印、文件对比以及利好抓包</h2><h4 id="一-、-引言："><a href="#一-、-引言：" class="headerlink" title="一 、 引言："></a>一 、 引言：</h4><p>今天都知道python是一个强大的编程语言，里面集成了很多有趣的第三方库。今天向大叫介绍一个比较好玩的工具filestools，它通过两行代码便可对图像增加水印，可以对比两个文件的差异，还可以利好抓包的curl转为python的requests请求代码。</p><h4 id="二-、安装"><a href="#二-、安装" class="headerlink" title="二 、安装"></a>二 、安装</h4><p>filestools库具有如下功能：</p><ol><li>仿 Linux 树形目录显示 tree 命令；</li><li>文件差异比较 diff 命令；</li><li>图片加水印 marker 命令；</li><li>curl 请求命令转 python 请求代码。</li><li>安装命令如下：<code>pip install filestools -U</code></li></ol><h4 id="三-、图像加水印"><a href="#三-、图像加水印" class="headerlink" title="三 、图像加水印"></a>三 、图像加水印</h4><p>导入水印模块</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from watermarker.marker import add_mark<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>add_mark 方法有8个参数：</em></p><ul><li>file：图片文件或图片文件夹路径；</li><li>mark：要添加的水印内容；</li><li>out：添加水印后的结果保存位置，默认生成到 output 文件夹；</li><li>color：水印的颜色设置；</li><li>space：水印直接的间隔, 默认 75 个空格；</li><li>angle：水印旋转角度，默认 30 度；</li><li>size：水印字体的大小，默认 50；</li><li>opacity：水印的透明度，默认 0.15</li></ul><h4 id="四、-具体实例"><a href="#四、-具体实例" class="headerlink" title="四、 具体实例"></a>四、 具体实例</h4><p>身份证经常需要被上传并用在实名认证上面，我们可以加上水印防止被盗用<br><img src="http://ndp971.bvimg.com/12724/18cd5d32371d305b.jpg" alt="图1 未水印前的图像"><br>经过水印处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> watermarker<span class="token punctuation">.</span>marker <span class="token keyword">import</span> add_markadd_mark<span class="token punctuation">(</span><span class="token string">r"D:\personal\gitpython\maoyan\0.png"</span><span class="token punctuation">,</span> <span class="token string">"“源码上门取算法码上到"</span><span class="token punctuation">,</span> angle<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> space<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#c5094d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="http://ndp971.bvimg.com/12724/d67d1aa0ba5da0e6.jpg" alt="图2 水印后的图像"></p><h4 id="五、文件对比"><a href="#五、文件对比" class="headerlink" title="五、文件对比"></a>五、文件对比</h4><p>导入水印模块</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from filediff.diff import file_diff_compare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>file_diff_compare 方法有 7 个参数：</em></p><ul><li>file1：被比较的文件 1;</li><li>file2：被比较的文件 2;</li><li>out：差异结果保存的文件名，默认值 diff_result.html;</li><li>max_width：每行超过多少字符就自动换行，默认值 70;</li><li>numlines：在差异行基础上前后显示多少行，默认是 0;</li><li>show_all：只要设置这个参数就表示显示全部原始数据，此时 numlines 参数无效；默认不显示全部;</li><li>no-browser：设置这个参数，在生成结果后不会自动打开游览器.<br>举个例子，有以下两个文件：<br><img src="http://ndp971.bvimg.com/12724/0b37feddddba5b59.png" alt="图3 对比文本文件图像"></li></ul><p>经过文件对比:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from filediff.diff import file_diff_comparefile_diff_compare(r"D:\一线城市.log", r"D:\一线城市2.log", diff_out="diff_result.html", max_width=70, numlines=0, no_browser=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>绿色表示新增，黄色表示修改，红色表示被删除。<br><img src="http://ndp971.bvimg.com/12724/2c4aa792057e8cd6.png" alt="图4 第一种结果图像"><br>当使用了 show_all 参数之后，将显示所有：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from filediff.diff import file_diff_comparefile_diff_compare("D:\一线城市.log", "D:\一线城市2.log", diff_out="diff_result.html", show_all=True, no_browser=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://ndp971.bvimg.com/12724/de52c6df3e95e3ba.png" alt="图5 第二种结果图像"></p><h4 id="六、curl-请求命令转-python-请求代码"><a href="#六、curl-请求命令转-python-请求代码" class="headerlink" title="六、curl 请求命令转 python 请求代码"></a>六、curl 请求命令转 python 请求代码</h4><p>curl 转 python 的用法完全利好爬虫，可以少写一些抓包代码。这个 api 会生成 headers、requests.get() 等内容。<br>先在谷歌游览器中复制网络抓到的网络请求为cURL(bash)，如下图：</p><p><img src="http://ndp971.bvimg.com/12724/4395660ab135635b.jpg" alt="图6 网页获取截图图像"><br>复制出来的内容类似：</p><pre class="line-numbers language-curl" data-language="curl"><code class="language-curl">curl 'https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/mancard/img/side/qrcode@2x-daf987ad02.png' \  -H 'sec-ch-ua: "Chromium";v="94", "Google Chrome";v="94", ";Not A Brand";v="99"' \  -H 'Referer: https://www.baidu.com/' \  -H 'sec-ch-ua-mobile: ?0' \  -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' \  -H 'sec-ch-ua-platform: "Windows"' \  --compressed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 curl 转 python</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from curl2py.curlParseTool import curlCmdGenPyScriptcurl_cmd = """curl 'https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/mancard/img/side/qrcode@2x-daf987ad02.png' \  -H 'sec-ch-ua: "Chromium";v="94", "Google Chrome";v="94", ";Not A Brand";v="99"' \  -H 'Referer: https://www.baidu.com/' \  -H 'sec-ch-ua-mobile: ?0' \  -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36' \  -H 'sec-ch-ua-platform: "Windows"' \  --compressed"""output = curlCmdGenPyScript(curl_cmd)print(output)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="http://ndp971.bvimg.com/12724/2b37a120e05ac6ee.png" alt="图7 curl转python后的结果"></p><h4 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h4><p> python 中有趣并且好用的第三方库还有很多，小编会在后面的”源码上门取算法码上到”公众号文章中为大家继续介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 语言(Python) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建微服务-Spring boot 入门篇</title>
      <link href="/2021/09/08/gou-jian-wei-fu-wu-spring-boot-ru-men-pian/"/>
      <url>/2021/09/08/gou-jian-wei-fu-wu-spring-boot-ru-men-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="构建微服务：Spring-boot-入门篇"><a href="#构建微服务：Spring-boot-入门篇" class="headerlink" title="构建微服务：Spring boot 入门篇"></a><a href="https://www.cnblogs.com/ityouknow/p/5662753.html">构建微服务：Spring boot 入门篇</a></h2><blockquote><h2 id="com"><a href="#com" class="headerlink" title="com"></a>com</h2><blockquote><ul><li>+- example <blockquote><ul><li>+- myproject</li><li>+- Application.java      </li><li>|</li><li>+- domain</li><li>|  +- Customer.java</li><li>|  +- CustomerRepository.java</li><li>| </li><li>+- service</li><li>|  +- CustomerService.java</li><li>|</li><li>+- controller</li><li>|  +- CustomerController.java</li><li>|</li></ul></blockquote></li></ul><ol><li><strong>Application.java</strong> 建议放到跟目录下面,主要用于做一些框架配置</li><li><strong>domain</strong>目录主要用于实体（Entity）与数据访问层（Repository）</li><li><strong>service</strong> 层主要是业务类代码</li><li><strong>controller</strong> 负责页面访问控制   </li><li>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改,最后，启动Application main方法，至此一个java项目搭建好了！</li></ol></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 语言(SpringBoot) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
